//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2011                                       //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                               FEBRUARI 2011                                          //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container GeoThermie: IsTemplate = "True"
{
	container BeginStatus;
	container AanbodKentallen;
	container EnergiePrijzen;
	parameter<Units/Jaar> Jaar;
	
	// end of case param
	
	unit<uint32> PlanRegio := RunImpl/PlanRegio;
		
	container TypeInfo := BronData/WarmteBronnen/GeoThermie/TypeInfo;
	
	container KostenBaten := BeginStatus/KostenBaten;
	
	unit<uint32> bron := PlanRegio
	{
		unit<uint32> ContourSet:= BronData/WarmteBronnen/GeoThermie/ContourSet;
		unit<uint32> PointSet:=ContourSet/PointSet;
		attribute<bool> IsInContour:= IsDefined(ContourSet/grid[point[Geography/rdc_100lu]]), FreeData = "False"; // > value(0, ContourSet);
		unit<uint32> OutsideContourSet:= Subset(not(IsInContour))
		{
			attribute<rdc_meter> Usage_point:= bron/point[nr_OrgEntity];
			attribute<PointSet> Connections: = connect(PointSet/Point, Usage_Point);
			attribute<rdc_meter> Drill_point:= PointSet/Point[Connections];
			attribute<m>  Dist:= value(dist(Usage_Point, Drill_Point), m);
		}
		
		attribute<m>  Dist:= IsInContour ? 0[m] : OutsideContourSet/Dist[invert(OutsideContourSet/nr_OrgEntity)];
	}
	container Kosten
	{
		attribute<EUR> Installatie(PlanRegio) := 
			(TypeInfo/K_kW_min * Schuiven/KostenMin + TypeInfo/K_kW_max * Schuiven/KostenMax)
			* max_elem(KostenBaten/CapaciteitsVraagD, TypeInfo/MWth_min) * 1000[kW / MW]
			* LeerCurves/Curve2
		;

		attribute<EUR> PijpKosten(PlanRegio) := KostenBaten/KostenD/PrimairNet/LeidingKosten/aK_m * bron/dist;
			
		attribute<EUR> Ki_Totaal(PlanRegio) := Installatie + Pijpkosten;
				
		parameter<EUR_GJ> K_GJ :=
			(Jaar < value(2020, Units/Jaar) ? TypeInfo/K_GJ10 :  
			 Jaar < value(2030, Units/Jaar) ? TypeInfo/K_GJ20 :  
			 Jaar < value(2040, Units/Jaar) ? TypeInfo/K_GJ30 :  
			 Jaar < value(2050, Units/Jaar) ? TypeInfo/K_GJ40 :  
			               TypeInfo/K_GJ50 )  ;
		parameter<EUR_GJ> Km_GJ := K_GJ;
			
		attribute<Eur_yr> Kj_pt_Base     (PlanRegio) := PijpKosten * VestaRunData/Onderhoud/Rj_PrimairNet;
		attribute<Eur_yr> Kj_pt_Admin    (PlanRegio) := Kj_pt_Base * VestaRunData/Onderhoud/R_Admin;
		attribute<Eur_yr> Kj_pt_Onderhoud(PlanRegio) := Kj_pt_Base - Kj_pt_Admin;
		attribute<Eur_yr> Kj_pt_Precario (PlanRegio) := KostenBaten/KostenD/PrimairNet/LeidingKosten/a * bron/dist * VestaRunData/Onderhoud/Rj_Precario_m;
		
		attribute<Eur_yr> Kj_ow_Base     (PlanRegio) := Installatie * TypeInfo/Rj_Onderhoud;
		attribute<Eur_yr> Kj_ow_Admin    (PlanRegio) := Kj_ow_Base * VestaRunData/Onderhoud/R_Admin;
		attribute<Eur_yr> Kj_ow_Onderhoud(PlanRegio) := Kj_ow_Base - Kj_ow_Admin;
		
		attribute<EUR_Yr> Kj_WarmteWaarde(PlanRegio) := K_GJ  * KostenBaten/Vj_WarmtePrimairD;
		attribute<EUR_Yr> Km_WarmteWaarde(PlanRegio) := Km_GJ * KostenBaten/Vj_WarmtePrimairD;
				
		attribute<Eur_yr> Kj_Totaal(PlanRegio) := Kj_pt_Base + Kj_ow_Base + Kj_WarmteWaarde + Kj_pt_Precario;
		attribute<Eur_yr> Km_Totaal(PlanRegio) := Kj_pt_Base + Kj_ow_Base + Km_WarmteWaarde;
		attribute<EUR_Yr> Oj_SDE   (PlanRegio) := KostenBaten/Vj_WarmtePrimairD * UserInput/BeleidsOpties/EEA/SDE[TypeInfo/TypeInfoList_rel];
	}

	attribute<EUR   > Oi_Totaal  (PlanRegio):= KostenBaten/Oi_Aansluitbijdrage;
	attribute<EUR   > Ki_Totaal  (PlanRegio):= KostenBaten/Ki_wd_bruto + Kosten/Ki_Totaal; // eenmalige bruto maatschappelijke investeringskosten (dus zonder aftrenk van aansluitbijdrage)
	attribute<EUR   > Ki_Netto   (PlanRegio):= Ki_Totaal - NCW/ow28/StartDiscountFactor * Oi_Totaal; // : eenmalige investering minus netto aansluitbijdrage
	attribute<EUR_Yr> Km_Totaal  (PlanRegio):= KostenBaten/Km_TotaalD + Kosten/Km_Totaal; // jaarlijkse bruto kosten zonder aftrek van vastrecht en verbruiksvergoeding
	attribute<EUR_Yr> Oj_Netto   (PlanRegio):= KostenBaten/Oj_NettoD  - Kosten/Kj_Totaal; // Rentabiliteit: jaarlijkse opbrengst
	parameter<kg_GJ>  CO2_GJb     := 0[kg_GJ];
	parameter<g_GJ>   NOx_GJb     := 0[g_GJ];
	parameter<g_GJ>   SO2_GJb     := 0[g_GJ];
	parameter<g_GJ>   VOS_GJb     := 0[g_GJ];
	parameter<g_GJ>   TS_GJb      := 0[g_GJ];
	attribute<kg_Yr>  CO2_Primair(PlanRegio):= const(0[kg_Yr], PlanRegio);
	attribute<kg_Yr>  CO2        (PlanRegio):= KostenBaten/CO2_BijstookD + CO2_Primair;
	attribute<EUR_Yr> Ke_Totaal  (PlanRegio):= const(0[EUR_Yr], PlanRegio);
	attribute<GJ_Yr>  GJe_Totaal (PlanRegio):= const(0[GJ_Yr], PlanRegio);
	attribute<KG_Yr>  CO2_e      (PlanRegio):= const(0[KG_Yr], PlanRegio);
	attribute<EUR_Yr> Oj_Afweging(PlanRegio) := 
		Oj_Netto + kosten/Oj_SDE
		- Kosten/Installatie * NCW/ow28/AnnualisationFactor * ((1.0 - UserInput/BeleidsOpties/EIA/ow)*(1.0 - UserInput/BeleidsOpties/EEA/ow))[TypeInfo/TypeInfoList_rel]
		- Kosten/PijpKosten  * NCW/pt28/AnnualisationFactor * ((1.0 - UserInput/BeleidsOpties/EIA/pt)*(1.0 - UserInput/BeleidsOpties/EEA/pt));
	attribute<Bool> RentabiliteitsAfweging(PlanRegio) := Oj_Afweging > 0[EUR_Yr];
	attribute<Bool> Afweging2    (PlanRegio) := bron/IsInContour;
	
	attribute<Bool> OldGebruik   (PlanRegio) := IsDefined(BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie); // een optie (deze of andere) was al in gebruik
	attribute<Bool> GebruiktOptie(PlanRegio) := BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/Geothermie;   // deze optie was al in gebruik;
	attribute<Bool> NewGebruik   (PlanRegio) := RentabiliteitsAfweging && Afweging2 && not(OldGebruik);
	attribute<Bool> GebruikOptie (PlanRegio) := NewGebruik || GebruiktOptie;
	
	attribute<EUR_YR> Kj_Netto(PlanRegio) := Ki_Netto * NCW/ow28/AnnualisationFactor - Oj_Netto; // Rentabiliteit: jaarlijkse opbrengsten voor de energieproducent
	
	container Results := BeginStatus
	{
		container Factoren {
			parameter<Float64> Aardgas_factor    := 0.0;
			parameter<Float64> Biogas_factor     := 0.0;
			parameter<Float64> Biovast_factor   := 0.0;
			parameter<Float64> Ondergrond_factor := 1.0;
			parameter<Float64> Elektriciteit_factor := 1.0 / 30.0;
		}
		
		container AanbodOpties := BeginStatus/AanbodOpties
		{
			attribute<Classifications/AanbodOptie> PlanRegioWarmteAllocatie(PlanRegio): Expr = 
				"GebruikOptie "
					"? MakeDefined(BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie, Classifications/AanbodOptie/V/GeoThermie) "
					": BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie";
		}
		container Stock := BeginStatus/Stock
		{
			attribute<EUR> Ki_ow(PlanRegio) := BeginStatus/Stock/Ki_ow + iif(NewGebruik, Kosten/Installatie, 0[EUR]);
			attribute<EUR> Oi_ow_subsidie(PlanRegio) := BeginStatus/Stock/Oi_ow_subsidie + iif(NewGebruik, 
				Kosten/Installatie * UserInput/BeleidsOpties/EIA/ow[TypeInfo/TypeInfoList_rel], 0[EUR]);
				
			attribute<EUR> Oe_ow_subsidie(PlanRegio) := BeginStatus/Stock/Oe_ow_subsidie + iif(NewGebruik,(Ki_ow - Oi_ow_subsidie) * UserInput/BeleidsOpties/EEA/ow[TypeInfo/TypeInfoList_rel], 0[EUR]);
				
			attribute<EUR> Ki_pt(PlanRegio) := BeginStatus/Stock/Ki_pt + iif(NewGebruik, Kosten/PijpKosten, 0[EUR]);
			attribute<EUR> Oi_pt_subsidie(PlanRegio) := BeginStatus/Stock/Oi_pt_subsidie + iif(NewGebruik, Kosten/Installatie * UserInput/BeleidsOpties/EIA/pt, 0[EUR]);
		}
		container Flow := BeginStatus/Flow
		{
			attribute<EUR_Yr> Kj_pt_Admin    (PlanRegio) := BeginStatus/Flow/Kj_pt_admin     + iif(GebruikOptie, Kosten/Kj_pt_admin    , 0[EUR_Yr]);
			attribute<EUR_Yr> Kj_pt_Onderhoud(PlanRegio) := BeginStatus/Flow/Kj_pt_Onderhoud + iif(GebruikOptie, Kosten/Kj_pt_Onderhoud, 0[EUR_Yr]);
			attribute<EUR_Yr> Kj_pt_Precario (PlanRegio) := BeginStatus/Flow/Kj_pt_Precario  + iif(GebruikOptie, Kosten/Kj_pt_Precario , 0[EUR_Yr]);
			
			attribute<EUR_Yr> Kj_ow_Onderhoud(PlanRegio) := BeginStatus/Flow/Kj_ow_Onderhoud + iif(GebruikOptie, Kosten/Kj_ow_Onderhoud, 0[EUR_Yr]);
			attribute<EUR_Yr> Kj_ow_admin    (PlanRegio) := BeginStatus/Flow/Kj_ow_Admin     + iif(GebruikOptie, Kosten/Kj_ow_admin    , 0[EUR_Yr]);
			attribute<EUR_Yr> Kj_ow_verbruik (PlanRegio) := BeginStatus/Flow/Kj_ow_verbruik  + iif(GebruikOptie, Kosten/Kj_WarmteWaarde, 0[EUR_Yr]);
			attribute<EUR_Yr> Km_ow_verbruik (PlanRegio) := BeginStatus/Flow/Km_ow_verbruik  + iif(GebruikOptie, Kosten/Km_WarmteWaarde, 0[EUR_Yr]);
			attribute<EUR_Yr> Oj_SDE         (PlanRegio) := BeginStatus/Flow/Oj_SDE          + iif(GebruikOptie, kosten/Oj_SDE         , 0[EUR_Yr]);
		}
	}
}
