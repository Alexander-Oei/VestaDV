//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                               JUNI 2018                                              //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// Dit is de configuratiefile met het Rekenchema om de model objectdata te importeren   //
// uit Excel bestanden en deze van heldere namen en values units te voorzien            //
//                                                                                      //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template Import
{
	parameter<String> FileName;
	parameter<String> ModelType_str_name;
	
	unit<UInt8> model_type;
	unit<UInt8> bouwjaarindeling;
	
	unit<Float64> model_eenheid;
	unit<Float64> koppel_eenheid;

//					attribute<bool> Actief(domein): Expr = "const(true, domein)";

	unit<Float64> GJ_Yr_per_eenheid : Expr = "(units/GJ / Units/Yr) / model_eenheid";
	unit<Float64> kW_per_eenheid:  Expr = "units/kW  / model_eenheid"; // capaciteit
	unit<Float64> kWh_per_eenheid: Expr = "units/kWh / model_eenheid";
	unit<Float64> EUR_per_eenheid: Expr = "units/EUR / model_eenheid";
	unit<Float64> m2_per_eenheid:  Expr = "units/m2  / model_eenheid";	
	unit<Float64> MU_per_JU: Expr = "model_eenheid / koppel_eenheid";
	
	unit<UInt32> Table
	:	StorageName = "='%datadir%/'+ FileName"
	,	StorageType = "gdal.vect"
	,	StorageReadOnly = "True"
	,	SyncMode    = "All"
	,	IsHidden    = "True"
	{
		attribute<String> BouwJaar_str;
		attribute<string> ModelType_str := =ModelType_str_name;
		
		attribute<String> Label: Expr = "trim(ModelType_str) +  ', ' + trim(BouwJaar_str)", DialogType = "LabelText";
		parameter<String> LabelList: Expr = "lowercase(AsItemList(Label))";
		
	}
	unit<uint32> TableColumns :=SubItem_PropValues(table, 'name');
	container Results : FreeData = "False"
	{
		unit<UInt32>  ModelObject := Table;
		unit<Float64> ModelUnit := model_eenheid;
		unit<Float64> JoinedUnit := koppel_eenheid;
		
		attribute<MU_per_JU> nrMUperJU(ModelObject) := const(1.0[ModelUnit / JoinedUnit], Table);
		
		attribute<bouwjaarindeling> BouwJaar (ModelObject): Expr = "rlookup(trim(Table/BouwJaar_str ), bouwjaarindeling/excel_code)";
		attribute<model_type>       ModelType(ModelObject): Expr = "rlookup(trim(Table/ModelType_str), model_type/Excel_code)";
		attribute<UInt8>            SubType  (ModelObject): Expr = "ModelType *  UInt8(NrOfRows(bouwjaarindeling)) + BouwJaar";

		container Functioneel
		{
			attribute<GJ_Yr_per_eenheid> RuimteVerwarming      (ModelObject) := value(table/V_RV,       GJ_Yr_per_eenheid);
			attribute<GJ_Yr_M2>          Pompenergie_M2        (ModelObject) := 
				= IsDefined(rlookup('V_P_ELEK', TableColumns/name))
				? 'MakeDefined(value(table/V_P_ELEK,  Ratio), 0.0[GJ_YR_M2])'
				: 'const(0.0[GJ_YR_M2], ModelObject)';
			attribute<GJ_Yr_per_eenheid> Pompenergie_min       (ModelObject) := Pompenergie_M2 * area/min;
			attribute<GJ_Yr_per_eenheid> Pompenergie_max       (ModelObject) := Pompenergie_M2 * area/max;
			attribute<GJ_Yr_per_eenheid> Koude                 (ModelObject) := value(table/V_KOU,      GJ_Yr_per_eenheid);
			attribute<GJ_Yr_per_eenheid> WarmWater             (ModelObject) := value(table/V_WW,       GJ_Yr_per_eenheid);
			attribute<GJ_Yr_per_eenheid> ElektrischeApparatuur (ModelObject) := value(table/V_APP_ELEK, GJ_Yr_per_eenheid);
		}
		container Efficiency
		{
			attribute<Classifications/EnergieLabel> EnergieLabel(ModelObject): Expr = 
				"results/energie/Label == 'A' "
					"? Classifications/EnergieLabel/V/LabelB "
					": rlookup(results/energie/Label, Classifications/EnergieLabel/Label)";
			
			attribute<Ratio> Gebouw           (ModelObject): Expr = "value(table/EG, Ratio)";
			
			container RuimteVerwarming
			{
				attribute<Ratio> AardGas          (ModelObject) := MakeDefined(value(table/E_RV_Gas,  Ratio), value(1.0, Ratio));
			}
			container Koude
			{
				attribute<Ratio> Elektriciteit (ModelObject) := MakeDefined(value(table/E_KOU_ELEK, Ratio), 1.0[Ratio]), Descr = "Efficiency Airco";
			}
			container WarmWater
			{
				attribute<Ratio> AardGas     (ModelObject) := MakeDefined(value(table/E_WW_GAS,  Ratio), 1.0[Ratio]);
			}
			container Apparatuur
			{
				attribute<Ratio> Elektriciteit (ModelObject): Expr = "MakeDefined(value(table/E_APP_Elek, Ratio), value(1.0, Ratio))";
			}
		}
		container AansluitCapaciteit
		{
			attribute<kW_per_eenheid> Warmte(ModelObject): Expr = "value(table/AC_WARM, kW_per_eenheid)";
		}
		container Energie
		{
			attribute<Float64> Index (ModelObject): Expr = "Float64(table/EnergieIndex)";
			attribute<String>  Label (ModelObject): Expr = "String(table/EnergieLabel)";
		}
		container Verbeteringen
		{
			container RuimteVerwarming
			{
				attribute<Ratio> efficiency (ModelObject) := MakeDefined(value(table/MV_RV, Ratio), value(1.07, Ratio));
			}
			container LTAS
			{
				attribute<EUR_per_eenheid> kosten_min(ModelObject) := = IsDefined(rlookup('K_LTAS_MIN', TableColumns/name)) ? 'value(table/K_LTAS_MIN, EUR_per_eenheid)' : 'const(0[EUR_per_eenheid], ModelObject)';
				attribute<EUR_per_eenheid> kosten_max(ModelObject) := = IsDefined(rlookup('K_LTAS_MAX', TableColumns/name)) ? 'value(table/K_LTAS_MAX, EUR_per_eenheid)' : 'const(0[EUR_per_eenheid], ModelObject)';
			}
		}
		container area
		{
			attribute<m2_per_eenheid> min(ModelObject) := = IsDefined(rlookup('VL_OPP_WON_MIN', TableColumns/name)) ? 'value(table/VL_OPP_WON_MIN, m2_per_eenheid)' : 'const(1.0, ModelObject)';
			attribute<m2_per_eenheid> max(ModelObject) := = IsDefined(rlookup('VL_OPP_WON_MAX', TableColumns/name)) ? 'value(table/VL_OPP_WON_MAX, m2_per_eenheid)' : 'const(1.0, ModelObject)';
			attribute<m2_per_eenheid> gem(ModelObject) := 0.5 * (min+max);
		}
	}
}