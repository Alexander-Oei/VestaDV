container AllocExports
{
	container PlanRegioResults
	{
		Unit<UInt32>  table := PlanRegio
		{
			attribute<string> BU_CODE                                       := Vesta/Geography/RegioIndelingen/buurt/BU_CODE;
			attribute<Classifications/AanbodOptie> AanbodOptie              := EndState/AanbodOpties/PlanRegioWarmteAllocatie;
			attribute<Vesta/Units/kg_Yr> CO2_gebouwen_AardGas_totaal        := indicatoren/CO2/gebouwen/AardGas/totaal;
			attribute<Vesta/Units/kg_Yr> CO2_gebouwen_Elektriciteit_totaal  := indicatoren/CO2/gebouwen/Elektriciteit/totaal;
			attribute<Vesta/Units/kg_Yr> CO2_gebouwen_totaal                := indicatoren/CO2/gebouwen/totaal;
			attribute<Vesta/Units/kg_Yr> CO2_totaal                         := indicatoren/CO2/totaal;
			attribute<Vesta/Units/kW> Woning_CapaciteitWarmteD              := Initieel/KostenBaten/PlanRegioKaarten/Woning/CapaciteitWarmteD;
			attribute<Vesta/Units/nrAansl>Woning_nrAanslWarmteD             := Initieel/KostenBaten/PlanRegioKaarten/Woning/nrAanslWarmteD;
			attribute<Float64>Woning_nrModelUnitsWarmteD                    := Initieel/KostenBaten/PlanRegioKaarten/Woning/nrModelUnitsWarmteD;
			attribute<Vesta/Units/GJ_Yr> Woning_VerbruikA                   := Initieel/KostenBaten/PlanRegioKaarten/Woning/VerbruikA;
			attribute<Vesta/Units/Eur_Yr>Woning_WarmteVraagA                := Initieel/KostenBaten/PlanRegioKaarten/Woning/WarmteVraagA;
			attribute<Vesta/Units/GJ_Yr> Vj_WarmtePrimairD                  := Initieel/KostenBaten/Vj_WarmtePrimairD;
			attribute<Vesta/Units/GJ_Yr> WarmteVraagD                       := Initieel/KostenBaten/WarmteVraagD;
		}

		unit<uint32> export:= PlanRegio
		{
			unit<uint32> variabele := SubItem_PropValues(table,'name');
			parameter<string> result_expr:= AsList('MakeDefined(string(table/' + variabele/name + '),'''')+'';''',' + ');
			attribute<string> result_att := =result_expr;
			parameter<string> result := AsList(variabele/name+';', '')+'\n'+AsList(result_att, '\n'),
				Storagename = "=OutputFolder+'/PR.csv'",
				StorageType = "str";
		}
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "export/result";
	}

	template BebouwingsComponentTempl
	{
		parameter<String> ComponentName;
		container AllocatieResultaatComponent;
		
		container VestaRunDataComponent:  = AllocatieResultaatComponent/VestaRunDataComponent;

		Unit<UInt32>  table := AllocatieResultaatComponent/BebouwingsObject
		{
			//attribute<String> BAG_id := /Vesta/BronData/BAG/vbo_woonfunctie/id;
			attribute<string> id := code;
			attribute<string> Label := VestaRunDataComponent/bebouwing/label;
			attribute<Classifications/AanbodOptie> AanbodOptie: = AllocatieResultaatComponent/WarmteAllocatie;

			attribute<GJ_Yr> MV_RW   := AllocatieResultaatComponent/MeterVraag/RestWarmte;
			attribute<GJ_Yr> MV_GT   := AllocatieResultaatComponent/MeterVraag/GeoThermie;
			attribute<GJ_Yr> MV_WKK  := AllocatieResultaatComponent/MeterVraag/WijkWKK;
			attribute<GJ_Yr> MV_WKO  := AllocatieResultaatComponent/MeterVraag/WKO;
			attribute<GJ_Yr> MV_GAS  := AllocatieResultaatComponent/MeterVraag/AardGas;
			attribute<GJ_Yr> MV_ELEK := AllocatieResultaatComponent/MeterVraag/Elektriciteit;
			attribute<GJ_Yr> MV_TOTL := AllocatieResultaatComponent/MeterVraag/Totaal;

			attribute<KG_Yr> CO2_GAS:  = AllocatieResultaatComponent/CO2/AardGas;
			attribute<KG_Yr> CO2_ELEK: = AllocatieResultaatComponent/CO2/Elektriciteit;

			
			attribute<Vesta/Units/Eur> AansluitBijdrage_Gas              := AllocatieResultaatComponent/AardGas/AansluitBijdrage;
			attribute<Vesta/Units/Eur> AansluitBijdrage_Elek             := AllocatieResultaatComponent/Elektriciteit/AansluitBijdrage;
			attribute<Vesta/Units/Eur_Yr> CO2Heffing_Gas                 := AllocatieResultaatComponent/AardGas/CO2Heffing;
			attribute<Vesta/Units/Eur_Yr> CO2Heffing_Elek                := AllocatieResultaatComponent/Elektriciteit/CO2Heffing;
			attribute<Vesta/Units/Eur_Yr> Eindgebruik_ex_Gas             := AllocatieResultaatComponent/AardGas/eindgebruik_ex;
			attribute<Vesta/Units/Eur_Yr> Eindgebruik_ex_Elek            := AllocatieResultaatComponent/Elektriciteit/eindgebruik_ex;
			attribute<Vesta/Units/Eur_Yr> EnergieHeffing_Gas             := AllocatieResultaatComponent/AardGas/EnergieHeffing;
			attribute<Vesta/Units/Eur_Yr> EnergieHeffing_Elek            := AllocatieResultaatComponent/Elektriciteit/EnergieHeffing;
			attribute<uint8> ggk_rel_Gas                                 := AllocatieResultaatComponent/AardGas/ggk_rel;
			attribute<uint8> ggk_rel_Elek                                := AllocatieResultaatComponent/Elektriciteit/ggk_rel;

			attribute<Vesta/Units/Eur_Yr> Maatschappelijk_Gas  := AllocatieResultaatComponent/AardGas/maatschappelijk;
			attribute<Vesta/Units/Eur_Yr> Maatschappelijk_Elek := AllocatieResultaatComponent/Elektriciteit/maatschappelijk;
			attribute<Vesta/Units/Eur_Yr> Netwerk_Gas          := AllocatieResultaatComponent/AardGas/netwerk;
			attribute<Vesta/Units/Eur_Yr> Netwerk_Elek         := AllocatieResultaatComponent/Elektriciteit/netwerk;

			attribute<classifications/EnergieLabel> EL_LV := VestaRunDataComponent/energielabel/LastValue;
			attribute<classifications/EnergieLabel> EL_CV := VestaRunDataComponent/energielabel/CurrValue;
			attribute<bool> EL_WC                         := VestaRunDataComponent/energielabel/WasChanged;
			attribute<bool> EL_ICN                        := VestaRunDataComponent/energielabel/IsChangedNow;
			attribute<bool> EL_IC                         := VestaRunDataComponent/energielabel/IsChanged;

			attribute<EUR> Ki_Totaal      := VestaRunDataComponent/Kosten/Ki_Totaal;
			attribute<EUR> Ki_ZonneBoiler := VestaRunDataComponent/Kosten/Ki_ZonneBoiler;
			attribute<EUR> Ki_Zon_PV      := VestaRunDataComponent/Kosten/Ki_Zon_PV;
		}
		
		container export
		{
			unit<uint32> variabele := SubItem_PropValues(table,'name');
			parameter<string> result_expr:= AsList('MakeDefined(string(table/' + variabele/name + '),'''')+'';''',' + ');
			attribute<string> result_att(table) := =result_expr;
			parameter<string> result := AsList(variabele/name+';', '')+'\n'+AsList(result_att, '\n'),
			
				Storagename = "=OutputFolder+'/'+ComponentName+'.csv'",
				StorageType = "str";
		}
		
		parameter<String> Generate := 'Ready', ExplicitSuppliers = 'export/result';
	}

	container BebouwingsComponentResults := 
			for_each_ne(Classifications/BebouwingsComponent/name, 
				'BebouwingsComponentTempl('+Quote(Classifications/BebouwingsComponent/name)+',AllocatieResultaat/'+Classifications/BebouwingsComponent/name+')'
			);

	parameter<String> GenerateAll := 'Ready',
		ExplicitSuppliers = 
			"='PlanRegioResults/Generate'"
			"+';'+AsList('BebouwingsComponentResults/'+Classifications/BebouwingsComponent/name+'/Generate',';')"
		;
}