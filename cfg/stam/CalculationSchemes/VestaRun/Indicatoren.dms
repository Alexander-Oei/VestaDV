//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2011                                       //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                               FEBRUARI 2010                                          //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////


container indicatoren
{
	container CO2: Source = "FO v7a C5"
	{
		parameter<KG_GJ> CO2_GJe := VestaRunData/Prijzen/Elektriciteit/CO2_GJ;
		parameter<KG_GJ> CO2_GJg := VestaRunData/Prijzen/AardGas/CO2_GJ;
		
		container gebouwen
		{
			container Elektriciteit := for_each_nedv(Classifications/BebouwingsComponent/Name, 'sum(AllocatieResultaat/'+Classifications/BebouwingsComponent/Name+'/CO2/Elektriciteit, VestaRunData/'+Classifications/BebouwingsComponent/Name+'/PlanRegio_rel)', PlanRegio, KG_Yr)
			{
 				attribute<KG_Yr> Totaal(PlanRegio) := ='add('+AsItemList(Classifications/BebouwingsComponent/Name)+')';
			}
			container AardGas := for_each_nedv(Classifications/BebouwingsComponent/Name, 'sum(AllocatieResultaat/'+Classifications/BebouwingsComponent/Name+'/CO2/AardGas, VestaRunData/'+Classifications/BebouwingsComponent/Name+'/PlanRegio_rel)', PlanRegio, KG_Yr)
			{
 				attribute<KG_Yr> Totaal(PlanRegio) := ='add('+AsItemList(Classifications/BebouwingsComponent/Name)+')';
			}
			attribute<KG_Yr> Totaal(PlanRegio) := Elektriciteit/Totaal + AardGas/Totaal;
		}
		container CaseData
		{
			attribute<String> BronExpr(Classifications/AanbodOptie) := union_data(Classifications/AanbodOptie, 
				'EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/RestWarmte ? GebiedsAllocatie/RestWarmte/CO2   : 0.0[KG_Yr]',
				'EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/GeoThermie ? GebiedsAllocatie/GeoThermie/CO2   : 0.0[KG_Yr]',
				'EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/WijkWKK    ? GebiedsAllocatie/WijkWKK/impl/CO2 : 0.0[KG_Yr]',
				'EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/BioWKK     ? GebiedsAllocatie/BioWKK/impl/CO2  : 0.0[KG_Yr]',
				'EndState/WKO/CO2'
			);
		}
		container CentraleWarmteBronnen := for_each_nedv(Voorkeuren/WarmteOpties/Name, CaseData/BronExpr[Voorkeuren/WarmteOpties/AanbodOptie], PlanRegio, KG_Yr)
		{
			attribute<KG_Yr> Totaal(PlanRegio) := =iif(#Voorkeuren/WarmteOpties=0, 'const(0, PlanRegio, KG_Yr)', 'add('+AsItemList(Voorkeuren/WarmteOpties/Name)+')');
		}
		attribute<KG_Yr> Totaal(PlanRegio) := Gebouwen/Totaal + CentraleWarmteBronnen/Totaal;
	}
	// *** Bij vervanging van AardGas door warmte, of eWP, EWV, of WKO,
	// valt de distributievergoeding weg tbv het dekken van de afschrijving van het bestaande aardgasnet
	attribute<Bool> heeft_gebiedswarmte(PlanRegio) := IsDefined(EndState/AanbodOpties/PlanRegioWarmteAllocatie); 
	attribute<Bool> heeft_gas          (PlanRegio) := ='or('+AsItemList(replace('any(AllocatieResultaat/@BC@/MeterVraag/Aardgas > 0.0, VestaRunData/@BC@/PlanRegio_rel)','@BC@', Classifications/GasnetComponent/Name))+')';
	
	container Maatschappelijk: Source = "FO v7a C6"
	{
		container CaseData: IsHidden = "true"
		{
			attribute<String> BronExpr(Classifications/AanbodOptie) := 
				union_data(Classifications/AanbodOptie,
					'EndState/Flow/Km_Total * Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/RestWarmte)',
					'EndState/Flow/Km_Total * Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/GeoThermie)',
					'EndState/Flow/Km_Total * Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/WijkWKK)',
					'EndState/Flow/Km_Total * Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/BioWKK)',
					'(EndState/WKO/Ki_Totaal *NCW/mr28/AnnualisationFactor + EndState/WKO/Km_Totaal)'
				);
		}
		container gebouwen {
			container ElektriciteitsVraag := // excl WKO vraag
					for_each_nedv(Classifications/BebouwingsComponent/Name, 
						replace(
							'sum(AllocatieResultaat/@BC@/Elektriciteit/maatschappelijk, VestaRunData/@BC@/PlanRegio_rel)'
						,	'@BC@', Classifications/BebouwingsComponent/Name
						)
					, PlanRegio, EUR_Yr
					)
			{
				attribute<EUR_Yr> Km_Totaal(PlanRegio) := ='add('+AsItemList(Classifications/BebouwingsComponent/Name)+')';
			}
			
			
			container AardGasVerbruik := // incl mWKK excl Wijk_wkk en kosten bijstook WOS
					for_each_nedv(Classifications/BebouwingsComponent/Name,
						replace(
							'sum(AllocatieResultaat/@BC@/AardGas/maatschappelijk, VestaRunData/@BC@/PlanRegio_rel)'
						,	'@BC@', Classifications/BebouwingsComponent/Name
						)
					, PlanRegio, EUR_Yr
					)
			{
				attribute<EUR_Yr> Km_Totaal(PlanRegio) := ='add('+AsItemList(Classifications/BebouwingsComponent/Name)+')';
			}
			
			
			attribute<EUR>    Ki_GebouwVerbetering(PlanRegio): Expr = "='add('+AsItemList('sum(VestaRunData/'+Classifications/BebouwingsComponent/Name+'/Kosten/Ki_GebouwVerbetering, VestaRunData/'+Classifications/BebouwingsComponent/Name+'/PlanRegio_rel)')+')'";
			attribute<EUR_YR> Km_GebouwVerbetering(PlanRegio) :=  Ki_GebouwVerbetering *NCW/mr30/AnnualisationFactor;
			
			attribute<EUR_YR> Kj_Onderhoud  (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/gebouwen/Kj_Onderh_excl')+')';
			attribute<EUR_YR> Kj_Admin      (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/gebouwen/Kj_Admin_excl')+')';
			
			attribute<EUR_Yr> Km_Totaal(PlanRegio) := ElektriciteitsVraag/Km_Totaal + AardGasVerbruik/Km_Totaal + Km_GebouwVerbetering + Kj_Onderhoud + Kj_Admin;
		}
		container LokaleEnergieProductie
		{
			attribute<EUR>    Ki_ZonneBoiler(PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Ki_ZonneBoiler')+')';
			attribute<EUR>    Ki_Zon_PV     (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Ki_Zon_PV')+')';
			attribute<EUR>    Ki_mWKK       (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Ki_mWKK'  )+')';
			attribute<EUR>    Ki_eWP        (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Ki_eWP'   )+')';
			attribute<EUR>    Ki_hWP        (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Ki_hWP'   )+')';
			attribute<EUR>    Ki_EWV        (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Ki_EWV'   )+')';
			attribute<EUR>    Ki_Totaal30   (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Ki_Totaal30')+')';
			attribute<EUR>    Ki_Totaal15   (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Ki_Totaal15')+')';
			attribute<EUR>    Ki_Totaal     (PlanRegio) := Ki_Totaal30+Ki_Totaal15;
			attribute<EUR_YR> Kj_Onderhoud  (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Kj_Onderh_excl')+')';
			attribute<EUR_YR> Kj_Admin      (PlanRegio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/LokaleEnergieProductie/Kj_admin_excl')+')';
			attribute<EUR_YR> Km_Totaal     (PlanRegio) := Ki_Totaal30 * NCW/mr30/AnnualisationFactor + Ki_Totaal15 * NCW/mr15/AnnualisationFactor + Kj_Onderhoud + Kj_Admin;
		}
		container CentraleWarmteBronnen := for_each_nedv(Voorkeuren/WarmteOpties/Name, CaseData/BronExpr[Voorkeuren/WarmteOpties/AanbodOptie], PlanRegio, EUR_Yr)  // overrule the following defaults
		{
			attribute<EUR_Yr> RestWarmte(PlanRegio) := const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> GeoThermie(PlanRegio) := const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> WijkWKK   (PlanRegio) := const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> BioWKK    (PlanRegio) := const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> WKO       (PlanRegio) := const(0[EUR_Yr], PlanRegio);
			
			attribute<EUR_Yr> Km_Totaal (PlanRegio) := =iif(#Voorkeuren/WarmteOpties == 0, 'const(0, PlanRegio, EUR_Yr)', 'add('+AsItemList(Voorkeuren/WarmteOpties/Name)+')');
		}
		container net {
			attribute<EUR_Yr> Aardgas      (PlanRegio) := netwerk/aardgas/Kj_totaal       - netwerk/aardgas/netbijdrage;
			attribute<EUR_Yr> Elektriciteit(PlanRegio) := netwerk/elektriciteit/Kj_totaal - netwerk/elektriciteit/netbijdrage;
		}
		attribute<EUR_Yr> Om_Comfort(PlanRegio) := =IsDefined(RLookup(Classifications/AanbodOptie/V/WKO, Voorkeuren/WarmteOpties/AanbodOptie)) 
			? 'add('+AsItemList('EndState/WKO/Om_Comfort/'+Classifications/WkoComponent/name)+')'
			: 'CentraleWarmteBronnen/WKO';
		attribute<EUR_Yr> Km_Totaal(PlanRegio) :=net/Aardgas + net/Elektriciteit + 
			gebouwen/Km_Totaal + LokaleEnergieProductie/Km_Totaal + CentraleWarmteBronnen/Km_Totaal - Om_Comfort;
	}
	
	container Eindgebruiker := 
			for_each_ne(Classifications/BebouwingsComponent/name,
				replace(
					'Rapportage/EindgebruikerComponentTempl(
						AllocatieResultaat/@BC@,
						NCW/@NC@15,
						NCW/@NC@30,
						NCW/@NC@50,
						sum(AllocatieResultaat/@BC@/AardGas/Vastrecht,               VestaRunData/@BC@/PlanRegio_rel),
						sum(AllocatieResultaat/@BC@/AardGas/AansluitBijdrage,        VestaRunData/@BC@/PlanRegio_rel), 
						sum(AllocatieResultaat/@BC@/Elektriciteit/Vastrecht,         VestaRunData/@BC@/PlanRegio_rel),
						sum(AllocatieResultaat/@BC@/Elektriciteit/AansluitBijdrage,  VestaRunData/@BC@/PlanRegio_rel),
						EndState/KostenBaten/PlanRegioKaarten/@BC@
					)'
				,	'@BC@', Classifications/BebouwingsComponent/name
				,	'@NC@', Classifications/BebouwingsComponent/NcwRefBase
				)
			)
		,	Source = "FO v7a C6";
	container EnergieProducent
	{
		// *** Investeringen zijn niet over 30 jaar genomen maar over de voor de betreffende aanbodtechnologie geldende gebruiksperiode en tegen het voor de EP geldende rentevoet
		container impl: IsHidden = "True"
		{
			attribute<String> FlowExpr(Classifications/AanbodOptie) := union_data(Classifications/AanbodOptie,
				'(GebiedsAllocatie/RestWarmte/BeginStatus/KostenBaten/Oj_wd - EndState/Flow/Kj_Netto) * Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/RestWarmte)',
				'(GebiedsAllocatie/GeoThermie/BeginStatus/KostenBaten/Oj_wd - EndState/Flow/Kj_Netto) * Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/GeoThermie)',
				'(GebiedsAllocatie/WijkWKK/BeginStatus/KostenBaten/Oj_wd    - EndState/Flow/Kj_Netto) * Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/WijkWKK)',
				'(GebiedsAllocatie/BioWKK/BeginStatus/KostenBaten/Oj_wd     - EndState/Flow/Kj_Netto) * Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/BioWKK)',
				'EndState/WKO/Oj_totaal - EndState/WKO/Kj_Netto'
			);
				
			attribute<String> StockExpr(Classifications/AanbodOptie) := 
				'EndState/Stock/Ki_Totaal* Float64(EndState/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/'+Classifications/AanbodOptie/Name+')';
		}
		container CashFlow := for_each_nedv(Voorkeuren/WarmteOpties/Name
			,	impl/FlowExpr[Voorkeuren/WarmteOpties/AanbodOptie]
			,	PlanRegio, EUR_Yr) // overrule the following defaults
		{
			attribute<EUR_Yr> RestWarmte(PlanRegio):= const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> GeoThermie(PlanRegio):= const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> WijkWKK   (PlanRegio):= const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> WKO       (PlanRegio):= const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> BioWKK    (PlanRegio):= const(0[EUR_Yr], PlanRegio);
			attribute<EUR_Yr> Kj_Totaal (PlanRegio):= RestWarmte + GeoThermie + WijkWKK + WKO + BioWKK;
		}
		attribute<EUR_Yr> Kj_Totaal(PlanRegio):= CashFlow/Kj_Totaal;
		
		container Stock := for_each_nedv(Voorkeuren/WarmteOpties/Name
			,	impl/StockExpr[Voorkeuren/WarmteOpties/AanbodOptie]
			,	PlanRegio, EUR) // overrule the following defaults
		{
			attribute<EUR> RestWarmte(PlanRegio):= const(0[EUR], PlanRegio);
			attribute<EUR> GeoThermie(PlanRegio):= const(0[EUR], PlanRegio);
			attribute<EUR> WijkWKK   (PlanRegio):= const(0[EUR], PlanRegio);
			attribute<EUR> WKO       (PlanRegio):= const(0[EUR], PlanRegio);
			attribute<EUR> BioWKK    (PlanRegio):= const(0[EUR], PlanRegio);
			attribute<EUR> Ki_Totaal (PlanRegio):= RestWarmte + GeoThermie + WijkWKK + WKO + BioWKK;
		}
		attribute<EUR> Ki_Totaal (PlanRegio):= Stock/Ki_Totaal; // totale investeringen zonder aftrek van de te ontvangen aansluitbijdrage.
	}
	container netwerk {
		attribute<nrWoningen> nrWoonUnits  (Planregio)  := ='add('+AsItemList(replace('sum(VestaRunData/@BC@/bebouwing/nrWoonUnits, VestaRunData/@BC@/PlanRegio_rel)', '@BC@',Classifications/BebouwingsComponent/name) )+')';
		attribute<nrWoningen> nrAllElectric(Planregio)  := ='add('+AsItemList(replace('sum(VestaRunData/@BC@/bebouwing/nrWoonUnits * AllocatieResultaat/@BC@/Aandelen/AllElectric, VestaRunData/@BC@/PlanRegio_rel)', '@BC@',Classifications/BebouwingsComponent/name) )+')';
		attribute<float64> R_all_electric (Planregio) := makedefined(nrAllElectric / nrWoonUnits, 0.0);
		attribute<bool >   all_electric   (Planregio) := R_all_electric > 0.999, // tolereer afronding fouten en kleine afwijkingen
			IntegrityCheck = "!(heeft_gas && all_electric)";
			
		container aardgas {
			attribute<bool>   had_gas    (Planregio) := J2010/indicatoren/heeft_gas; // false voor bestaande restwarmte
			attribute<bool>   verwijderd (Planregio) := had_gas && !heeft_gas; // alleen true als hele planregio gasloos is geworden
			
			// inkomsten
			attribute<EUR_yr> netbijdrage(Planregio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/name+'/gebouwen/Aardgas/netwerk'  )+')';
			attribute<EUR_Yr> vastrecht  (Planregio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/gebouwen/AardGas/Vastrecht')+')';
			attribute<EUR_Yr> Aansl_m    (Planregio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/gebouwen/AardGas/Aansl_m'  )+')';
			attribute<EUR_Yr> Oj_totaal  (Planregio) := netbijdrage + vastrecht;
			
			// kosten
			attribute<m>  L_infra_nu      (PlanRegio) := Float64(heeft_gas ) * EndState/KostenBaten/KostenD/L_infra_g;
			attribute<m>  L_infra_org     (PlanRegio) := J2010/indicatoren/netwerk/aardgas/L_infra_nu;
			attribute<m>  L_infra         (PlanRegio) := max_elem(L_infra_nu, L_infra_org);
			
			attribute<EUR_Yr> kapitaallasten  (Planregio) := L_infra    * InfraParameters/KK_infra_g;
			attribute<EUR_Yr> onderhoud       (Planregio) := L_infra_nu * InfraParameters/KO_infra_g;
			attribute<EUR_Yr> verwijderkosten (Planregio) := Float64(verwijderd) * L_infra_org * InfraParameters/KK_infra_g * (InfraParameters/VB_g + 1.0);
			attribute<EUR_Yr> Kj_totaal       (Planregio) := kapitaallasten + verwijderkosten + onderhoud;
			attribute<EUR_Yr> Kj_netto        (Planregio) := Kj_totaal - Oj_totaal - Aansl_m;
		}
		container elektriciteit {
			// inkomsten
			attribute<EUR_yr> netbijdrage(Planregio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/name+'/gebouwen/Elektriciteit/netwerk'  )+')';
			attribute<EUR_Yr> vastrecht  (Planregio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/gebouwen/Elektriciteit/Vastrecht')+')';
			attribute<EUR_Yr> Aansl_m    (Planregio) := ='add('+AsItemList('Eindgebruiker/'+Classifications/BebouwingsComponent/Name+'/gebouwen/Elektriciteit/Aansl_m'  )+')';
			attribute<EUR_Yr> Oj_totaal  (Planregio) := netbijdrage + vastrecht;

			// kosten
			attribute<m>  L_infra             (PlanRegio) := EndState/KostenBaten/KostenD/L_infra_e;
			
			attribute<EUR_Yr> kapitaallasten  (Planregio) := L_infra * InfraParameters/KK_infra_e;
			attribute<EUR_Yr> onderhoud       (Planregio) := L_infra * InfraParameters/KO_infra_e;
			attribute<EUR_Yr> netverzwaring   (Planregio) := kapitaallasten * R_all_electric;
			attribute<EUR_Yr> Kj_totaal       (Planregio) := kapitaallasten + netverzwaring + onderhoud;
			attribute<EUR_Yr> Kj_netto        (Planregio) := Kj_totaal - Oj_totaal - Aansl_m;
		}
	}

	container MaatregelenRapportage
	{
		unit<uint32> RapportageRegio := UserInput/ReportOpties/RapportageRegio;
		container Woning :=
			for_each_ne(
				 RapportageRegio/Name
				, 'Rapportage/RegionaleRapportageTempl(
					  RapportageRegio, '+string(id(RapportageRegio))+'[RapportageRegio]
					, AllocatieResultaat/Woning, '+quote('woning')+'
					, '+Classifications/BestaandeWoningRapGroep/ClassRef[UserInput/ReportOpties/BestaandeWoningRapGroep]+'
					, '+quote('BebouwingsObject/'+Classifications/BestaandeWoningRapGroep/AttrRef [ UserInput/ReportOpties/BestaandeWoningRapGroep ])+'
					, Classifications/BestaandeWoningRapGroep/ExportLabel [ UserInput/ReportOpties/BestaandeWoningRapGroep ]
					, units/nrWoningen
				)'
			);
		container UitlegWoning :=
			for_each_ne(
				 RapportageRegio/Name
				, 'Rapportage/RegionaleRapportageTempl(
					  RapportageRegio, '+string(id(RapportageRegio))+'[RapportageRegio]
					, AllocatieResultaat/UitlegWoning, '+quote('UitlegWoning')+'
					, VestaRunData/UitlegWoning/KengetalTypeDomein
					, '+quote('RuimtelijkeVraagComponent/KengetalType')+'
					, '+quote('WoningType')+'
					, units/nrWoningen
				)'
			);
		container Utiliteit :=
			for_each_ne(
				 RapportageRegio/Name
				, 'Rapportage/RegionaleRapportageTempl(
					  RapportageRegio, '+string(id(RapportageRegio))+'[RapportageRegio]
					, AllocatieResultaat/utiliteit, '+quote('utiliteit')+'
					, VestaRunData/utiliteit/KengetalTypeDomein
					, '+quote('RuimtelijkeVraagComponent/KengetalType')+'
					, '+quote('UtiliteitsType')+'
					, units/m2
				)'
			);
		container UitlegUtil:=
			for_each_ne(
				 UserInput/ReportOpties/RapportageRegio/Name
				, 'Rapportage/RegionaleRapportageTempl(
					  RapportageRegio, '+string(id(RapportageRegio))+'[RapportageRegio]
					, AllocatieResultaat/UitlegUtil, '+quote('UitlegUtil')+'
					, VestaRunData/UitlegUtil/KengetalTypeDomein
					, '+quote('RuimtelijkeVraagComponent/KengetalType')+'
					, '+quote('UtiliteitsType')+'
					, units/m2
				)'
			);
		container GlasTuinBouw :=
			for_each_ne(
				 UserInput/ReportOpties/RapportageRegio/Name
				, 'Rapportage/RegionaleRapportageTempl(
					  RapportageRegio, '+string(id(RapportageRegio))+'[RapportageRegio]
					, AllocatieResultaat/Glastuinbouw, '+quote('Glastuinbouw')+'
					, Classifications/GLTB
					, '+quote('RuimtelijkeVraagComponent/KengetalType')+'
					, '+quote('GlasTuinBouwType')+'
					, units/m2
				)'
			);
		container UitlegGlTb:=
			for_each_ne(
				 UserInput/ReportOpties/RapportageRegio/Name
				, 'Rapportage/RegionaleRapportageTempl(
					  RapportageRegio, '+string(id(RapportageRegio))+'[RapportageRegio]
					, AllocatieResultaat/UitlegGlTb, '+quote('UitlegGlTb')+'
					, Classifications/GlTb
					, '+quote('RuimtelijkeVraagComponent/KengetalType')+'
					, '+quote('UitlegGlTb')+'
					, units/m2
				)'
			);
	}
//	#include <InputOutput.dms>
	
	container InputOutput := 
		for_each_ne(
			 UserInput/ReportOpties/RapportageRegio/Name
		,	'Rapportage/FlowTempl('
				'UserInput/ReportOpties/RapportageRegio'
				','+Quote(UserInput/ReportOpties/RapportageRegio/Name)+
				', value('+ string(id(UserInput/ReportOpties/RapportageRegio)) + ',UserInput/ReportOpties/RapportageRegio)'
			')'
		)
	{
		container Totaal := =(UserInput/ReportOpties/RapportageRegio/Name != 'NL')
			? 'Rapportage/FlowTempl(geography/RegioIndelingen/NL, ''NL'', value(0, geography/RegioIndelingen/NL) )'
			: '.';
	}

	parameter<String> GenerateAll := 'Ready',
		ExplicitSuppliers =
			"= ';' + AsList('InputOutput/'+UserInput/ReportOpties/RapportageRegio/Name+'/GenerateAll',';')"
			"+ (UserInput/ReportOpties/RapportageRegio/Name != 'NL' ? ';InputOutput/Totaal/GenerateAll': '')"
			"+ ';' + AsList('MaatregelenRapportage/Woning/'      +UserInput/ReportOpties/RapportageRegio/Name+'/GenerateAll',';')"
			"+ ';' + AsList('MaatregelenRapportage/Utiliteit/'   +UserInput/ReportOpties/RapportageRegio/Name+'/GenerateAll',';')"
			"+ ';' + AsList('MaatregelenRapportage/UitlegWoning/'+UserInput/ReportOpties/RapportageRegio/Name+'/GenerateAll',';')"
			"+ ';' + AsList('MaatregelenRapportage/UitlegUtil/'  +UserInput/ReportOpties/RapportageRegio/Name+'/GenerateAll',';')"
			"+ ';' + AsList('MaatregelenRapportage/GlasTuinBouw/'+UserInput/ReportOpties/RapportageRegio/Name+'/GenerateAll',';')"
			"+ ';' + AsList('MaatregelenRapportage/UitlegGlTb/'  +UserInput/ReportOpties/RapportageRegio/Name+'/GenerateAll',';')"
//			"+ ';' + 'AllocExports/GenerateThisToo'" // comment-out if you want to skip all exports
		;
}
