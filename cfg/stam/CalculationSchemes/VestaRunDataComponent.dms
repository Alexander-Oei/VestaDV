//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2011                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                               FEBRUARI 2010                                          //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template VestaRunDataComponent
{
	container         ExtraBebouwing;
	parameter<String> Tag;
	parameter<Bool>   IsUitleg;
	parameter<Bool>   HasFactors;
	container              ResterendFactorMaps;
	container              EnergieVraagModellen;
	container              DragerSpecifiekeOpties;
	container              LocatieSpecifiekeOpties;
	attribute<Units/Ratio> KlimaatFactorMap  (Geography/rdc_100lu);
		
	container Kengetallen;
	container StartingStateComponent;
	unit<uint8> PrijzenAardgas;
	unit<uint8> PrijzenElektriciteit;
	
	parameter<string> NcwRefBase;
	parameter<Ratio> BTW_Factor;
	parameter<Ratio> BTW_Factor_gv;
	
	// end of case parameters
	
	container NcwRefs {
		container _15 := ='NCW/'+NcwRefBase+'15';
		container _30 := ='NCW/'+NcwRefBase+'30';
		container _50 := ='NCW/'+NcwRefBase+'50';
		container _28 := ='NCW/'+NcwRefBase+'28';
	}
	
	container Bebouwing := =IsUitleg ? 'CalculationSchemes/BebouwingsOperaties/union(StartingStateComponent, ExtraBebouwing)' : 'ExtraBebouwing'
	{
		attribute<Geography/RegioIndelingen/buurt> buurt_rel(BebouwingsObject) := point_in_polygon(point, Geography/RegioIndelingen/buurt/poly), FreeData = "False";
	}
	unit<uint32>  BebouwingsObject:   Expr = "Bebouwing/BebouwingsObject";
	
	unit<uint32>  PrevObject:         Expr = "StartingStateComponent/BebouwingsObject";
	unit<uint8>   KengetalTypeDomein: Expr = "Bebouwing/KengetalTypeDomein"
	{
		attribute<string> ResterendFactorName := = HasFactors ? 'Bebouwing/KengetalTypeDomein/ResterendFactorName' : 'name'; // fix missing names
	}
	unit<UInt32>  ModelObject:= EnergieVraagModellen/ModelObject;
	unit<Float64> ModelUnit  := EnergieVraagModellen/ModelUnit;
	unit<UInt32>  PlanRegio  := RunImpl/PlanRegio;
	unit<uint32>  WkoCluster := StartingState/AanbodOpties/WkoCluster;
	
	
	attribute<ModelObject> Model_rel  (BebouwingsObject) := rlookup(Bebouwing/SubType, EnergieVraagModellen/SubType);
	attribute<PlanRegio> PlanRegio_rel(BebouwingsObject) := ='Bebouwing/'+UserInput/PlanRegioNaam+'_rel';
	
	attribute<PrevObject> StartingState_rel(BebouwingsObject) := rlookup(BebouwingsObject/code, PrevObject/code);
	
	attribute<Classifications/AanbodOptie> WarmteAllocatie(BebouwingsObject) := StartingStateComponent/WarmteAllocatie[StartingState_rel];
	attribute<EUR_Yr>                      KoudeAllocatie (BebouwingsObject) := MakeDefined(StartingStateComponent/KoudeAllocatie[StartingState_rel], 0[EUR_Yr]);
	attribute<EUR_Yr>                      Om_Comfort     (BebouwingsObject) := MakeDefined(StartingStateComponent/Om_Comfort[StartingState_rel], 0[EUR_Yr]);
	attribute<WkoCluster>                  WkoCluster_rel (BebouwingsObject) := StartingStateComponent/WkoCluster_rel[StartingState_rel];
	
	container RuimtelijkeVraagComponent
	{
		// inherited attributen
		attribute<KengetalTypeDomein>            KengetalType   (BebouwingsObject) := Bebouwing/KengetalType;
		attribute<Classifications/BouwJaar>      BouwJaar       (BebouwingsObject) := Bebouwing/BouwJaar;
		attribute<Geography/rdc_meter>           Point          (BebouwingsObject) := Bebouwing/point;
		attribute<Geography/rdc_100lu>           GridCellID     (BebouwingsObject) := point[Geography/rdc_100lu];
		
		attribute<Ratio> ResterendFactorBase(BebouwingsObject) := =HasFactors 
			? 'MakeDefined(merge(KengetalType, Ratio, '+AsItemList('ResterendFactorMaps/'+KengetalTypeDomein/ResterendFactorName+'[GridCellID]')+'), 1.0)'
			: 'const(1.0, BebouwingsObject)';
		attribute<Ratio> ResterendFactor(BebouwingsObject) := ResterendFactorBase * Float64(IsDefined(PlanRegio_rel));
		
		attribute<nrAansl>    nrAansluitingen(BebouwingsObject) := ResterendFactor * Bebouwing/nrAansluitingen;
		attribute<nrWoningen> nrWoonunits    (BebouwingsObject) := ResterendFactor * Bebouwing/nrWoonUnits;
		attribute<ModelUnit>  nrModelUnits   (BebouwingsObject) := ResterendFactor * Bebouwing/NrJoinedUnits * EnergieVraagModellen/nrMUperJU[ Model_rel ];
		
		container AansluitCapaciteit
		{
			attribute<kW> Warmte(BebouwingsObject) := NrModelUnits * EnergieVraagModellen/AansluitCapaciteit/Warmte[Model_rel];
		}
		attribute<Float64>  AandeelWarmteVraag(BebouwingsObject) := Bebouwing/AandeelWarmteVraag;
		
		// Extra attributen
		
		attribute<Units/Ratio>          KlimaatFactor(BebouwingsObject) := KlimaatFactorMap[GridCellID];

		// impl
		container Functioneel
		{
			attribute<GJ_Yr> WarmWater            (BebouwingsObject) := nrModelUnits * EnergieVraagModellen/functioneel/WarmWater            [Model_rel] * DragerSpecifiekeOpties/WarmWater;
			attribute<GJ_Yr> Koude                (BebouwingsObject) := nrModelUnits * EnergieVraagModellen/functioneel/Koude                [Model_rel] * DragerSpecifiekeOpties/Koude;
			attribute<GJ_Yr> ElektrischeApparatuur(BebouwingsObject) := nrModelUnits * EnergieVraagModellen/functioneel/ElektrischeApparatuur[Model_rel] * DragerSpecifiekeOpties/ElektrischeApparatuur;
			attribute<GJ_Yr> RuimteVerwarming     (BebouwingsObject) := nrModelUnits * EnergieVraagModellen/functioneel/RuimteVerwarming     [Model_rel] * DragerSpecifiekeOpties/RuimteVerwarming * KlimaatFactor;
			attribute<GJ_Yr> PompEnergie_min      (BebouwingsObject) := nrModelUnits * EnergieVraagModellen/functioneel/Pompenergie_min      [Model_rel] * DragerSpecifiekeOpties/RuimteVerwarming;
			attribute<GJ_Yr> PompEnergie_max      (BebouwingsObject) := nrModelUnits * EnergieVraagModellen/functioneel/Pompenergie_max      [Model_rel] * DragerSpecifiekeOpties/RuimteVerwarming;
		}
	}

	container EnergieLabel
	{
 		attribute<Classifications/EnergieLabel> LastValue (BebouwingsObject): Expr = "MakeDefined(StartingStateComponent/EnergieLabel/CurrValue[StartingState_rel], EnergieVraagModellen/Efficiency/EnergieLabel[ Model_rel])";
 		attribute<Classifications/EnergieLabel> CurrValue (BebouwingsObject): Expr = "Sprongen/NaarEnergieLabel";
 		attribute<Bool>                         WasChanged(BebouwingsObject): Expr = "StartingStateComponent/EnergieLabel/IsChanged[StartingState_rel]";
 		attribute<Bool>                         IsChangedNow(BebouwingsObject): Expr = "LastValue != CurrValue";
 		attribute<Bool>                         IsChanged (BebouwingsObject): Expr = "WasChanged || IsChangedNow";
	}

	container Criteria : Expr = "Bebouwing/Criteria" // inherit, TODO: opruimen na aanpassing runs
	{
		attribute<Bool> Always(BebouwingsObject): Expr = "const(true,  BebouwingsObject)";
		attribute<Bool> Never (BebouwingsObject): Expr = "const(false, BebouwingsObject)";
	}

	unit<Float64> EUR_ModelUnit  := EUR / ModelUnit;
	
	parameter<GJ_Yr> geen_verbruik: [ 0.0 ];
	
	attribute<KengetalTypeDomein>   KengetalType(BebouwingsObject): Expr = "RuimtelijkeVraagComponent/KengetalType";
	
	container EIA_Opties := ='UserInput/BeleidsOpties/EIA/'+NcwRefBase + 'e';
	container EEA_Opties := UserInput/BeleidsOpties/EEA/Kosten/Base;
	
	container OpwekkingsOpties
	{
		container bereidheid
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject):= const(LocatieSpecifiekeOpties/OpwekkingF/Zon_PV,      BebouwingsObject);
			attribute<Ratio> ZonneBoiler(BebouwingsObject):= const(LocatieSpecifiekeOpties/OpwekkingF/ZonneBoiler, BebouwingsObject);
			attribute<Ratio> mWKK       (BebouwingsObject):= const(LocatieSpecifiekeOpties/OpwekkingF/mWKK,        BebouwingsObject);
			attribute<Ratio> hWP        (BebouwingsObject):= MakeDefined(LocatieSpecifiekeOpties/OpwekkingF/hWP[energielabel/LastValue], 0.0);
		}
		container org_capaciteit 
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject):= MakeDefined(StartingStateComponent/OpwekkingsOpties/capaciteit/Zon_PV     [StartingState_rel], 0[Ratio]);
			attribute<Ratio> ZonneBoiler(BebouwingsObject):= MakeDefined(StartingStateComponent/OpwekkingsOpties/capaciteit/ZonneBoiler[StartingState_rel], 0[Ratio]);
			attribute<Ratio> mWKK       (BebouwingsObject):= MakeDefined(StartingStateComponent/OpwekkingsOpties/capaciteit/mWKK       [StartingState_rel], 0[Ratio]);
			attribute<Ratio> hWP        (BebouwingsObject):= MakeDefined(StartingStateComponent/OpwekkingsOpties/capaciteit/hWP        [StartingState_rel], 0[Ratio]);
		}
	
		container investering
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject):= median(0.0, bereidheid/Zon_PV      - org_capaciteit/Zon_PV,      1.0[Ratio] - org_capaciteit/Zon_PV);
			attribute<Ratio> ZonneBoiler(BebouwingsObject):= median(0.0, bereidheid/ZonneBoiler - org_capaciteit/ZonneBoiler, 1.0[Ratio] - org_capaciteit/ZonneBoiler);
			attribute<Ratio> mWKK       (BebouwingsObject):= median(0.0, bereidheid/mWKK        - org_capaciteit/mWKK,        1.0[Ratio] - org_capaciteit/mWKK);
			attribute<Ratio> hWP        (BebouwingsObject):= median(0.0, bereidheid/hWP         - org_capaciteit/hWP,         1.0[Ratio] - org_capaciteit/hWP);
		}
		container capaciteit 
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject):= org_capaciteit/Zon_PV      + investering/Zon_PV;
			attribute<Ratio> ZonneBoiler(BebouwingsObject):= org_capaciteit/ZonneBoiler + investering/ZonneBoiler;
			attribute<Ratio> mWKK       (BebouwingsObject):= org_capaciteit/mWKK        + investering/mWKK;
			attribute<Ratio> hWP        (BebouwingsObject):= org_capaciteit/hWP         + investering/hWP;
		}
	}
	
	container Hoeveelheden
	{
		attribute<m2> ZonneBoiler(BebouwingsObject) := RuimtelijkeVraagComponent/nrModelUnits * OpwekkingsOpties/capaciteit/ZonneBoiler * Kengetallen/ZonneBoiler/Oppervlak[ KengetalType ];
		attribute<m2> Zon_PV     (BebouwingsObject) := RuimtelijkeVraagComponent/nrModelUnits * OpwekkingsOpties/capaciteit/Zon_PV      * Kengetallen/Zon_PV/Oppervlak     [ KengetalType ];
		attribute<nrAansl> mWKK  (BebouwingsObject) := RuimtelijkeVraagComponent/nrAansluitingen * Opwekking/mWKK;
		attribute<nrAansl> hWP   (BebouwingsObject) := RuimtelijkeVraagComponent/nrAansluitingen * Opwekking/hWP;
	}
	
	container Functioneel
	{
		attribute<GJ_Yr> RuimteVerwarming(BebouwingsObject) := RuimtelijkeVraagComponent/Functioneel/RuimteVerwarming;
		attribute<GJ_Yr> Koude           (BebouwingsObject) := RuimtelijkeVraagComponent/Functioneel/Koude;
		attribute<GJ_Yr> WarmWater       (BebouwingsObject) := RuimtelijkeVraagComponent/Functioneel/WarmWater;
		attribute<GJ_Yr> Apparatuur      (BebouwingsObject) := RuimtelijkeVraagComponent/Functioneel/ElektrischeApparatuur;
		attribute<GJ_Yr> PompEnergie     (BebouwingsObject) := Schuiven/OpbrMin * RuimtelijkeVraagComponent/Functioneel/PompEnergie_min + Schuiven/OpbrMax * RuimtelijkeVraagComponent/Functioneel/PompEnergie_max;  // niet afhankelijk van gebouwisolatie ?
	}
	
	container Sprongen
	{
		container RuimteVerwarming
		{
			attribute<Vesta/Units/Jaar> Jaar(BebouwingsObject) := const(LocatieSpecifiekeOpties/Verbeteringen/RuimteVerwarmingsJaar, BebouwingsObject);
			attribute<Ratio> Efficiency(BebouwingsObject) := EnergieVraagModellen/Verbeteringen/RuimteVerwarming/Efficiency[ Model_rel];
			attribute<Bool> KanVerbeteren(BebouwingsObject) := Jaar <= RunJaar && Efficiency > EnergieVraagModellen/Efficiency/RuimteVerwarming/AardGas[ Model_rel ];
		}
		
		container Toegestaan: Expr = "for_each_nedv(Classifications/LabelSprong/code, '=LocatieSpecifiekeOpties/Verbeteringen/'+Classifications/LabelSprong/code, BebouwingsObject, bool)";
		container Toepasbaar: Expr = "for_each_nedv(Classifications/LabelSprong/code, 'Toegestaan/'+Classifications/LabelSprong/code+' && '+(Classifications/LabelSprong/NaWijziging ? '' : '!')+'EnergieLabel/WasChanged' , BebouwingsObject, bool)";
		
		container VermedenGas
		{
			attribute<units/GJ_Yr> RV_H (BebouwingsObject) := (Functioneel/RuimteVerwarming / Efficiency/RuimteVerwarming/Aardgas) * DragerOpties/RuimteVerwarming/Aardgas_leidingverliesfactor;
			attribute<units/GJ_Yr> RV   (BebouwingsObject) := RV_H / Efficiency/gebouw/LaatsteWaarde;
			attribute<units/GJ_Yr> RV_AP(BebouwingsObject) := RV_H / EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency[ Model_rel];
			
			attribute<units/GJ_Yr> WW   (BebouwingsObject) := (Functioneel/WarmWater / Efficiency/WarmWater/Aardgas) * DragerOpties/WarmWater/Aardgas_leidingverliesfactor;
			
			attribute<units/GJ_Yr> S_H_T (BebouwingsObject) := RV_H * (1.0 - 1.0 / EnergieVraagModellen/Verbeteringen/S_H_T/efficiency )[ Model_rel];
			attribute<units/GJ_Yr> S_H_B (BebouwingsObject) := RV_H * (1.0 - 1.0 / EnergieVraagModellen/Verbeteringen/S_H_B/efficiency )[ Model_rel];
			attribute<units/GJ_Yr> S_H_AP(BebouwingsObject) := RV_H * (1.0 - 1.0 / EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency)[ Model_rel];
			attribute<units/GJ_Yr> S_T_B (BebouwingsObject) := S_H_B  - S_H_T;
			attribute<units/GJ_Yr> S_T_AP(BebouwingsObject) := S_H_AP - S_H_T;
			attribute<units/GJ_Yr> S_B_AP(BebouwingsObject) := S_H_AP - S_H_B;
		}
		container ComfortVerbetering
		{
			attribute<units/GJ_Yr> S_H_T (BebouwingsObject) := VermedenGas/S_H_T * EnergieVraagModellen/Verbeteringen/S_H_T/ComfortFactor_stap [ Model_rel];
			attribute<units/GJ_Yr> S_H_B (BebouwingsObject) := VermedenGas/S_H_B * EnergieVraagModellen/Verbeteringen/S_H_B/ComfortFactor_stap [ Model_rel];
			attribute<units/GJ_Yr> S_H_AP(BebouwingsObject) := VermedenGas/S_H_AP* EnergieVraagModellen/Verbeteringen/S_H_AP/ComfortFactor_stap[ Model_rel];
			attribute<units/GJ_Yr> S_T_B (BebouwingsObject) := VermedenGas/S_T_B * EnergieVraagModellen/Verbeteringen/S_T_B/ComfortFactor_stap [ Model_rel];
			attribute<units/GJ_Yr> S_T_AP(BebouwingsObject) := VermedenGas/S_T_AP* EnergieVraagModellen/Verbeteringen/S_T_AP/ComfortFactor_stap[ Model_rel];
			attribute<units/GJ_Yr> S_B_AP(BebouwingsObject) := VermedenGas/S_B_AP *EnergieVraagModellen/Verbeteringen/S_B_AP/ComfortFactor_stap[ Model_rel];
		}
		container VermedenKosten_eg_ex
		{
			attribute<EUR_GJ> AardgasPrijs      (BebouwingsObject) := PrijzenAardgas/KGJ_eindgebruik_ex[classify(VermedenGas/RV + VermedenGas/WW, PrijzenAardgas/ClassBreak)];
			attribute<EUR_GJ> ElektriciteitPrijs(BebouwingsObject) := PrijzenElektriciteit/KGJ_eindgebruik_ex[classify(Functioneel/Apparatuur+Functioneel/PompEnergie, PrijzenElektriciteit/ClassBreak)];
			
			attribute<EUR_Yr> S_H_T (BebouwingsObject) :=  VermedenGas/S_H_T  * AardgasPrijs;
			attribute<EUR_Yr> S_H_B (BebouwingsObject) :=  VermedenGas/S_H_B  * AardgasPrijs;
			attribute<EUR_Yr> S_H_AP(BebouwingsObject) :=  VermedenGas/S_H_AP * AardgasPrijs;
			attribute<EUR_Yr> S_T_B (BebouwingsObject) :=  VermedenGas/S_T_B  * AardgasPrijs;
			attribute<EUR_Yr> S_T_AP(BebouwingsObject) :=  VermedenGas/S_T_AP * AardgasPrijs;
			attribute<EUR_Yr> S_B_AP(BebouwingsObject) :=  VermedenGas/S_B_AP * AardgasPrijs;
			
			attribute<EUR_Yr> K_Pomp    (BebouwingsObject) := Functioneel/PompEnergie * ElektriciteitPrijs;
			attribute<EUR_Yr> GeenGas_H (BebouwingsObject) := (VermedenGas/RV_H + VermedenGas/WW)* AardgasPrijs + opbrengsten/VastRechtBijdrage + K_Pomp;
			
			// n.b.: besparing op WarmWater wordt hier buiten beschouwing gelaten maar telt later wel mee in de kosten/baten berekening. 
			// Wellicht is eWP zelfs wat duurder voor WarmWater dan gas. Dit kan nadelig zijn voor de gebruiker.
			
			attribute<EUR_Yr> KostenBasis_eWP (BebouwingsObject) := ElektriciteitPrijs * 
				(Functioneel/RuimteVerwarming / EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency[ Model_rel] / Efficiency/RuimteVerwarming/eWP 
				+ Functioneel/WarmWater / Efficiency/WarmWater/eWP);
			
			attribute<EUR_Yr> S_H_eWP (BebouwingsObject) := GeenGas_H         - KostenBasis_eWP;
			attribute<EUR_Yr> S_T_eWP (BebouwingsObject) := GeenGas_H - S_H_T - KostenBasis_eWP;
			attribute<EUR_Yr> S_B_eWP (BebouwingsObject) := GeenGas_H - S_H_B - KostenBasis_eWP;
			attribute<EUR_Yr> S_AP_eWP(BebouwingsObject) := GeenGas_H - S_H_AP- KostenBasis_eWP;
			
			attribute<EUR_Yr> KostenBasis_EWV(BebouwingsObject) := (VermedenGas/RV_AP / Efficiency/RuimteVerwarming/EWV + Functioneel/WarmWater / Efficiency/WarmWater/EWV) * ElektriciteitPrijs;
			
			attribute<EUR_Yr> S_H_EWV (BebouwingsObject) := GeenGas_H         - KostenBasis_EWV;
			attribute<EUR_Yr> S_T_EWV (BebouwingsObject) := GeenGas_H - S_H_T - KostenBasis_EWV;
			attribute<EUR_Yr> S_B_EWV (BebouwingsObject) := GeenGas_H - S_H_B - KostenBasis_EWV;
			attribute<EUR_Yr> S_AP_EWV(BebouwingsObject) := GeenGas_H - S_H_AP- KostenBasis_EWV;
		}
		container ComfortVerbetering_eg_ex
		{
			
			attribute<EUR_Yr> S_H_T (BebouwingsObject) :=  ComfortVerbetering/S_H_T  * VermedenKosten_eg_ex/AardgasPrijs;
			attribute<EUR_Yr> S_H_B (BebouwingsObject) :=  ComfortVerbetering/S_H_B  * VermedenKosten_eg_ex/AardgasPrijs;
			attribute<EUR_Yr> S_H_AP(BebouwingsObject) :=  ComfortVerbetering/S_H_AP * VermedenKosten_eg_ex/AardgasPrijs;
			attribute<EUR_Yr> S_T_B (BebouwingsObject) :=  ComfortVerbetering/S_T_B  * VermedenKosten_eg_ex/AardgasPrijs;
			attribute<EUR_Yr> S_T_AP(BebouwingsObject) :=  ComfortVerbetering/S_T_AP * VermedenKosten_eg_ex/AardgasPrijs;
			attribute<EUR_Yr> S_B_AP(BebouwingsObject) :=  ComfortVerbetering/S_B_AP * VermedenKosten_eg_ex/AardgasPrijs;
			
			attribute<EUR_Yr> S_AP_eWP(BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_H_eWP (BebouwingsObject):= S_H_AP + S_AP_eWP;
			attribute<EUR_Yr> S_T_eWP (BebouwingsObject):= S_T_AP  + S_AP_eWP;
			attribute<EUR_Yr> S_B_eWP (BebouwingsObject):= S_B_AP  + S_AP_eWP;
			
			attribute<EUR_Yr> S_AP_EWV(BebouwingsObject):= S_AP_eWP;
			attribute<EUR_Yr> S_H_EWV (BebouwingsObject):= S_H_AP + S_AP_EWV;
			attribute<EUR_Yr> S_T_EWV (BebouwingsObject):= S_T_AP + S_AP_EWV;
			attribute<EUR_Yr> S_B_EWV (BebouwingsObject):= S_B_AP + S_AP_EWV;
		}
		container VermedenKosten_m
		{
			attribute<EUR_GJ> AardgasPrijs       (BebouwingsObject):= PrijzenAardgas/KGJ_maatschappelijk      [classify(VermedenGas/RV + VermedenGas/WW, PrijzenAardgas/ClassBreak)];
			attribute<EUR_GJ> ElektriciteitPrijs (BebouwingsObject):= PrijzenElektriciteit/KGJ_maatschappelijk[classify(Functioneel/Apparatuur+Functioneel/PompEnergie, PrijzenElektriciteit/ClassBreak)];
			
			attribute<EUR_Yr> S_H_T (BebouwingsObject) :=  VermedenGas/S_H_T  * AardgasPrijs;
			attribute<EUR_Yr> S_H_B (BebouwingsObject) :=  VermedenGas/S_H_B  * AardgasPrijs;
			attribute<EUR_Yr> S_H_AP(BebouwingsObject) :=  VermedenGas/S_H_AP * AardgasPrijs;
			attribute<EUR_Yr> S_T_B (BebouwingsObject) :=  VermedenGas/S_T_B  * AardgasPrijs;
			attribute<EUR_Yr> S_T_AP(BebouwingsObject) :=  VermedenGas/S_T_AP * AardgasPrijs;
			attribute<EUR_Yr> S_B_AP(BebouwingsObject) :=  VermedenGas/S_B_AP * AardgasPrijs;
			
			attribute<EUR_Yr> K_Pomp    (BebouwingsObject) := Functioneel/PompEnergie * ElektriciteitPrijs;
			attribute<EUR_Yr> GeenGas_H (BebouwingsObject) := (VermedenGas/RV_H + VermedenGas/WW) * AardgasPrijs + opbrengsten/VastRechtBijdrage + K_Pomp;
			
			attribute<EUR_Yr> KostenBasis_eWP(BebouwingsObject) := ElektriciteitPrijs *
				(Functioneel/RuimteVerwarming / EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency[ Model_rel] / Efficiency/RuimteVerwarming/eWP 
				+ Functioneel/WarmWater / Efficiency/WarmWater/eWP);
			
			attribute<EUR_Yr> S_H_eWP (BebouwingsObject) := GeenGas_H         - KostenBasis_eWP;
			attribute<EUR_Yr> S_T_eWP (BebouwingsObject) := GeenGas_H - S_H_T - KostenBasis_eWP;
			attribute<EUR_Yr> S_B_eWP (BebouwingsObject) := GeenGas_H - S_H_B - KostenBasis_eWP;
			attribute<EUR_Yr> S_AP_eWP(BebouwingsObject) := GeenGas_H - S_H_AP- KostenBasis_eWP;
			
			attribute<EUR_Yr> KostenBasis_EWV(BebouwingsObject) := (VermedenGas/RV_AP / Efficiency/RuimteVerwarming/EWV + Functioneel/WarmWater / Efficiency/WarmWater/EWV) * ElektriciteitPrijs;
			
			attribute<EUR_Yr> S_H_EWV (BebouwingsObject) := GeenGas_H         - KostenBasis_EWV;
			attribute<EUR_Yr> S_T_EWV (BebouwingsObject) := GeenGas_H - S_H_T - KostenBasis_EWV;
			attribute<EUR_Yr> S_B_EWV (BebouwingsObject) := GeenGas_H - S_H_B - KostenBasis_EWV;
			attribute<EUR_Yr> S_AP_EWV(BebouwingsObject) := GeenGas_H - S_H_AP- KostenBasis_EWV;
		}
		container ComfortVerbetering_m
		{
			attribute<EUR_Yr> S_H_T (BebouwingsObject) :=  ComfortVerbetering/S_H_T  * VermedenKosten_m/AardgasPrijs;
			attribute<EUR_Yr> S_H_B (BebouwingsObject) :=  ComfortVerbetering/S_H_B  * VermedenKosten_m/AardgasPrijs;
			attribute<EUR_Yr> S_H_AP(BebouwingsObject) :=  ComfortVerbetering/S_H_AP * VermedenKosten_m/AardgasPrijs;
			attribute<EUR_Yr> S_T_B (BebouwingsObject) :=  ComfortVerbetering/S_T_B  * VermedenKosten_m/AardgasPrijs;
			attribute<EUR_Yr> S_T_AP(BebouwingsObject) :=  ComfortVerbetering/S_T_AP * VermedenKosten_m/AardgasPrijs;
			attribute<EUR_Yr> S_B_AP(BebouwingsObject) :=  ComfortVerbetering/S_B_AP * VermedenKosten_m/AardgasPrijs;
			
			attribute<EUR_Yr> S_AP_eWP(BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_H_eWP (BebouwingsObject):= S_H_AP + S_AP_eWP;
			attribute<EUR_Yr> S_T_eWP (BebouwingsObject):= S_T_AP  + S_AP_eWP;
			attribute<EUR_Yr> S_B_eWP (BebouwingsObject):= S_B_AP  + S_AP_eWP;
			
			attribute<EUR_Yr> S_AP_EWV(BebouwingsObject):= S_AP_eWP;
			attribute<EUR_Yr> S_H_EWV (BebouwingsObject):= S_H_AP + S_AP_EWV;
			attribute<EUR_Yr> S_T_EWV (BebouwingsObject):= S_T_AP  + S_AP_EWV;
			attribute<EUR_Yr> S_B_EWV (BebouwingsObject):= S_B_AP  + S_AP_EWV;
		}
		container VerbeterKostenMin_nu
		{
			attribute<EUR_ModelUnit> S_H_T (BebouwingsObject) :=  EnergieVraagModellen/Verbeteringen/S_H_T/kosten_min [ Model_rel];
			attribute<EUR_ModelUnit> S_H_B (BebouwingsObject) :=  EnergieVraagModellen/Verbeteringen/S_H_B/kosten_min [ Model_rel];
			attribute<EUR_ModelUnit> S_H_AP(BebouwingsObject) :=  EnergieVraagModellen/Verbeteringen/S_H_AP/kosten_min[ Model_rel];
			attribute<EUR_ModelUnit> S_T_B (BebouwingsObject) :=  EnergieVraagModellen/Verbeteringen/S_T_B/kosten_min [ Model_rel];
			attribute<EUR_ModelUnit> S_T_AP(BebouwingsObject) :=  EnergieVraagModellen/Verbeteringen/S_T_AP/kosten_min[ Model_rel];
			attribute<EUR_ModelUnit> S_B_AP(BebouwingsObject) :=  EnergieVraagModellen/Verbeteringen/S_B_AP/kosten_min[ Model_rel];
			
			attribute<EUR_ModelUnit> LTAS(BebouwingsObject) := EnergieVraagModellen/Verbeteringen/LTAS/kosten_min[ Model_rel];
			attribute<EUR_ModelUnit> eWP (BebouwingsObject) := const(Kengetallen/eWP/InvesteringsKosten_min, BebouwingsObject);
			attribute<EUR_ModelUnit> EWV (BebouwingsObject) := (10[Percent] / 100[Percent]) * 192[EUR_m2] * EnergieVraagModellen/area/min[ Model_rel ];
		}
		container VerbeterKostenMax_nu
		{
			attribute<EUR_ModelUnit> S_H_T (BebouwingsObject) := EnergieVraagModellen/Verbeteringen/S_H_T/kosten_max[ Model_rel ];
			attribute<EUR_ModelUnit> S_H_B (BebouwingsObject) := EnergieVraagModellen/Verbeteringen/S_H_B/kosten_max[ Model_rel ];
			attribute<EUR_ModelUnit> S_H_AP(BebouwingsObject) := EnergieVraagModellen/Verbeteringen/S_H_AP/kosten_max[ Model_rel ];
			attribute<EUR_ModelUnit> S_T_B (BebouwingsObject) := EnergieVraagModellen/Verbeteringen/S_T_B/kosten_max[ Model_rel ];
			attribute<EUR_ModelUnit> S_T_AP(BebouwingsObject) := EnergieVraagModellen/Verbeteringen/S_T_AP/kosten_max[ Model_rel ];
			attribute<EUR_ModelUnit> S_B_AP(BebouwingsObject) := EnergieVraagModellen/Verbeteringen/S_B_AP/kosten_max[ Model_rel ];
			
			// kosten excl Investeringskosten eWP want deze moeten langs een andere leercurve gelegd worden.
			attribute<EUR_ModelUnit> LTAS(BebouwingsObject) := EnergieVraagModellen/Verbeteringen/LTAS/kosten_max[ Model_rel ];
			attribute<EUR_ModelUnit> eWP (BebouwingsObject) := const(Kengetallen/eWP/InvesteringsKosten_max, BebouwingsObject);
			attribute<EUR_ModelUnit> EWV (BebouwingsObject) := (10[Percent] / 100[Percent]) * 352[EUR_m2] *  EnergieVraagModellen/area/max[ Model_rel ];
		}
		container VerbeterKosten_nu
		{
			attribute<EUR_ModelUnit> S_H_T (BebouwingsObject) := VerbeterKostenMax_nu/S_H_T * Schuiven/KostenMax + VerbeterKostenMin_nu/S_H_T * Schuiven/KostenMin;
			attribute<EUR_ModelUnit> S_H_B (BebouwingsObject) := VerbeterKostenMax_nu/S_H_B * Schuiven/KostenMax + VerbeterKostenMin_nu/S_H_B * Schuiven/KostenMin;
			attribute<EUR_ModelUnit> S_H_AP(BebouwingsObject) := VerbeterKostenMax_nu/S_H_AP * Schuiven/KostenMax + VerbeterKostenMin_nu/S_H_AP * Schuiven/KostenMin;
			attribute<EUR_ModelUnit> S_T_B (BebouwingsObject) := VerbeterKostenMax_nu/S_T_B * Schuiven/KostenMax + VerbeterKostenMin_nu/S_T_B * Schuiven/KostenMin;
			attribute<EUR_ModelUnit> S_T_AP(BebouwingsObject) := VerbeterKostenMax_nu/S_T_AP * Schuiven/KostenMax + VerbeterKostenMin_nu/S_T_AP * Schuiven/KostenMin;
			attribute<EUR_ModelUnit> S_B_AP(BebouwingsObject) := VerbeterKostenMax_nu/S_B_AP * Schuiven/KostenMax + VerbeterKostenMin_nu/S_B_AP * Schuiven/KostenMin;
			
			attribute<EUR_ModelUnit> LTAS(BebouwingsObject) := VerbeterKostenMax_nu/LTAS * Schuiven/KostenMax + VerbeterKostenMin_nu/LTAS * Schuiven/KostenMin;
			attribute<EUR_ModelUnit> eWP (BebouwingsObject) := VerbeterKostenMax_nu/eWP  * Schuiven/KostenMax + VerbeterKostenMin_nu/eWP  * Schuiven/KostenMin;
			attribute<EUR_ModelUnit> EWV (BebouwingsObject) := VerbeterKostenMax_nu/EWV  * Schuiven/KostenMax + VerbeterKostenMin_nu/EWV  * Schuiven/KostenMin;
		}
		container VerbeterKosten_i
		{
			attribute<EUR_ModelUnit> S_H_T (BebouwingsObject):= VerbeterKosten_nu/S_H_T  * LeerCurves/CminFactor;
			attribute<EUR_ModelUnit> S_H_B (BebouwingsObject):= VerbeterKosten_nu/S_H_B  * LeerCurves/BplsFactor;
			attribute<EUR_ModelUnit> S_H_AP(BebouwingsObject):= VerbeterKosten_nu/S_H_AP * LeerCurves/VerderFactor;
			attribute<EUR_ModelUnit> S_T_B  (BebouwingsObject):= VerbeterKosten_nu/S_T_B   * LeerCurves/BplsFactor;
			attribute<EUR_ModelUnit> S_T_AP (BebouwingsObject):= VerbeterKosten_nu/S_T_AP  * LeerCurves/VerderFactor;
			attribute<EUR_ModelUnit> S_B_AP (BebouwingsObject):= VerbeterKosten_nu/S_B_AP  * LeerCurves/VerderFactor;
			
			// eWP (S_AP_eWP) is vanaf hier incl LTAS (L); S_AP_eWP en L zijn wel nog langs dezelfde leercurve gelegd.
			attribute<EUR_ModelUnit> LTAS(BebouwingsObject):= VerbeterKosten_nu/LTAS* Opwekking/Leercurves/eWP  / 100[Percent];
			attribute<EUR_ModelUnit> eWP (BebouwingsObject):= VerbeterKosten_nu/eWP * Opwekking/Leercurves/eWP  / 100[Percent];
			attribute<EUR_ModelUnit> EWV (BebouwingsObject):= VerbeterKosten_nu/EWV * Opwekking/Leercurves/EWV  / 100[Percent];
			
			attribute<EUR_ModelUnit> S_AP_eWP(BebouwingsObject):= eWP + LTAS;
			attribute<EUR_ModelUnit> S_H_eWP(BebouwingsObject):= S_H_AP + S_AP_eWP;
			attribute<EUR_ModelUnit> S_T_eWP (BebouwingsObject):= S_T_AP  + S_AP_eWP;
			attribute<EUR_ModelUnit> S_B_eWP (BebouwingsObject):= S_B_AP  + S_AP_eWP;
			
			attribute<EUR_ModelUnit> S_AP_EWV(BebouwingsObject):= EWV;
			attribute<EUR_ModelUnit> S_H_EWV(BebouwingsObject):= S_H_AP + S_AP_EWV;
			attribute<EUR_ModelUnit> S_T_EWV (BebouwingsObject):= S_T_AP  + S_AP_EWV;
			attribute<EUR_ModelUnit> S_B_EWV (BebouwingsObject):= S_B_AP  + S_AP_EWV;
		}
		container GebouwVerbetering_j
		{
			attribute<EUR_Yr> S_H_T (BebouwingsObject):= VerbeterKosten_i/S_H_T  * NcwRefs/_30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_H_B (BebouwingsObject):= VerbeterKosten_i/S_H_B  * NcwRefs/_30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_H_AP(BebouwingsObject):= VerbeterKosten_i/S_H_AP * NcwRefs/_30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_T_B (BebouwingsObject):= VerbeterKosten_i/S_T_B  * NcwRefs/_30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_T_AP(BebouwingsObject):= VerbeterKosten_i/S_T_AP * NcwRefs/_30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_B_AP(BebouwingsObject):= VerbeterKosten_i/S_B_AP * NcwRefs/_30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			
			attribute<EUR_Yr> S_AP_eWP(BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_H_eWP (BebouwingsObject):= S_H_AP;
			attribute<EUR_Yr> S_T_eWP (BebouwingsObject):= S_T_AP;
			attribute<EUR_Yr> S_B_eWP (BebouwingsObject):= S_B_AP;
			
			attribute<EUR_Yr> S_AP_EWV(BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_H_EWV (BebouwingsObject):= S_H_AP;
			attribute<EUR_Yr> S_T_EWV (BebouwingsObject):= S_T_AP;
			attribute<EUR_Yr> S_B_EWV (BebouwingsObject):= S_B_AP;
		}
		container LokaleOpwekking_j
		{
			attribute<EUR_Yr> S_H_T (BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_H_B (BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_H_AP(BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_T_B (BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_T_AP(BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			attribute<EUR_Yr> S_B_AP(BebouwingsObject):= const(0[EUR_Yr], BebouwingsObject);
			
			attribute<EUR_Yr> LTAS(BebouwingsObject):= VerbeterKosten_i/LTAS * NcwRefs/_30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> eWP (BebouwingsObject):= VerbeterKosten_i/eWP  * NcwRefs/_30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> EWV (BebouwingsObject):= VerbeterKosten_i/EWV  * NcwRefs/_15/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			
			attribute<EUR_Yr> S_AP_eWP(BebouwingsObject):= eWP + LTAS;
			attribute<EUR_Yr> S_H_eWP (BebouwingsObject):= S_AP_eWP;
			attribute<EUR_Yr> S_T_eWP (BebouwingsObject):= S_AP_eWP;
			attribute<EUR_Yr> S_B_eWP (BebouwingsObject):= S_AP_eWP;
			
			attribute<EUR_Yr> S_AP_EWV(BebouwingsObject):= EWV;
			attribute<EUR_Yr> S_H_EWV (BebouwingsObject):= S_AP_EWV;
			attribute<EUR_Yr> S_T_EWV (BebouwingsObject):= S_AP_EWV;
			attribute<EUR_Yr> S_B_EWV (BebouwingsObject):= S_AP_EWV;
		}
		container OA_j // Onderhoud, nu ook meegewogen in LabelSprong_eg en LabelSprong_m
		{
			attribute<EUR_Yr> S_H_T (BebouwingsObject):= VerbeterKosten_i/S_H_T  * Onderhoud/Rj_GebouwVerbetering * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_H_B (BebouwingsObject):= VerbeterKosten_i/S_H_B  * Onderhoud/Rj_GebouwVerbetering * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_H_AP(BebouwingsObject):= VerbeterKosten_i/S_H_AP * Onderhoud/Rj_GebouwVerbetering * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_T_B (BebouwingsObject):= VerbeterKosten_i/S_T_B  * Onderhoud/Rj_GebouwVerbetering * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_T_AP(BebouwingsObject):= VerbeterKosten_i/S_T_AP * Onderhoud/Rj_GebouwVerbetering * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_B_AP(BebouwingsObject):= VerbeterKosten_i/S_B_AP * Onderhoud/Rj_GebouwVerbetering * RuimtelijkeVraagComponent/nrModelUnits;
			
			attribute<EUR_Yr> LTAS(BebouwingsObject):= VerbeterKosten_i/LTAS * Onderhoud/Rj_LokaleOpwekking * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> eWP (BebouwingsObject):= VerbeterKosten_i/eWP  * Onderhoud/Rj_LokaleOpwekking * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> EWV (BebouwingsObject):= VerbeterKosten_i/EWV  * Onderhoud/Rj_LokaleOpwekking * RuimtelijkeVraagComponent/nrModelUnits;
			
			attribute<EUR_Yr> S_AP_eWP(BebouwingsObject):= eWP + LTAS;
			attribute<EUR_Yr> S_H_eWP (BebouwingsObject):= S_H_AP + S_AP_eWP;
			attribute<EUR_Yr> S_T_eWP (BebouwingsObject):= S_T_AP  + S_AP_eWP;
			attribute<EUR_Yr> S_B_eWP (BebouwingsObject):= S_B_AP  + S_AP_eWP;
			
			attribute<EUR_Yr> S_AP_EWV(BebouwingsObject):= EWV;
			attribute<EUR_Yr> S_H_EWV (BebouwingsObject):= S_H_AP + S_AP_EWV;
			attribute<EUR_Yr> S_T_EWV (BebouwingsObject):= S_T_AP  + S_AP_EWV;
			attribute<EUR_Yr> S_B_EWV (BebouwingsObject):= S_B_AP  + S_AP_EWV;
		}
		container VerbeterKosten_m
		{
			attribute<EUR_Yr> S_H_T (BebouwingsObject):= VerbeterKosten_i/S_H_T  * NCW/mr30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_H_B (BebouwingsObject):= VerbeterKosten_i/S_H_B  * NCW/mr30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_H_AP(BebouwingsObject):= VerbeterKosten_i/S_H_AP * NCW/mr30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_T_B (BebouwingsObject):= VerbeterKosten_i/S_T_B  * NCW/mr30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_T_AP(BebouwingsObject):= VerbeterKosten_i/S_T_AP * NCW/mr30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> S_B_AP(BebouwingsObject):= VerbeterKosten_i/S_B_AP * NCW/mr30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			
			attribute<EUR_Yr> LTAS  (BebouwingsObject):= VerbeterKosten_i/LTAS   * NCW/mr30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> eWP   (BebouwingsObject):= VerbeterKosten_i/eWP    * NCW/mr30/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			attribute<EUR_Yr> EWV   (BebouwingsObject):= VerbeterKosten_i/EWV    * NCW/mr15/AnnualisationFactor * RuimtelijkeVraagComponent/nrModelUnits;
			
			attribute<EUR_Yr> S_AP_eWP(BebouwingsObject):= eWP + LTAS;
			attribute<EUR_Yr> S_H_eWP (BebouwingsObject):= S_H_AP + S_AP_eWP;
			attribute<EUR_Yr> S_T_eWP (BebouwingsObject):= S_T_AP + S_AP_eWP;
			attribute<EUR_Yr> S_B_eWP (BebouwingsObject):= S_B_AP + S_AP_eWP;
			
			attribute<EUR_Yr> S_AP_EWV(BebouwingsObject):= EWV;
			attribute<EUR_Yr> S_H_EWV (BebouwingsObject):= S_H_AP + S_AP_EWV;
			attribute<EUR_Yr> S_T_EWV (BebouwingsObject):= S_T_AP + S_AP_EWV;
			attribute<EUR_Yr> S_B_EWV (BebouwingsObject):= S_B_AP + S_AP_EWV;
		}
		container KanSpringen := for_each_nedv(
			Classifications/LabelSprong/code, 
			MakeDefined(Classifications/LabelSprong/code_xtra+' &&' , '') 
			+'Toepasbaar/'+Classifications/LabelSprong/code+' && IsDefined(Classifications/LabelChange/Label_na[value(UInt32(EnergieLabel/LastValue)*#Classifications/LabelSprong + '+String(ID(Classifications/LabelSprong))+', Classifications/LabelChange)])',
			BebouwingsObject, bool)
		{
			attribute<bool> eWP(BebouwingsObject) := (OpwekkingsOpties/org_capaciteit/hWP == 0[Ratio]) && (OpwekkingsOpties/org_capaciteit/mWKK == 0[Ratio]) 
				&& not(IsDefined(WarmteAllocatie)) && not(IsDefined(StartingState/AanbodOpties/PlanRegioWarmteAllocatie[PlanRegio_rel]));
			attribute<bool> EWV(BebouwingsObject) := eWP;
		}

		attribute<Classifications/LabelSprong> LabelSprongFirst(BebouwingsObject): Expr = 
			"='value(switch('"
				"+AsItemList('case(KanSpringen/'+Classifications/LabelSprong/code+', '+String(ID(Classifications/LabelSprong))+' )')+"
			"',(0 / 0))'+"
			"',Classifications/LabelSprong)'"
		;
			
		container Rentabiliteit_m := 
			for_each_nedv(Classifications/LabelSprong/code,
				replace(
					'( VermedenKosten_m/@ '
					'+ ComfortVerbetering_m/@ '
					'- VerbeterKosten_m/@'
					'- OA_j/@'
					') * Float64(KanSpringen/@)'
				, '@', Classifications/LabelSprong/code
				)
			, BebouwingsObject, EUR_Yr);
			
		attribute<Classifications/LabelSprong> LabelSprong_m(BebouwingsObject) := 
			='value('
				'argmax('
					'0[EUR_Yr],'
					+AsItemList( 'MakeDefined(Rentabiliteit_m/'+Classifications/LabelSprong/code+',0[EUR_Yr])' )
				+')-1'
			', Classifications/LabelSprong)';
		
		parameter<Float64> S_gv :=  (1.0 - EIA_Opties/S_GebouwVerbetering) * (1.0 - EEA_Opties/S_GebouwVerbetering);
		parameter<Float64> S_lo :=  (1.0 - EIA_Opties/S_LokaleOpwekking  ) * (1.0 - EEA_Opties/S_LokaleOpwekking);
		
		container Rentabiliteit_eg := 
			for_each_nedv(Classifications/LabelSprong/code,
				replace(
					'( (VermedenKosten_eg_ex/@ + ComfortVerbetering_eg_ex/@) * EIA_Opties/R_SplitIncentiveFactor * BTW_Factor'
					'- GebouwVerbetering_j/@ * S_gv                                   * BTW_Factor_gv'
					'- LokaleOpwekking_j/@   * S_lo                                   * BTW_Factor'
					'- OA_j/@ * Onderhoud/R_Onderhoud * (1.0 - EEA_Opties/S_Onderhoud)* BTW_Factor'
					'- OA_j/@ * Onderhoud/R_Admin     * (1.0 - EEA_Opties/S_Admin)    * BTW_Factor'
					') * Float64(KanSpringen/@)'
				,	'@', Classifications/LabelSprong/code
				)
			, BebouwingsObject, EUR_Yr);
		
		attribute<Classifications/LabelSprong> LabelSprong_eg(BebouwingsObject) := 
			='value('
				'argmax('
					'0[EUR_Yr],'
					+AsItemList( 'MakeDefined(Rentabiliteit_eg/'+Classifications/LabelSprong/code+',0[EUR_Yr])' )
				+')-1'
			', Classifications/LabelSprong)';
		
		attribute<Classifications/LabelSprong> LabelSprong(BebouwingsObject) :=  
			=LocatieSpecifiekeOpties/Verbeteringen/SpringMeestRendabel   ? 'LabelSprong_eg' :
			LocatieSpecifiekeOpties/Verbeteringen/SpringMaatschappelijk ? 'LabelSprong_m'  :
			'LabelSprongFirst';
		
		attribute<bool> KanVerbeteren(BebouwingsObject):= IsDefined(LabelSprong);
		attribute<bool> eWP          (BebouwingsObject):= NaarEnergieLabel == Classifications/EnergieLabel/V/eWP;
		attribute<bool> eWP_Nieuw    (BebouwingsObject):= KanVerbeteren && eWP;
		attribute<bool> EWV          (BebouwingsObject):= NaarEnergieLabel == Classifications/EnergieLabel/V/EWV;
		attribute<bool> EWV_Nieuw    (BebouwingsObject):= KanVerbeteren && EWV;
		
		attribute<Classifications/EnergieLabel> NaarEnergieLabel(BebouwingsObject): Expr = 
			"KanVerbeteren"
				"? Classifications/LabelChange/Label_na[ value(UInt32(EnergieLabel/LastValue)*#Classifications/LabelSprong + UInt32(LabelSprong), Classifications/LabelChange) ] "
				": EnergieLabel/LastValue";
				
		attribute<EUR_ModelUnit> kosten_min(BebouwingsObject) := 
			MakeDefined(
				merge(LabelSprong, EUR_ModelUnit, 
					EnergieVraagModellen/Verbeteringen/S_H_T/kosten_min [ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_H_B/kosten_min [ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_H_AP/kosten_min[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_T_B/kosten_min [ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_T_AP/kosten_min[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_B_AP/kosten_min[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_H_AP/kosten_min[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_T_AP/kosten_min[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_B_AP/kosten_min[ Model_rel],
					const(0[EUR_ModelUnit], BebouwingsObject),
					EnergieVraagModellen/Verbeteringen/S_H_AP/kosten_min[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_T_AP/kosten_min[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_B_AP/kosten_min[ Model_rel],
					const(0[EUR_ModelUnit], BebouwingsObject)
				)
			,	0[EUR_ModelUnit]
			);
		attribute<EUR_ModelUnit> kosten_max(BebouwingsObject) := 
			MakeDefined(
				merge(LabelSprong, EUR_ModelUnit, 
					EnergieVraagModellen/Verbeteringen/S_H_T/kosten_max [ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_H_B/kosten_max [ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_H_AP/kosten_max[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_T_B/kosten_max [ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_T_AP/kosten_max[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_B_AP/kosten_max[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_H_AP/kosten_max[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_T_AP/kosten_max[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_B_AP/kosten_max[ Model_rel],
					const(0[EUR_ModelUnit], BebouwingsObject),
					EnergieVraagModellen/Verbeteringen/S_H_AP/kosten_max[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_T_AP/kosten_max[ Model_rel],
					EnergieVraagModellen/Verbeteringen/S_B_AP/kosten_max[ Model_rel],
					const(0[EUR_ModelUnit], BebouwingsObject)
				)
			,	0[EUR_ModelUnit]
			);

		container LeerCurves
		{
			container Optimistisch 
			{
				parameter<Percent> Cmin  : Expr = "interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Schil/Optimistisch/Cmin)";
				parameter<Percent> Bpls  : Expr = "interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Schil/Optimistisch/Bpls)";
				parameter<Percent> Verder: Expr = "interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Schil/Optimistisch/Verder)";
			}
			container Pessimistisch
			{
				parameter<Percent> Cmin  : Expr = "interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Schil/Pessimistisch/Cmin)";
				parameter<Percent> Bpls  : Expr = "interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Schil/Pessimistisch/Bpls)";
				parameter<Percent> Verder: Expr = "interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Schil/Pessimistisch/Verder)";
			}
			
			parameter<Percent> Cmin  : Expr = "Optimistisch/Cmin  * (1[Ratio] - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/Cmin  * LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif";
			parameter<Percent> Bpls  : Expr = "Optimistisch/Bpls  * (1[Ratio] - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/Bpls  * LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif";
			parameter<Percent> Verder: Expr = "Optimistisch/Verder* (1[Ratio] - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/Verder* LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif";
			
			parameter<Ratio> CminFactor   : Expr = "(Cmin   /  100[Percent] * LocatieSpecifiekeOpties/Kosten/LeercurveGebruikSchuif   + (1.0[Ratio] - LocatieSpecifiekeOpties/Kosten/LeercurveGebruikSchuif))";
			parameter<Ratio> BplsFactor   : Expr = "(Bpls   /  100[Percent] * LocatieSpecifiekeOpties/Kosten/LeercurveGebruikSchuif   + (1.0[Ratio] - LocatieSpecifiekeOpties/Kosten/LeercurveGebruikSchuif))";
			parameter<Ratio> VerderFactor : Expr = "(Verder /  100[Percent] * LocatieSpecifiekeOpties/Kosten/LeercurveGebruikSchuif   + (1.0[Ratio] - LocatieSpecifiekeOpties/Kosten/LeercurveGebruikSchuif))";
			
			
			attribute<Percent> IndexSprong(BebouwingsObject): Expr =
				"(NaarEnergieLabel >= Classifications/EnergieLabel/V/LabelC)  ? Cmin : "
				"(NaarEnergieLabel >= Classifications/EnergieLabel/V/LabelB)  ? Bpls : Verder";
		}
		attribute<EUR_ModelUnit> kosten_sprong_w_nu(BebouwingsObject) :=
			kosten_max * LocatieSpecifiekeOpties/Kosten/VerbeterMinMaxSchuif +
			kosten_min * (1.0-LocatieSpecifiekeOpties/Kosten/VerbeterMinMaxSchuif);
				
		attribute<EUR_ModelUnit> Ki_eWP_w(BebouwingsObject) := Sprongen/eWP ? Verbeterkosten_i/S_AP_eWP : 0[EUR_ModelUnit];
		attribute<EUR_ModelUnit> Ki_EWV_w(BebouwingsObject) := Sprongen/EWV ? Verbeterkosten_i/S_AP_EWV : 0[EUR_ModelUnit];
				
		attribute<EUR_ModelUnit> kosten_sprong_w(BebouwingsObject) :=
			kosten_sprong_w_nu * (LeerCurves/IndexSprong /  100[Percent] * LocatieSpecifiekeOpties/Kosten/LeercurveGebruikSchuif  + 
			(1.0 - LocatieSpecifiekeOpties/Kosten/LeercurveGebruikSchuif)
		);

		attribute<EUR_ModelUnit> Ki_gv_w(BebouwingsObject) := kosten_sprong_w + StartingStateComponent/Sprongen/Ki_gv_w[StartingState_rel]; // Ki_eWP_w en Ki_EWV_w worden in sectie kosten apart opgenomen.
		
		attribute<EUR_Yr> Vermeden_ex(BebouwingsObject) := 
			MakeDefined(
				merge(LabelSprong, EUR_Yr, 
					VermedenKosten_eg_ex/S_H_T,
					VermedenKosten_eg_ex/S_H_B,
					VermedenKosten_eg_ex/S_H_AP,
					VermedenKosten_eg_ex/S_T_B,
					VermedenKosten_eg_ex/S_T_AP,
					VermedenKosten_eg_ex/S_B_AP,
					VermedenKosten_eg_ex/S_H_eWP,
					VermedenKosten_eg_ex/S_T_eWP,
					VermedenKosten_eg_ex/S_B_eWP,
					VermedenKosten_eg_ex/S_AP_eWP,
					VermedenKosten_eg_ex/S_H_EWV,
					VermedenKosten_eg_ex/S_T_EWV,
					VermedenKosten_eg_ex/S_B_EWV,
					VermedenKosten_eg_ex/S_AP_EWV
				)
			,	0[EUR_Yr]
			);
		attribute<EUR_Yr> Comfort_ex(BebouwingsObject) := 
			MakeDefined(
				merge(LabelSprong, EUR_Yr, 
					ComfortVerbetering_eg_ex/S_H_T,
					ComfortVerbetering_eg_ex/S_H_B,
					ComfortVerbetering_eg_ex/S_H_AP,
					ComfortVerbetering_eg_ex/S_T_B,
					ComfortVerbetering_eg_ex/S_T_AP,
					ComfortVerbetering_eg_ex/S_B_AP,
					ComfortVerbetering_eg_ex/S_H_eWP,
					ComfortVerbetering_eg_ex/S_T_eWP,
					ComfortVerbetering_eg_ex/S_B_eWP,
					ComfortVerbetering_eg_ex/S_AP_eWP,
					ComfortVerbetering_eg_ex/S_H_EWV,
					ComfortVerbetering_eg_ex/S_T_EWV,
					ComfortVerbetering_eg_ex/S_B_EWV,
					ComfortVerbetering_eg_ex/S_AP_EWV
				)
			,	0[EUR_Yr]
			);
		attribute<EUR_Yr> Incentive_eigenaar_ex(BebouwingsObject) :=  (Vermeden_ex + Comfort_ex) * EIA_Opties/R_SplitIncentiveFactor;
		
		attribute<EUR_Yr> Kj_OA(BebouwingsObject) := RuimtelijkeVraagComponent/nrModelUnits * 
			add(
				Ki_gv_w  * Onderhoud/Rj_GebouwVerbetering
			,	Ki_eWP_w * Onderhoud/Rj_LokaleOpwekking 
			, 	Ki_EWV_w * Onderhoud/Rj_LokaleOpwekking 
			);
			
		container subsidie {
			attribute<EUR> EIA30(BebouwingsObject) := RuimtelijkeVraagComponent/nrModelUnits * 
				add(
					Ki_gv_w  * EIA_Opties/S_GebouwVerbetering
				,	Ki_EWV_w * EIA_Opties/S_LokaleOpwekking
				);
			
			attribute<EUR> EIA15(BebouwingsObject) := RuimtelijkeVraagComponent/nrModelUnits * 
				add(
				 	Ki_eWP_w  * EIA_Opties/S_LokaleOpwekking
				);
			
			attribute<EUR_Yr> EEA(BebouwingsObject) := 
				Kj_OA* add(
					Onderhoud/R_Onderhoud * EEA_Opties/S_Onderhoud 
				,	Onderhoud/R_Admin     * EEA_Opties/S_Admin
				)
			+	RuimtelijkeVraagComponent/nrModelUnits * add(
					Ki_gv_w  * NcwRefs/_30/AnnualisationFactor * EEA_Opties/S_GebouwVerbetering 
				,	Ki_EWV_w * NcwRefs/_30/AnnualisationFactor * EEA_Opties/S_LokaleOpwekking 
				,	Ki_eWP_w * NcwRefs/_15/AnnualisationFactor * EEA_Opties/S_LokaleOpwekking 
				)
			;
		}
	}
	
	container Efficiency
	{
		container Gebouw
		{
			attribute<units/Ratio> LaatsteWaarde(BebouwingsObject) := 
				MakeDefined(StartingStateComponent/Efficiency/Gebouw/ResultaatWaarde[StartingState_rel], EnergieVraagModellen/Efficiency/Gebouw[ Model_rel]);
			
			attribute<units/Ratio> VerbeterFactor(BebouwingsObject) := 
					Sprongen/LabelSprong == value( 0, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_H_T/efficiency [ Model_rel] :
					Sprongen/LabelSprong == value( 1, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_H_B/efficiency [ Model_rel] :
					Sprongen/LabelSprong == value( 2, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency[ Model_rel] :
					Sprongen/LabelSprong == value( 3, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_T_B/efficiency [ Model_rel] :
					Sprongen/LabelSprong == value( 4, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency[ Model_rel] :
					Sprongen/LabelSprong == value( 5, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency[ Model_rel] :
					Sprongen/LabelSprong == value( 6, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency[ Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong == value( 7, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency[ Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong == value( 8, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency[ Model_rel] : // gebouw als bij 5
					Sprongen/LabelSprong == value(10, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency[ Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong == value(11, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency[ Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong == value(12, Classifications/LabelSprong) ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency[ Model_rel] : // gebouw als bij 5
					1.0[Ratio];
			attribute<units/Ratio> ResultaatWaarde(BebouwingsObject) := max_elem(VerbeterFactor, LaatsteWaarde);
		}
		container RuimteVerwarming
		{
			attribute<units/Ratio> AardGas(BebouwingsObject):= // neem een opgegeven fractie van de Verbetering
					Sprongen/RuimteVerwarming/KanVerbeteren
					? Sprongen/RuimteVerwarming/efficiency
					: EnergieVraagModellen/Efficiency/RuimteVerwarming/AardGas[ Model_rel];
			attribute<units/Ratio> Warmte(BebouwingsObject): Expr = "const(1.0, BebouwingsObject, units/Ratio)";
			attribute<units/Ratio> eWP   (BebouwingsObject): Expr = "const(Kengetallen/eWP/COP, BebouwingsObject, units/Ratio)";
			attribute<units/Ratio> EWV   (BebouwingsObject): Expr = "const(Kengetallen/EWV/COP, BebouwingsObject, units/Ratio)";
		}
		container Koude
		{
			attribute<units/Ratio> Elektriciteit(BebouwingsObject): Expr = "EnergieVraagModellen/Efficiency/Koude/Elektriciteit[ Model_rel]";
		}
		container WarmWater
		{
			attribute<units/Ratio> AardGas(BebouwingsObject): Expr = "EnergieVraagModellen/Efficiency/WarmWater/AardGas    [ Model_rel]";
			attribute<units/Ratio> Warmte (BebouwingsObject): Expr = "const(1.0, BebouwingsObject, units/Ratio)";
			attribute<units/Ratio> eWP    (BebouwingsObject): Expr = "const(Kengetallen/eWP/COP, BebouwingsObject, units/Ratio)";
			attribute<units/Ratio> EWV    (BebouwingsObject): Expr = "const(Kengetallen/EWV/COP, BebouwingsObject, units/Ratio)";
		}
		container Apparatuur
		{
			attribute<units/Ratio> Elektriciteit(BebouwingsObject): Expr = "EnergieVraagModellen/Efficiency/Apparatuur/Elektriciteit[ Model_rel]";
		}
	}

//	attribute<Bool> LtVerwarmingGeschikt(BebouwingsObject): Expr = "(RuimtelijkeVraagComponent/Verbeteringen/Gebouw >= Float64(1.0)) || IsUitleg || (RuimtelijkeVraagComponent/BouwJaar >= Classifications/BouwJaar/n2010)";
	attribute<Bool> LtVerwarmingGeschikt(BebouwingsObject): Expr = "IsUitleg || (RuimtelijkeVraagComponent/BouwJaar >= Classifications/BouwJaar/n2010) || (Sprongen/NaarEnergieLabel == Classifications/EnergieLabel/V/Aplus)";
	
	container Opwekking
	{
		attribute<GJ_Yr> ZonneBoiler(BebouwingsObject):= Hoeveelheden/ZonneBoiler * Kengetallen/ZonneBoiler/Opbrengst;
		attribute<GJ_Yr> Zon_PV     (BebouwingsObject):= Hoeveelheden/Zon_PV      * Kengetallen/Zon_PV/Opbrengst;

		container LeerCurves
		{
			container BronData:= /Vesta/BronData;
			container Optimistisch 
			{
				parameter<Percent> ZonB := interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Optimistisch/ZonB);
				parameter<Percent> ZonPV:= interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Optimistisch/ZonPV);
				parameter<Percent> eWPlw:= interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Optimistisch/eWPlw);
				parameter<Percent> eWPww:= interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Optimistisch/eWPww);
				parameter<Percent> EWV  := interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Optimistisch/EWV);
				parameter<Percent> mWKK := interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Optimistisch/mWKK);
				parameter<Percent> hWP  := interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Optimistisch/hWP);
			}
			container Pessimistisch
			{
				parameter<Percent> ZonB := interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Pessimistisch/ZonB);
				parameter<Percent> ZonPV:= interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Pessimistisch/ZonPV);
				parameter<Percent> eWPlw:= interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Pessimistisch/eWPlw);
				parameter<Percent> eWPww:= interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Pessimistisch/eWPww);
				parameter<Percent> EWV  := interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Pessimistisch/EWV);
				parameter<Percent> mWKK := interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Pessimistisch/mWKK);
				parameter<Percent> hWP  := interpolate_linear(RunJaar, BronData/Leercurves/TabelJaar/Jaar, BronData/Leercurves/Installatie/Optimistisch/hWP);
			}
			
			parameter<Percent> ZonB := Optimistisch/ZonB * (1.0 - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/ZonB * LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif;
			parameter<Percent> ZonPV:= Optimistisch/ZonPV* (1.0 - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/ZonPV* LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif;
			parameter<Percent> eWPlw:= Optimistisch/eWPlw* (1.0 - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/eWPlw* LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif;
			parameter<Percent> eWPww:= Optimistisch/eWPww* (1.0 - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/eWPww* LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif;
			parameter<Percent> eWP  := eWPlw;
			parameter<Percent> hWP  := Optimistisch/hWP  * (1.0 - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/hWP  * LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif;
			parameter<Percent> EWV  := Optimistisch/EWV  * (1.0 - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/EWV  * LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif;
			parameter<Percent> mWKK := Optimistisch/mWKK * (1.0 - LocatieSpecifiekeOpties/Kosten/LeercurveMinMaxSchuif) + Pessimistisch/mWKK * LocatieSpecifiekeOpties/Kosten/LeerCurveMinMaxSchuif;			
		}
		
		attribute<Ratio> eWP (BebouwingsObject) := value(Sprongen/eWP, Ratio);
		attribute<Ratio> EWV (BebouwingsObject) := value(Sprongen/EWV, Ratio);
		attribute<Ratio> mWKK(BebouwingsObject) := Min_Elem(OpwekkingsOpties/Capaciteit/mWKK, 1.0[Ratio] - EWV - eWP);
		attribute<Ratio> hWP (BebouwingsObject) := Min_Elem(OpwekkingsOpties/Capaciteit/hWP,  1.0[Ratio] - EWV - eWP -mWKK);
	}
	
	container Kosten
	{
		container Inv {
			parameter<EUR_m2> ZonneBoiler := Kengetallen/ZonneBoiler/InvesteringsKosten_Min * Schuiven/KostenMin +Kengetallen/ZonneBoiler/InvesteringsKosten_Max * Schuiven/KostenMax;
			parameter<EUR_m2> Zon_PV      := Kengetallen/Zon_PV/InvesteringsKosten_Min      * Schuiven/KostenMin +Kengetallen/Zon_PV/InvesteringsKosten_Max      * Schuiven/KostenMax;
			
			parameter<EUR_aansl> mWKK:= Kengetallen/mWKK/InvesteringsKosten_Min * Schuiven/KostenMin + Kengetallen/mWKK/InvesteringsKosten_Max * Schuiven/KostenMax;
			parameter<EUR_aansl> hWP := Kengetallen/hWP/InvesteringsKosten_Min  * Schuiven/KostenMin + Kengetallen/hWP/InvesteringsKosten_Max  * Schuiven/KostenMax;
		}
	
		attribute<EUR> Ki_ZonneBoiler(BebouwingsObject):= Hoeveelheden/ZonneBoiler * Inv/ZonneBoiler * Opwekking/LeerCurves/ZonB  / 100[Percent];
		attribute<EUR> Ki_Zon_PV     (BebouwingsObject):= Hoeveelheden/Zon_PV      * Inv/Zon_PV      * Opwekking/LeerCurves/ZonPV / 100[Percent];
		attribute<EUR> Ki_mWKK       (BebouwingsObject):= Hoeveelheden/mWKK        * Inv/mWkk        * Opwekking/Leercurves/mWKK  / 100[Percent];
		attribute<EUR> Ki_hWP        (BebouwingsObject):= Hoeveelheden/hWP         * Inv/hWP         * Opwekking/Leercurves/hWP   / 100[Percent];
		attribute<EUR> Ki_eWP        (BebouwingsObject):= RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_eWP_w; 
		attribute<EUR> Ki_EWV        (BebouwingsObject):= RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_EWV_w; 

		attribute<EUR> Ki_LokaleOpwekking30(BebouwingsObject):= Ki_ZonneBoiler + Ki_Zon_PV + Ki_EWV;
		attribute<EUR> Ki_LokaleOpwekking15(BebouwingsObject):= Ki_mWKK + Ki_hWP + Ki_eWP;
		
		attribute<EUR> Ki_GebouwVerbetering(BebouwingsObject):= RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_gv_w; // cumulatief
		attribute<EUR_Yr> Kj_gv_incentive  (BebouwingsObject):= Sprongen/Incentive_eigenaar_ex + StartingStateComponent/Kosten/Kj_gv_incentive[StartingState_rel];

		attribute<EUR> Ki_LokaleOpwekking(BebouwingsObject):= Ki_LokaleOpwekking30 + Ki_LokaleOpwekking15;
		attribute<EUR> Ki_Totaal(BebouwingsObject):= Ki_LokaleOpwekking + Ki_GebouwVerbetering;
	}
	
	container DragerOpties
	{
		container RuimteVerwarming
		{
			parameter<Float64> Aardgas_leidingverliesfactor := 1.05;
			
			attribute<GJ_Yr> AardGas(BebouwingsObject) := Functioneel/RuimteVerwarming / ( Efficiency/Gebouw/ResultaatWaarde * Efficiency/RuimteVerwarming/AardGas) * Aardgas_leidingverliesfactor;
			attribute<GJ_Yr> Warmte (BebouwingsObject) := Functioneel/RuimteVerwarming / ( Efficiency/Gebouw/ResultaatWaarde * Efficiency/RuimteVerwarming/Warmte );
			attribute<GJ_Yr> eWP    (BebouwingsObject) := Functioneel/RuimteVerwarming / ( Efficiency/Gebouw/ResultaatWaarde * Efficiency/RuimteVerwarming/eWP);
			attribute<GJ_Yr> EWV    (BebouwingsObject) := Functioneel/RuimteVerwarming / ( Efficiency/Gebouw/ResultaatWaarde * Efficiency/RuimteVerwarming/EWV);
		}
		container Koude
		{
			attribute<GJ_Yr> Elektriciteit(BebouwingsObject) := Functioneel/Koude / Efficiency/Koude/Elektriciteit;
		}
		container WarmWater
		{
			parameter<Float64> Aardgas_leidingverliesfactor := 1.10;
			
			attribute<GJ_Yr> AardGas(BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/AardGas) * Aardgas_leidingverliesfactor;
			attribute<GJ_Yr> Warmte (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/Warmte );
			attribute<GJ_Yr> eWP    (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/eWP    );
			attribute<GJ_Yr> EWV    (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/EWV    );
			attribute<GJ_Yr> ZonneBoiler(BebouwingsObject) := Opwekking/Zonneboiler;
		}
		container Warmte
		{
			attribute<GJ_Yr> AardGas(BebouwingsObject) := RuimteVerwarming/AardGas + WarmWater/AardGas;
			attribute<GJ_Yr> Warmte (BebouwingsObject) := RuimteVerwarming/Warmte  + WarmWater/Warmte;
			attribute<GJ_Yr> eWP    (BebouwingsObject) := RuimteVerwarming/eWP     + WarmWater/eWP;
			attribute<GJ_Yr> EWV    (BebouwingsObject) := RuimteVerwarming/EWV     + WarmWater/EWV;
		}
		container Apparatuur
		{
			attribute<GJ_Yr> Zon_PV       (BebouwingsObject) := Opwekking/Zon_PV;
			attribute<GJ_Yr> Elektriciteit(BebouwingsObject) := Functioneel/Apparatuur / Efficiency/Apparatuur/Elektriciteit - Zon_PV;
		}
	}
	
	attribute<Ratio>    AandeelElectric            (BebouwingsObject) := Opwekking/eWP + Opwekking/EWV;
	attribute<Ratio>    AandeelElectric_mWKK       (BebouwingsObject) := AandeelElectric + Opwekking/mWKK;
	attribute<Ratio>    AandeelIndividueleOpwekking(BebouwingsObject) := AandeelElectric_mWKK + Opwekking/hWP, IntegrityCheck = "this <= 1.0";
	attribute<Float64>  AandeelWarmteVraag         (BebouwingsObject) := Min_Elem(RuimtelijkeVraagComponent/AandeelWarmteVraag, 1.0 - AandeelIndividueleOpwekking);
	attribute<Float64>  AandeelNietDeelnemers      (BebouwingsObject) := 1.0 - AandeelWarmteVraag;
	attribute<Float64>  AandeelGas                 (BebouwingsObject) := 1.0 - max_elem(Float64(IsDefined(WarmteAllocatie)), AandeelElectric);

	container WarmteVraagD: Descr = "Vraag van Gebiedsoptie voor regio optie deelnemers"
	{
		attribute<nrAansl>   NrAansluitingen   (BebouwingsObject) :=AandeelWarmteVraag * RuimtelijkeVraagComponent/nrAansluitingen ;
		attribute<ModelUnit> NrModelUnits      (BebouwingsObject) :=AandeelWarmteVraag * RuimtelijkeVraagComponent/NrModelUnits; // @@@ Let op GlasTuinbouw alleen areaal warmte glastuinbouw
		attribute<kW>        AansluitCapaciteit(BebouwingsObject) :=AandeelWarmteVraag * RuimtelijkeVraagComponent/AansluitCapaciteit/Warmte;
		attribute<GJ_Yr>     Verbruik          (BebouwingsObject) :=AandeelWarmteVraag * DragerOpties/Warmte/Warmte;
	}

	container WarmteVraagA: Descr = "Alle warmtevraag"
	{
		attribute<nrAansl>   NrAansluitingen   (BebouwingsObject) :=(1.0 - AandeelElectric) * RuimtelijkeVraagComponent/nrAansluitingen;
		attribute<kW>        AansluitCapaciteit(BebouwingsObject) :=(1.0 - AandeelElectric) * RuimtelijkeVraagComponent/AansluitCapaciteit/Warmte;
		attribute<GJ_Yr>     Verbruik          (BebouwingsObject) :=(1.0 - AandeelElectric) * DragerOpties/Warmte/Warmte;
	}
	container Warmtewet {
 		parameter<Float64> PrijsFactor_impl :=  sum( AandeelGas * DragerOpties/Warmte/Aardgas) / sum( AandeelGas * DragerOpties/Warmte/Warmte ) * Voorkeuren/MinderDanAndersFactor;
 		parameter<Float64> PrijsFactor_corr :=  MakeDefined(PrijsFactor_impl, 1.25);
 		parameter<Float64> PrijsFactor :=  = 'VestaRunData/'+rjoin(TAG, Classifications/BebouwingsComponent/name, Classifications/BebouwingsComponent/name[Classifications/BebouwingsComponent/Warmtewet_BC_rel])+'/Warmtewet/PrijsFactor_corr';
		
		parameter<EUR_GJ> WarmtePrijs := 
			=Voorkeuren/IsVasteWarmtePrijs 
			? 'Voorkeuren/VasteWarmtePrijs'
			: 'PrijsFactor * PrijzenAardgas/KGJ_eindgebruik_ex[classify(0[GJ_Yr], PrijzenAardgas/ClassBreak)]';
	}
}
