//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op WoningComponenten      //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container WoningComponentOperaties
{
	template Select
	{
		// begin case parameters
		attribute<Units/nrWoningen>           NrWoningenGrid(Geography/rdc_100lu);
		parameter<Classifications/woningtype> type;
		parameter<Units/Jaar>                 zichtjaar;
		// einde case parameters

		container results
		{
			unit<uint32> BebouwingsObject: 
				Expr       = "Subset(NrWoningenGrid > value(0, Units/nrWoningen))",
				DialogType = "Map",
				DialogData = "Pnt"
			{
				attribute<Geography/rdc_meter> Pnt: Expr = "Point";
				parameter<m> SymbolWorldSize: [ 50 ], DialogType = "SymbolWorldSize";
			}
				
			attribute<Units/nrWoningen>              NrWoningen (BebouwingsObject): Expr = "NrWoningenGrid[BebouwingsObject/nr_OrgEntity]";

			attribute<Geography/RegioIndelingen/PC4>        PC4_rel     (BebouwingsObject): Expr = "Geography/rdc_100lu/PC4_rel     [BebouwingsObject/nr_OrgEntity]";
			attribute<Geography/RegioIndelingen/grid500m>   grid500m_rel(BebouwingsObject): Expr = "Geography/rdc_100lu/grid500m_rel[BebouwingsObject/nr_OrgEntity]";
			attribute<Geography/RegioIndelingen/grid1km>    grid1km_rel (BebouwingsObject): Expr = "Geography/rdc_100lu/grid1km_rel [BebouwingsObject/nr_OrgEntity]";
			attribute<Geography/RegioIndelingen/grid2km>    grid2km_rel (BebouwingsObject): Expr = "Geography/rdc_100lu/grid2km_rel [BebouwingsObject/nr_OrgEntity]";

			attribute<Geography/rdc_meter>           Point      (BebouwingsObject): Expr = "Geography/rdc_100lu/Point  [BebouwingsObject/nr_OrgEntity]";
			attribute<Classifications/woningtype>    woningtype (BebouwingsObject): Expr = "const(type, BebouwingsObject, Classifications/woningtype)";
			attribute<Classifications/BouwJaar>      Bouwjaar   (BebouwingsObject): Expr = "const(classify(value(zichtjaar, Units/Yr)-value(0.5, Units/Yr),  classifications/bouwjaar/ClassBreak),BebouwingsObject)";
			attribute<bool>                          KanBesparen(BebouwingsObject): Expr = "const(true, BebouwingsObject)"; // woning uitleg wordt al optimaal gebouwd
			attribute<Float64>                AandeelWarmteVraag(BebouwingsObject): Expr = "const(Float64(1.0), BebouwingsObject)"; // alle woning uitleg is geschikt voor WarmteOpties
			
			container Gebied
			{
				attribute<Float64> n     (BebouwingsObject): Expr = "Float64(NrWoningen)";
				attribute<Float64> MEAN_x(BebouwingsObject): Expr = "Float64(PointCol(Point))";
				attribute<Float64> MEAN_y(BebouwingsObject): Expr = "Float64(PointRow(Point))";
				attribute<Float64> SSD_xx(BebouwingsObject): Expr = "const(10000.0 / 12.0, BebouwingsObject)";
				attribute<Float64> SSD_xy(BebouwingsObject): Expr = "const(    0.0 / 12.0, BebouwingsObject)";
				attribute<Float64> SSD_yy(BebouwingsObject): Expr = "const(10000.0 / 12.0, BebouwingsObject)";
			}
		}
	}
	template Unite
	{
		// begin case parameters
		container bron;
		// einde case parameters
		
		container results
		{
			unit<uint8> WoningType := Classifications/WoningType;
			
			unit<uint32> BebouwingsObject: //TODO: dit uitfaseren en Bebouwingscomponent meer als Table inrichten.
				Expr = "='Union_Unit(' + asItemList('bron/' + WoningType/Name + '/results/BebouwingsObject') + ')'",
				DialogType = "Map",
				DialogData = "Pnt"
			{
				attribute<Geography/rdc_meter> Pnt:  Expr = "Point";
				attribute<string> Code(BebouwingsObject) := Label;
				attribute<String> TypeName :Expr= "='Union_Data(., ' + asItemList('const(' + Quote(WoningType/Name) + ',bron/' + WoningType/Name + '/results/BebouwingsObject)') + ')'";
				attribute<String> Label := TypeName+String(BouwJaar)+String(Point), DialogType = "LabelText";
				parameter<m> SymbolWorldSize: [ 50 ], DialogType = "SymbolWorldSize";
			}
			
// 			attribute<string> Code(BebouwingsObject) := Label;
// 			attribute<String> TypeName :Expr= "='Union_Data(., ' + asItemList('const(' + Quote(WoningType/Name) + ',bron/' + WoningType/Name + '/results/BebouwingsObject)') + ')'";
// 			attribute<String> Label := TypeName+String(BouwJaar)+String(Point), DialogType = "LabelText";
// 			parameter<m> SymbolWorldSize: [ 50 ], DialogType = "SymbolWorldSize";

			unit<uint8> KengetalTypeDomein: Expr = "WoningType";
			
			attribute<Units/nrWoningen>              NrJoinedUnits  (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/NrWoningen') + ')'";
			attribute<Geography/RegioIndelingen/PC4>      PC4_rel     (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/PC4_rel') + ')'";
			attribute<Geography/RegioIndelingen/grid500m> grid500m_rel(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/grid500m_rel') + ')'";
			attribute<Geography/RegioIndelingen/grid1km>  grid1km_rel (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/grid1km_rel') + ')'";
			attribute<Geography/RegioIndelingen/grid2km>  grid2km_rel (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/grid2km_rel') + ')'";
			attribute<Geography/rdc_meter>           Point          (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/Point') + ')'";
			attribute<KengetalTypeDomein>            KengetalType   (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/woningtype') + ')'";
			attribute<Classifications/BouwJaar>      Bouwjaar       (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/Bouwjaar') + ')'";
			attribute<Classifications/BouwJaar>      SubType        (BebouwingsObject): Expr = "KengetalType * UInt8(#Classifications/BouwJaar) + BouwJaar";
			attribute<nrAansl>                       nrAansluitingen(BebouwingsObject) := NrJoinedUnits * 1.0[nrAansl / NrWoningen];
			attribute<nrWoningen>                    nrWoonUnits    (BebouwingsObject) := nrJoinedUnits;

			attribute<Float64>                    AandeelWarmteVraag(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/AandeelWarmteVraag') + ')'";
		
			container Gebied
			{
				attribute<Float64> n     (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/Gebied/n'     ) + ')'";
				attribute<Float64> MEAN_x(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/Gebied/MEAN_X') + ')'";
				attribute<Float64> MEAN_y(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/Gebied/MEAN_y') + ')'";
				attribute<Float64> SSD_xx(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/Gebied/SSD_xx') + ')'";
				attribute<Float64> SSD_xy(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/Gebied/SSD_xy') + ')'";
				attribute<Float64> SSD_yy(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + WoningType/Name + '/results/Gebied/SSD_yy') + ')'";
			}
 			container Criteria;
		}
	}
}