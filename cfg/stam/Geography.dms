//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2011                                       //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                               FEBRUARI 2010                                          //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile wordt de Geography gedefinieerd:                      //
//       - geografische basis eenheden en grid domeinen voor brondata                   //
//       - regioindelingen (polygonen)                                                  //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////

container Geography: Using = "Units"
{
	unit<dpoint> rdc_meter_base: 
//		DialogData = "Geography/top100/grid/Nl_detail/GridData;Geography/RegioIndelingen/Provincie/Shapes/Polygons;WmsSpecs";
		DialogData = "ngr_layer";
	unit<dpoint> rdc_meter := range(rdc_meter_base, point(300000.0, 0.0), point(625000.0, 280000.0));
	unit<fpoint> rdc_meter_f32 := gridset(rdc_meter, point(1.0, 1.0), point(0.0, 0.0), fpoint);
	unit<ipoint> rdc_dm := gridset(rdc_meter, point(0.1, 0.1), point(0.0,0.0), ipoint);
	unit<ipoint> rdc_mm := gridset(rdc_meter, point(0.001, 0.001), point(0.0,0.0), ipoint);

	#include <ngr_layer.dms>

	unit<wpoint> rdc_100lu :=
		range(
			gridset(rdc_meter, point( - 100.0,   100.0),  point(625000.0, 10000.0), wpoint),
			point(0w, 0w),
			point(3250w, 2700w)
		)
		,	Descr = "rdCoords/100m van NW naar SE (2700 cols)"
	{
		attribute<rdc_meter> Point: Expr = "ID(.)[rdc_meter]+Point(-50[Float64], 50[Float64], rdc_meter)";
		
		attribute<RegioIndelingen/PC4> PC4_rel_org:  Expr = "point_in_polygon(Point, RegioIndelingen/PC4/Geometry)";
		attribute<bool> PC4_org_defined: Expr = "IsDefined(PC4_rel_org)";
		unit<uint32> NearPC4: Expr = "Subset(potential(Float32(PC4_org_defined), DistMatrices/CaseData/pot1000m/potrange/Cilindrical) >= Float32(0.000001) && !PC4_org_defined)";
		container Connect: Expr = "connect_info( RegioIndelingen/PC4/Geometry, Point[NearPC4/nr_OrgEntity])";
		attribute<RegioIndelingen/PC4> PC4_rel: Expr = "MakeDefined(PC4_rel_org, Connect/ArcID[invert(NearPC4/nr_OrgEntity)])", FreeData = "False";
		attribute<RegioIndelingen/grid500m> grid500m_rel: Expr = "RegioIndelingen/grid500m/BaseGrid[ ID(.)[rdc_500m] ]";
		attribute<RegioIndelingen/grid1km> grid1km_rel: Expr = "RegioIndelingen/grid1km/BaseGrid[ ID(.)[rdc_1km] ]";
		attribute<RegioIndelingen/grid2km>  grid2km_rel:  Expr = "RegioIndelingen/grid2km/BaseGrid[ ID(.)[rdc_2km ] ]";
	}
	unit<wpoint> rdc_500m := gridset(rdc_100lu, point( 5w, 5w, rdc_100lu), point(0w,0w, rdc_100lu), wpoint)
	{
		attribute<RegioIndelingen/PC4>   PC4_rel   := poly2grid(RegioIndelingen/PC4/Geometry, .);
		attribute<RegioIndelingen/buurt> buurt_rel := poly2grid(RegioIndelingen/buurt/poly,   .);
		attribute<rdc_meter> Point := ID(.)[rdc_meter]+Point(-250.0, 250.0, rdc_meter);
		attribute<Bool> IsNL := IsDefined(buurt_rel);
	}
	
	unit<wpoint> rdc_1km := gridset(rdc_100lu, point(10w, 10w, rdc_100lu), point(0w,0w, rdc_100lu), wpoint)
	{
		attribute<RegioIndelingen/PC4>   PC4_rel   := poly2grid(RegioIndelingen/PC4/Geometry, .);
		attribute<RegioIndelingen/buurt> buurt_rel := poly2grid(RegioIndelingen/buurt/poly,   .);
		attribute<rdc_meter> Point := ID(.)[rdc_meter]+Point(-500.0, 500.0, rdc_meter);
		attribute<Bool> IsNL := IsDefined(buurt_rel);
	}
	
	unit<wpoint> rdc_2km := gridset(rdc_100lu, point(20w, 20w, rdc_100lu), point(0w, 0w, rdc_100lu), wpoint)
	{
		attribute<RegioIndelingen/PC4>   PC4_rel   := poly2grid(RegioIndelingen/PC4/Geometry, .);
		attribute<RegioIndelingen/buurt> buurt_rel := poly2grid(RegioIndelingen/buurt/poly,   .);
		attribute<rdc_meter> Point := ID(.)[rdc_meter]+Point(-1000.0, 1000.0, rdc_meter);
		attribute<Bool> IsNL := IsDefined(buurt_rel);
	}
	
	unit<UInt16> PC4_nrs   := Range(UInt16, 0w, 9999w);
	unit<UInt32> Buurt_nrs := Range(UInt32, 0u, 9999u);
	
	container RegioIndelingen
	{
		unit<uint32> PC4Rap: Expr = "Unique(PC4_Gemeente_NL/PC4Str)"
		{
			attribute<uint16> PC4Nr:     Expr = "rjoin(Values, PC4_Gemeente_NL/PC4Str, PC4_Gemeente_NL/PC4)";
			attribute<String> Name:      Expr = "'PC4_'+String(PC4Nr)";
			attribute<String> Label:     Expr = "Values";			
			parameter<String> RegioNaam: Expr = "'PC4'";
		}

		unit<uint32> PC4: 
			StorageName     = "%SourceDataProjDir%/hulpbestanden/pc04_vlakken_2009/Postcode4Gebieden_2009_IRIS.shp",
			StorageType     = "gdal.vect",
			DialogType      = "Map",
			DialogData      = "Geometry",
			SyncMode        = "None",
			StorageReadOnly = "True"
		{
			attribute<rdc_meter> Geometry(polygon)
			:	label           = "Postcode 4 gebieden Nederland 2009"
			{
				parameter<uint32> BrushColor 
				:	DialogType = "BrushColor"
				,	 expr      = "rgb(255,255,255)";
				parameter<uint32> PenColor: expr = "rgb(167,167,167)", DialogType = "PenColor";
				parameter<int16>  PenWidth: expr = "int16(1)"        , DialogType = "PenWidth";
			}
			parameter<Bool> HasBaseGrid: [ false ];

			attribute<PC4_nrs> POSTCODE4;

			
			attribute<rdc_meter> point: Expr = "Centroid_or_mid(Geometry)";
			attribute<m2>  Area:      Expr = "Area(Geometry, m2)";
			attribute<km2> AreaInKm2: Expr = "Area / value(1000000, m2 / km2)";
			
			attribute<PC4_nrs> code: Expr = "POSTCODE4";
			attribute<String>  Label: Expr = "String(code)", DialogType = "LabelText";
			

			attribute<PC4_Gemeente_NL> PC4_Gemeente_NL_rel: Expr = "invert(PC4_Gemeente_NL/PC4_rel)", DisableStorage = "True";
			attribute<UINt32> PC4_Gemeente_NL_count: Expr = "pcount(PC4_Gemeente_NL/PC4_rel)", DisableStorage = "True";
			
			attribute<NL>        NL_rel:               Expr = "const(0[NL],.)";
			attribute<Gemeente>  Gemeente_rel:         Expr = "rlookup(PC4_Gemeente_NL/GEMNR[PC4_Gemeente_NL_rel], Gemeente/Values)";
			attribute<PC4_Gemeente_NL>  PC4_rel:       Expr = "rlookup(PC4_Gemeente_NL/PC4Str[PC4_Gemeente_NL_rel], PC4Rap/Values)";
			attribute<Provincie> Provincie_rel:        Expr = "MakeDefined(rlookup(PC4_Gemeente_NL/PRVNR[PC4_Gemeente_NL_rel], Provincie/Values), 0[Provincie])";
			
			attribute<Jaar> BioWKK_Start: Expr = "const(2020[jaar], .)"; // jaar waar vanaf BMC in een planregio is toegestaan. gebruik 9999 of ieder getal hoger dan laatste zichtjaar om geheel te verbieden.
		}
		
//		unit<uint32> grid500m: Expr = "Subset(rdc_500m/IsNL)", DialogType = "Map", DialogData = "BaseGrid"
		unit<uint32> grid500m := Subset(const(true, rdc_500m)), DialogType = "Map", DialogData = "BaseGrid" // guarantee that all objects are in a plan-region
		{
			attribute<.>    BaseGrid(rdc_500m) := invert(nr_OrgEntity);
			parameter<Bool> HasBaseGrid: [ true ];
			
			attribute<rdc_meter> Point := rdc_500m/point[nr_OrgEntity];
			attribute<km2>       AreaInKm2: Expr = "const(0.25[km2], .)";
			
			// Report Regio relations
			attribute<NL>        NL_rel       := const(0[NL],.);
			attribute<Gemeente>  Gemeente_rel := RegioIndelingen/Buurt/Gemeente_rel [rdc_500m/Buurt_rel[nr_OrgEntity]];
			attribute<Provincie> Provincie_rel:= RegioIndelingen/buurt/Provincie_rel[rdc_500m/Buurt_rel[nr_OrgEntity]];
			
			attribute<Jaar> BioWKK_Start: Expr = "const(2020[jaar], .)"; // jaar waar vanaf BMC in een planregio is toegestaan. gebruik 9999 of ieder getal hoger dan laatste zichtjaar om geheel te verbieden.
		}
		
		unit<uint32> grid1km := Subset(const(true,rdc_1km)), DialogType = "Map", DialogData = "BaseGrid" // guarantee that all objects are in a plan-region
		{
			attribute<.>    BaseGrid(rdc_1km) := invert(nr_OrgEntity);
			parameter<Bool> HasBaseGrid: [ true ];
			
			attribute<rdc_meter> Point: Expr  = "rdc_1km/point[nr_OrgEntity]";
			
			attribute<km2>       AreaInKm2: Expr = "const(1.0[km2], .)";
			
			// Report Regio relations

			attribute<NL>        NL_rel       := const(0[NL],.);
			attribute<Gemeente>  Gemeente_rel := RegioIndelingen/buurt/Gemeente_rel [rdc_1km/buurt_rel[nr_OrgEntity]];
			attribute<Provincie> Provincie_rel:= RegioIndelingen/buurt/Provincie_rel[rdc_1km/buurt_rel[nr_OrgEntity]];
			
			attribute<Jaar> BioWKK_Start: Expr = "const(2020[jaar], .)"; // jaar waar vanaf BMC in een planregio is toegestaan. gebruik 9999 of ieder getal hoger dan laatste zichtjaar om geheel te verbieden.
		}
		
//		unit<uint32> grid2km: Expr = "Subset(rdc_2km/IsNL)", DialogType = "Map", DialogData = "BaseGrid"
		unit<uint32> grid2km: Expr = "Subset(const(true,rdc_2km))", DialogType = "Map", DialogData = "BaseGrid" // guarantee that all objects are in a plan-region
		{
			attribute<.>         BaseGrid(rdc_2km): Expr = "invert(nr_OrgEntity)";
			parameter<Bool> HasBaseGrid: [ true ];
			
			attribute<rdc_meter> Point:    Expr  = "rdc_2km/point[nr_OrgEntity]";
			
			attribute<km2>       AreaInKm2: Expr = "const(4.0[km2], .)";
			
			// Report Regio relations

			attribute<NL>        NL_rel       := const(0[NL],.);
			attribute<Gemeente>  Gemeente_rel := RegioIndelingen/buurt/Gemeente_rel [rdc_2km/buurt_rel[nr_OrgEntity]];
			attribute<Provincie> Provincie_rel:= RegioIndelingen/buurt/Provincie_rel[rdc_2km/buurt_rel[nr_OrgEntity]];
			
			attribute<Jaar> BioWKK_Start: Expr = "const(2020[jaar], .)"; // jaar waar vanaf BMC in een planregio is toegestaan. gebruik 9999 of ieder getal hoger dan laatste zichtjaar om geheel te verbieden.
		}
		
		// 6 digit postcode areas
		unit<uint32> PC6_Points:
			StorageName     = "%SourceDataProjDir%/hulpbestanden/pc06_punten/PC6punten_2006_11_KAD.dbf",
			DialogData      = "point",
			DialogType      = "Map",
			StorageReadOnly = "True"
		{
			attribute<rdc_meter> point(PC6_Points):
				label           = "Postcode 6 gebieden Nederland 2006",
				StorageName     = "%SourceDataProjDir%/hulpbestanden/pc06_punten/PC6punten_2006_11_KAD.shp",
				StorageReadOnly = "True";
		}
		
		unit<uint32> PC6:
			StorageName     = "%SourceDataProjDir%/hulpbestanden/pc06_vlakken_simplify/PC6gebieden_2006_KAD_simplify.dbf",
			DialogData      = "poly",
			DialogType      = "Map",
			StorageReadOnly = "True"
		{
			unit<uint32> PC6_Segm: Expr = "PC6"; // Expr = "TiledUnit(value(100000, PC6))"; // TODO ShapeFiles don't support segmented units yet 
			
			attribute<rdc_meter> poly(polygon, PC6_Segm):
				label           = "Postcode 6 gebieden Nederland 2006 obv percelen",
				StorageName     = "%SourceDataProjDir%/hulpbestanden/pc06_vlakken_simplify/PC6gebieden_2006_KAD_simplify.shp",
				StorageReadOnly = "True";
			attribute<String> PostCode(PC6_Segm);
			attribute<String> code(PC6_Segm): Expr = "PostCode";
			attribute<UInt32> len (PC6_Segm): Expr = "strlen(code)";
			
			attribute<String>  code4str(PC6_Segm): Expr = "substr(PostCode,0,4)";
			attribute<PC4_nrs> code4   (PC6_Segm): Expr = "value(code4str, PC4_nrs)";
			attribute<PC4>     PC4_rel (PC6_Segm): Expr = "rlookup(code4, PC4/code)";
		}

		unit<uint32> NL: nrofrows = 1
		{
			attribute<String> Name: Expr = "const('NL', .)";
			
			parameter<String> RegioNaam: Expr = "'NL'";
		}
		
		unit<uint32> Provincie := unique(buurt/PROVNR)
		{
//			attribute<string> name := 'P'+string(Values);
			attribute<string> label := rjoin(values, buurt/PROVNR, buurt/PROVNM);
			
			attribute<String> Name := replace_value(Replace(Label, '-', ''), '', 'Elders');
//			attribute<String> Name: Expr = "Replace(Label, '-', '')";
//			Expr = "'Prov'+String(ID(.))";
///			attribute<String> Label: Expr = "Values";
			
			parameter<String> RegioNaam := 'Provincie';
		}

		unit<uint32> Gemeente := unique(buurt/GEMNR2017)
		{
//			attribute<Int32>  GemNr: Expr = "rjoin(Values, PC4_Gemeente_NL/GEMNM, PC4_Gemeente_NL/GEMNR)";
			attribute<string> name := 'G'+string(Values);
			attribute<string> label := rjoin(values, buurt/GEMNR2017, buurt/GEMNM2017);
			
			parameter<String> RegioNaam := 'Gemeente';
		}

		container CBS {
			unit<uint32> kwb2013:
				StorageName     = "%SourceDataProjDir%/CBS/kwb-2013.csv",
				StorageType     = "gdal.vect",
				StorageReadOnly = "True"
			{
			}
			unit<uint32> kwb2014:
				StorageName     = "%SourceDataProjDir%/CBS/kwb-2014.csv",
				StorageType     = "gdal.vect",
				StorageReadOnly = "True"
			{
			}
			unit<uint32> kwb2015:
				StorageName     = "%SourceDataProjDir%/CBS/kwb-2015.csv",
				StorageType     = "gdal.vect",
				StorageReadOnly = "True"
			{
			}
		}
		
		unit<uint32> buurt:
			StorageName     = "%SourceDataProjDir%/hulpbestanden/buurt/CBS_buurt_2014.dbf",
			DialogData      = "poly",
			DialogType      = "Map",
			StorageReadOnly = "True",
			url             = "%sourceDataProjDir%/hulpbestanden/buurt/CBS wijk- en buurtkaart 2014 - buurten - DataPortaal Explorer_xml.mht"
//			SyncMode        = "None"
		{
			
			attribute<rdc_meter> poly(polygon):
				label           = "De buurtkaart 2014 CBS",
				StorageName     = "%SourceDataProjDir%/hulpbestanden/buurt/CBS_buurt_2014.shp",
				StorageReadOnly = "True";
			
			parameter<Bool> HasBaseGrid: [ false ];
			
			attribute<String> BU_CODE; 
			attribute<string> codeorg := BU_CODE;
			
			attribute<string> codeorgtmp:= substr(codeorg,2,8);
			attribute<Buurt_nrs> code:= codeorgtmp[uint32];
		
			attribute<rdc_meter> Point    := centroid_or_mid(poly);
			attribute<m2>        Area     := Area(poly, m2);
			attribute<km2>       AreaInKm2:= Area / value(1000000, m2 / km2);
			
			attribute<NL>        NL_rel   := const(0[NL],.);
			attribute<Gemeente>  Gemeente_rel  := rlookup(GEMNR2017, Gemeente/Values);
			attribute<Provincie> Provincie_rel := rlookup(PROVNR, provincie/Values);
			
			attribute<Jaar>      BioWKK_Start:= const(2020[jaar], .); // jaar waar vanaf BMC in een planregio is toegestaan. gebruik 9999 of ieder getal hoger dan laatste zichtjaar om geheel te verbieden.
			
			// =========== sociaal economische kenmerken obv laatst bekenden CBS buurtgegevens
			container Eigendom {
				
				// Koopwoningen
				attribute<Percent> p_koopw(..) := MakeDefined(
					rjoin(BU_CODE, CBS/kwb2015/GWB_CODE_10, CBS/kwb2015/p_koopw[Percent])
				,	rjoin(BU_CODE, CBS/kwb2014/GWB_CODE_10, CBS/kwb2014/p_koopw[Percent])
				,	rjoin(BU_CODE, CBS/kwb2013/GWB_CODE_10, CBS/kwb2013/p_koopw[Percent])
				);
				
				// Huurwoningen totaal
				attribute<Percent> p_huurw(..) := MakeDefined(
					rjoin(BU_CODE, CBS/kwb2015/GWB_CODE_10, CBS/kwb2015/p_huurw[Percent])
				,	rjoin(BU_CODE, CBS/kwb2014/GWB_CODE_10, CBS/kwb2014/p_huurw[Percent])
				,	rjoin(BU_CODE, CBS/kwb2013/GWB_CODE_10, CBS/kwb2013/p_huurw[Percent])
				);
				
				// In bezit woningcorporatie
				attribute<Percent> p_wcorpw(..) := MakeDefined(
					rjoin(BU_CODE, CBS/kwb2015/GWB_CODE_10, CBS/kwb2015/p_wcorpw[Percent])
				,	rjoin(BU_CODE, CBS/kwb2014/GWB_CODE_10, CBS/kwb2014/p_wcorpw[Percent])
				,	rjoin(BU_CODE, CBS/kwb2013/GWB_CODE_10, CBS/kwb2013/p_wcorpw[Percent])
				);
				
				// In bezit overige verhuurders
				attribute<Percent> p_ov_hw(..) := MakeDefined(
					rjoin(BU_CODE, CBS/kwb2015/GWB_CODE_10, CBS/kwb2015/p_ov_hw[Percent])
				,	rjoin(BU_CODE, CBS/kwb2014/GWB_CODE_10, CBS/kwb2014/p_ov_hw[Percent])
				,	rjoin(BU_CODE, CBS/kwb2013/GWB_CODE_10, CBS/kwb2013/p_ov_hw[Percent])
				);
				// Eigendom onbekend
				attribute<Percent> p_e_o_w(..) := MakeDefined(
					rjoin(BU_CODE, CBS/kwb2015/GWB_CODE_10, CBS/kwb2015/p_e_o_w[Percent])
				,	rjoin(BU_CODE, CBS/kwb2014/GWB_CODE_10, CBS/kwb2014/p_e_o_w[Percent])
				,	rjoin(BU_CODE, CBS/kwb2013/GWB_CODE_10, CBS/kwb2013/p_e_o_w[Percent])
				);
				attribute<Percent> p_checksum(..) := p_koopw + p_wcorpw + p_ov_hw + p_e_o_w;
			}
			container Inkomen{
				attribute<Percent> p_hh_li(..) := MakeDefined(
					rjoin(BU_CODE, CBS/kwb2015/GWB_CODE_10, CBS/kwb2015/p_hh_li[Percent])
				,	rjoin(BU_CODE, CBS/kwb2014/GWB_CODE_10, CBS/kwb2014/p_hh_li[Percent])
				,	rjoin(BU_CODE, CBS/kwb2013/GWB_CODE_10, CBS/kwb2013/p_hh_li[Percent])
				);
				attribute<Percent> p_hh_hi(..) := MakeDefined(
					rjoin(BU_CODE, CBS/kwb2015/GWB_CODE_10, CBS/kwb2015/p_hh_hi[Percent])
				,	rjoin(BU_CODE, CBS/kwb2014/GWB_CODE_10, CBS/kwb2014/p_hh_hi[Percent])
				,	rjoin(BU_CODE, CBS/kwb2013/GWB_CODE_10, CBS/kwb2013/p_hh_hi[Percent])
				);
				
				attribute<Percent> p_hh_mi(..) := 100[Percent] - (p_hh_li + p_hh_hi);
				
				attribute<Percent> p_checksum(..) := p_hh_li + p_hh_mi + p_hh_hi;
			}
		}

		unit<uint32> PC4_Gemeente_NL:
			StorageName     = "%SourceDataProjDir%/hulpbestanden/gemeenten_2011/GemeenteGrenzen_2011_org_KAD_aggregatie_230812_union_IRIS_PC04_2011_strip.shp",
			StorageType     = "gdal.vect",
			DialogData      = "Geometry",
			DialogType      = "Map",
			StorageReadOnly = "True",
			SyncMode        = "Attr"
		{
			attribute<rdc_meter> Geometry(poly);
			
			attribute<PC4_nrs> PC4;
			attribute<String> PC4Str: Expr = "string(PC4)";
			
			attribute<../PC4> PC4_rel_1: Expr = "rlookup(PC4, ../PC4/code)";
			attribute<../PC4> PC4_rel  : Expr = "max(Shape_area, PC4_rel_1)[PC4_rel_1] == Shape_area ? PC4_rel_1 : value(0 / 0, ../PC4)";
		}

		unit<UInt32> EmptySequenceSetSource := Range(UInt32, 0,0)
		{
			attribute<rdc_meter> Point     := const(Point(0.0, 0.0, rdc_meter), .);
			attribute<.>         SequenceNr:= const(value(0, .), .);
			attribute<UInt32>    Ordinal   := const(value(0, uInt32), .);
		}
	}
	container top100
	{
		unit<uint8>  kleurindex_detail: isHidden = "True", nrofrows = 254, label = "background palette"
		{
			attribute<uint32> palette := Grid/nl_detail/PaletteData, DialogType = "BrushColor";
		}
		container grid
		{
			unit<spoint> nl_detail:
				label       = "background layer",
				StorageName = "%SourceDataProjDir%/tiff/TOPMAP100_2008_KAD.tif",
				DialogData  = "rdc_meter"
			{
				attribute<kleurindex_detail> GridData;
				attribute<uint32> PaletteData(kleurindex_detail): isHidden = "True";
			}
		}
	}
	// Distmatrices are used for potential analyses
	container DistMatrices: isHidden = "True"
	{
		unit<uint32> Dist2Range;
		
		container potrange: isTemplate = "true"
		{
			// ===================== Begin Case Parameters
			parameter<m>       gridsize;
			parameter<m>       radius_max;
			// ===================== End Case Parameters
	
			parameter<Float64> radius:   expr = "radius_max / gridsize";
			unit<spoint>       tmpRange: expr = "range(spoint, point(-int16(radius), -int16(radius)), point(int16(radius) + int16(1), int16(radius) + int16(1)))";
			unit<spoint>       potRange: expr = "tmpRange"
			{
				attribute<Dist2Range> distMatr     : expr = "dist2(point(Int16(0), Int16(0), tmpRange), Dist2Range)";
				attribute<Float64>    DecayedWeight: expr = "iif(distMatr <= uint32(radius * radius), 1.0 / (Float64(distMatr) + 0.08), 0.0)";
				
				attribute<Float32>    Reciprocal : expr = "Float32(scalesum(Sqrt(DecayedWeight), 1.0 ))";
				attribute<Float32>    Cilindrical: expr = "Float32(scalesum(Float64(distMatr <= uint32(radius * radius)), 1.0 ))";
			}
		}
		
		Container CaseData
		{
			container pot1000m:  expr = "potrange(value(100, m), value( 1000, m))";
			container pot5000m:  expr = "potrange(value(100, m), value( 5000, m))";
			container pot10000m: expr = "potrange(value(100, m), value(10000, m))";
		}
		unit<spoint> pot1000mRange:  expr = "CaseData/pot1000m/potrange";
		unit<spoint> pot5000mRange:  expr = "CaseData/pot5000m/potrange";
		unit<spoint> pot10000mRange: expr = "CaseData/pot10000m/potrange";
	}
}