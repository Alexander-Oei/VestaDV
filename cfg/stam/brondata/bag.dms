//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2011                                       //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                               FEBRUARI 2010                                          //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door brondata/referentie.dms                   //
//                                                                                      //
//       In deze configuratiefile wordt een shapshot uit de BAG geconfigureerd          //
//       die gebruikt wordt voor de bebouwingscomponenten                               //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container BAG
{
	parameter<units/Yr> SnapShotYear:= 2015[units/Yr];
	parameter<string>   SnapShotDate:= '20160101';
	parameter<string>   SourceDir   : = '%SourceDataProjDir%/BAG/' + SnapShotDate;

	container typeringen
	{
		unit<uint8> gebruiksdoel: nrofrows = 11
		{
			attribute<string> label:
			[
				'bijeenkomstfunctie','celfunctie','gezondheidszorgfunctie','industriefunctie','kantoorfunctie','logiesfunctie'
				,'onderwijsfunctie','overige gebruiksfunctie','sportfunctie','winkelfunctie','woonfunctie'
			];
			attribute<uint32> BrushColor: 
			[
				 rgb(230,204,255), rgb(100,100,100), rgb(150,  0,  0), rgb(100,100,100),rgb(179, 51,255),rgb(200,200,  0)
				,rgb(  0,  0,200), rgb(200,200,200), rgb(  0,255,  0), rgb(  0,128,  0),rgb(255,100,100)
			]
			,	DialogType = "BrushColor";
			attribute<uint32> PenColor := BrushColor, DialogType = "PenColor";
			attribute<string> name     := replace(label,' ','_', 'functie','');
			attribute<uint16> BitValuePow := uint16(round(2.0 ^ float64(id(.))));

			attribute<string> BitValueAttExpr:='const(uint16(1),gebruiksdoel)' + repeat(' * uint16(2)',uint32(id(gebruiksdoel)));
			attribute<uint16> BitValueArr:= = BitValueAttExpr;

			parameter<string> BitValueParamExpr := =AsList('string(1' + repeat(' * 2', uint32(id(gebruiksdoel))) +')','+ '','' + ');
			attribute<uint16> BitValue:= 
				ReadArray(
					 BitValueParamExpr
					,gebruiksdoel
					,uint16
					,0
				);
		}
	}

	container import
	{
		unit<uint32> vbo: DialogType = "Map", DialogData = "geometry"
		,	StorageName     = "= SourceDir + '/vbo.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<geography/rdc_mm> geometry_mm;
			attribute<string> identificatie;
			attribute<string> pand_id_geom;
			attribute<string> nummeraanduiding_id;
			attribute<int32>  Oppervlakte;
			
			// backward compatibility
			attribute<geography/rdc_meter_f32> geometry := geometry_mm[geography/rdc_meter_f32];
			attribute<string> VBO_ID  := identificatie;
			attribute<string> PAND_ID := pand_id_geom;
			attribute<string> H_ADRES := nummeraanduiding_id;

			attribute<Units/m2> OPPERVLAK_GECORRIGEERD :=
				(Oppervlakte = int32(1) || Oppervlakte = int32(999999) || Oppervlakte = int32(99999) || Oppervlakte = int32(9999) || (Oppervlakte > int32(10000) && bouwlagen_fictief > float32(10)))
					? (0 / 0)[Units/m2]
					: Oppervlakte[Units/m2]
			,	FreeData = "False"
			,	Descr = 
					"Correctie van oppervlaktes deels op basis van document: http://www.cbs.nl/nl-NL/menu/themas/bouwen-wonen/methoden/dataverzameling/korte-onderzoeksbeschrijvingen/2015-kenmerken-woningen-kob.htm"
					"Aanvulling van OV op oppervlakte in relatie tot pand footprint (verdacht groot) en op 99999";

			container gebruiksdoelen :=
				for_each_ndv(
					typeringen/gebruiksdoel/name
					, vbo
					, bool
				);
			parameter<string> gebruiksdoelcombinatie_expr:= AsList(string(typeringen/gebruiksdoel/BitValue)+ 'w * uint16(gebruiksdoelen/' + typeringen/gebruiksdoel/name + ')',' + ');
			attribute<uint16> gebruiksdoelcombinatie     := =gebruiksdoelcombinatie_expr;

			// some simple derivations for filtering unreliably large vbo's
			attribute<pand>            pand_rel            := rlookup(PAND_ID, pand/PAND_ID);
			attribute<vbo_oppervlakte> vbo_oppervlakte_rel := rlookup(Oppervlakte,vbo_oppervlakte/values);
			attribute<units/m2>        footprint           := pand/footprint[pand_rel];
			attribute<float32>         bouwlagen_fictief   := pand/bouwlagen_fictief[pand_rel];

// 			attribute<float32> OPPERVLAK_f := float32(Oppervlakte);
// 			attribute<float32> OPPERVLAK_MAX_1000 := min_elem(OPPERVLAK_f, 1000f);
// 			attribute<float32> OPPERVLAK_MAX_10bf := OPPERVLAK_f * min_elem(bouwlagen_fictief, 10f) / bouwlagen_fictief;
// 			attribute<float32> OPPERVLAK_MAX_MAX := min_elem(OPPERVLAK_MAX_10bf, 1000f);
		}

		unit<uint32> vbo_oppervlakte:= unique(vbo/Oppervlakte)
		{
			attribute<uint32>  aantal            := pcount(vbo/vbo_oppervlakte_rel);
			attribute<float32> bouwlagen_fictief := first(vbo/bouwlagen_fictief,vbo/vbo_oppervlakte_rel);
			attribute<m2>      footprint         := first(vbo/footprint,vbo/vbo_oppervlakte_rel);
		}

		unit<uint32> pand: DialogType = "Map", DialogData = "geometry"
		,	StorageName     = "= SourceDir + '/pand.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<geography/rdc_mm> geometry_mm(poly);
			attribute<string> identificatie;
			
			// backward compatibility
			attribute<geography/rdc_meter_f32> geometry(poly) := geometry_mm[geography/rdc_meter_f32];
			attribute<string>   PAND_ID := identificatie;
			attribute<uint16>   BOUWJAAR;
			attribute<units/Yr> BOUWJAAR_GECORRIGEERD :=
				(BOUWJAAR <= 1000w || BOUWJAAR[units/Yr] > SnapShotYear)
					? (0 / 0)[Units/Yr]
					: BOUWJAAR[Units/Yr]
			,	Descr= "Correctie van bouwjaren op basis van document"
			,	url = "http://www.cbs.nl/nl-NL/menu/themas/bouwen-wonen/methoden/dataverzameling/korte-onderzoeksbeschrijvingen/2015-kenmerken-woningen-kob.htm";

			attribute<uint8>                         NR_VERDIEPINGEN;
			attribute<classifications/WoningtypeGeo> WOONPAND_TYPE;

			// some simple derivations for filtering unreliably large vbo's
			attribute<units/m2> footprint         := area(geometry, float32(m2))[units/m2], FreeData = "Fase";
			attribute<units/m2> vbo_oppervlak     := sum(vbo/Oppervlakte, vbo/pand_rel)[units/m2], FreeData = "Fase";
			attribute<float32>  bouwlagen_fictief := float32(vbo_oppervlak / footprint);
		}
		
		unit<uint32> pand_bouwjaren:= unique(pand/BOUWJAAR)
		{
			attribute<uint32> aantal := pcount(rlookup(pand/BOUWJAAR, values));
		}


		unit<uint32> nummeraanduiding
		:	StorageName     = "= SourceDir + '/nummeraanduiding.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<string> identificatie;
			attribute<string> openbareruimte_id;
			attribute<int32>  huisnummer;
			attribute<string> huisletter;
			attribute<string> toevoeging;
			attribute<string> postcode;

			attribute<string> toev:= MakeDefined(huisletter,'') + MakeDefined(toevoeging,'');
			attribute<string> adres_key :=
				postcode + '_' + string(huisnummer) + 
				(strlen(toev) >0 
					? '_' + toev
					: ''
				);
			attribute<Classifications/energielabel> energielabel_rel:= rjoin(adres_key, EnergieLabelData/values, EnergieLabelData/energielabel_rel);
		}
		unit<uint32> openbareruimte
		:	StorageName     = "= SourceDir + '/openbareruimte.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<string> identificatie;
			attribute<string> naam;
		}
	}

	unit<uint32> vbo_woonfunctie := Subset(
			import/vbo/gebruiksdoelen/woon
		&&	IsDefined(import/vbo/pand_rel)
		&&	import/vbo/OPPERVLAK_GECORRIGEERD >= 10[Units/m2]
		&&	import/vbo/OPPERVLAK_GECORRIGEERD < 1000[Units/m2]
		)
	,	DialogType = "Map"
	,	DialogData = "locatie"
	,	FreeData = "False", KeepData = "True"
	{
		attribute<string>                                id                      := import/vbo/VBO_ID[nr_OrgEntity];
		attribute<string>                                Label                   := rjoin(import/vbo/H_ADRES[nr_OrgEntity], import/nummeraanduiding/identificatie, import/nummeraanduiding/adres_key);

		attribute<rdc_meter>                             locatie                 := value(import/vbo/geometry[nr_OrgEntity],rdc_meter);
		attribute<string>                                postcode                := rjoin(import/vbo/H_ADRES[nr_OrgEntity], import/nummeraanduiding/identificatie, import/nummeraanduiding/postcode);
		attribute<Classifications/energielabel>          energielabel_rel        := rjoin(import/vbo/H_ADRES[nr_OrgEntity], import/nummeraanduiding/identificatie, import/nummeraanduiding/energielabel_rel);

		attribute<Units/m2>                              oppervlakte             := import/vbo/OPPERVLAK_GECORRIGEERD[nr_OrgEntity];
		attribute<string>                                pand_id                 := import/vbo/PAND_ID[nr_OrgEntity];

		attribute<units/Yr>                              bouwjaar                := rjoin(pand_id, import/pand/PAND_ID, import/pand/BOUWJAAR_GECORRIGEERD);
		attribute<Classifications/BouwjaarBag>           BouwjaarBag_rel         := isNull(bouwjaar) ? Classifications/BouwjaarBag/onbekend : classify(bouwjaar,Classifications/BouwjaarBag/ClassBreak);

		attribute<classifications/WoningtypeGeo>         WoningtypeGeo_rel       := rjoin(pand_id, import/pand/PAND_ID, import/pand/WOONPAND_TYPE);
		
		attribute<classifications/WoningtypeGeoHoogte>   WoningtypeGeoHoogte_rel :=
			(WoningtypeGeo_rel == classifications/WoningtypeGeo/V/meergezinspand && nr_verdiepingen > uint8(4))
				? classifications/WoningtypeGeoHoogte/V/meergezinspand_hoog
				: WoningtypeGeo_rel[classifications/WoningtypeGeoHoogte]
		;

		attribute<uInt8>                                 nr_verdiepingen         := rjoin(pand_id, import/pand/PAND_ID, import/pand/nr_verdiepingen);

		attribute<Float64>                               x                       := PointCol(locatie);
		attribute<Float64>                               y                       := PointRow(locatie);

		parameter<uint32>                                 Aantal_Meergezings_Verdiepingen_Onbekend:=
			sum(WoningtypeGeo_rel == classifications/WoningtypeGeo/V/meergezinspand && isNull(nr_verdiepingen) ? 1 : 0);

	}

	unit<uint32> vbo_utiliteit:= Subset
		(
			!import/vbo/gebruiksdoelen/woon 
		&&	IsDefined(import/vbo/pand_rel)
		&&	isDefined(import/vbo/OPPERVLAK_GECORRIGEERD)
	//	&&	!import/vbo/gebruiksdoelen/Industrie    // Deze regel aanzetten als in Utiliteit alle industrie niet meedoet (dus ook alle vbo die industrie in combinatie met een andere gebruikdoel hebben)
		&&	import/vbo/gebruiksdoelcombinatie <> 8w // Deze regel aanzetten als in Utiliteit vbo's niet meedoen die alleen een industriefunctie hebben.
		)
	,	DialogType = "Map"
	,	DialogData = "locatie"
	{
		attribute<string>                                id                      := import/vbo/VBO_ID[nr_OrgEntity];
		attribute<string>                                Label                   := rjoin(import/vbo/H_ADRES[nr_OrgEntity], import/nummeraanduiding/identificatie, import/nummeraanduiding/adres_key);

		attribute<rdc_meter>                             locatie                 := value(import/vbo/geometry[nr_OrgEntity],rdc_meter);
		attribute<string>                                postcode                := rjoin(import/vbo/H_ADRES[nr_OrgEntity], import/nummeraanduiding/identificatie, import/nummeraanduiding/postcode);

		attribute<Units/m2>                              oppervlakte             := import/vbo/OPPERVLAK_GECORRIGEERD[nr_OrgEntity];  // let op: hier zit al een model achter.
		attribute<string>                                pand_id                 := import/vbo/PAND_ID[nr_OrgEntity];

		attribute<units/Yr>                              bouwjaar                := rjoin(pand_id, import/pand/PAND_ID, import/pand/BOUWJAAR_GECORRIGEERD);
		attribute<Classifications/BouwjaarUtilBag>       BouwjaarUtilBag_rel     := isNull(bouwjaar) ? Classifications/BouwjaarUtilBag/onbekend :classify(bouwjaar,Classifications/BouwjaarUtilBag/ClassBreak);

		attribute<Float64>                               x                       := PointCol(locatie);
		attribute<Float64>                               y                       := PointRow(locatie);

		container gebruiksdoelen :=
			for_each_nedv(
				Classifications/utiliteitBAG/name
				,'import/vbo/gebruiksdoelen/' + Classifications/utiliteitBAG/name + '[Nr_OrgEntity]'
				, vbo_utiliteit
				, bool
			);

		container gebruiksdoel_impl // op basis van de gemiddeld grootste utiliteit
		{
			container Oppervlaktes_gemiddeld_per_vbo :=
				for_each_nedv(
					Classifications/utiliteitBAG/name
					,'MakeDefined(sum(gebruiksdoelen/' + Classifications/utiliteitBAG/name + ' ? oppervlakte[m2] : 0 [m2]) / sum(float64(gebruiksdoelen/' + Classifications/utiliteitBAG/name + ')), 0[m2])' 
					, void
					, m2
				);
				
			attribute<m2> oppervlakte_gemiddeld_per_vbo(Classifications/utiliteitBAG):= ='union_data(Classifications/utiliteitBAG, '+  AsItemList('Oppervlaktes_gemiddeld_per_vbo/' + Classifications/utiliteitBAG/name) + ')';

			attribute<uint8> gebruiksdoel_index_calc(Classifications/utiliteitBAG) := index(-oppervlakte_gemiddeld_per_vbo) // 0: index van hoogste oppervlakte, 1: index van een na hoogste oppervlakte, etc.
			{
				attribute<string> name(Classifications/utiliteitBAG) := Classifications/utiliteitBAG/name[gebruiksdoel_index];
			}

			attribute<uint8> gebruiksdoel_index(Classifications/utiliteitBAG):// 0: index van hoogste oppervlakte, 1: index van een na hoogste oppervlakte, etc. Berekende index is losgekoppeld
				[9,4,5,7,2,0,6,1,3,8];
			attribute<string> name(Classifications/utiliteitBAG) := Classifications/utiliteitBAG/name[gebruiksdoel_index];
		}
		attribute<Classifications/utiliteitBAG> gebruiksdoel(vbo_utiliteit):= ='gebruiksdoel_impl/gebruiksdoel_index[argmax('+ AsItemList('gebruiksdoelen/' + gebruiksdoel_impl/name) + ')[Classifications/utiliteitBAG]]';
	}

	unit<uint32> gebruiksdoelcombinatie:= unique(import/vbo/gebruiksdoelcombinatie)
	{
		attribute<string>   Label := =AsList('(bitand(Values, uint16('+string(typeringen/gebruiksdoel/BitValue)+')) != 0w ? '''+typeringen/gebruiksdoel/Name+'''+''_'' : '''')','+');
		attribute<uint32>   count := pcount(rlookup(import/vbo/gebruiksdoelcombinatie, values));
		attribute<units/m2> oppervlakte := sum(import/vbo/OPPERVLAK_GECORRIGEERD ,rlookup(import/vbo/gebruiksdoelcombinatie, values));
	}
}
