//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Bebouwing
{
	container BestaandeWoning :=
		model/CalculationSchemes/EnergieKengetallenImport(
			'20160707_Woningen_BAG.csv', 
			'WoningType_str', 
			Classifications/WoningtypeBestaand, Classifications/BouwjaarWoningBestaand, Units/nrWoningen, Units/nrWoningen
		)
	{
		container results
		{
			container Verbeteringen
			{
				container S_H_T  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'A');
				container S_H_B  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'B');
				container S_H_AP := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
				container S_T_B  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_T/verbruik, S_H_T/Comfort_verbetering_tov_h, 'D');
				container S_T_AP := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_T/verbruik, S_H_T/Comfort_verbetering_tov_h, 'E');
				container S_B_AP := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_B/verbruik, S_H_B/Comfort_verbetering_tov_h, 'F');
			}
		}
	}
	container NieuwbouwWoning :=
		model/CalculationSchemes/EnergieKengetallenImport(
			'20160525_Woningen_Nieuwbouw_BAG.csv',
			'WoningType_str',
			Classifications/WoningtypeNieuwbouw, Classifications/BouwJaar, Units/nrWoningen, Units/nrWoningen
		)
	{
		container results {
			container Verbeteringen
			{
				container S_X_X  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

				container S_H_T  := S_X_X;
				container S_H_B  := S_X_X;
				container S_H_AP := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
				container S_T_B  := S_X_X;
				container S_T_AP := S_X_X;
				container S_B_AP := S_H_AP;
			}
		}
	}
	container BestaandeUtil :=
		model/CalculationSchemes/EnergieKengetallenImport(
			'20160706_Utiliteiten_BAG.csv',
			'UtiliteitType_str', 
			Classifications/UtilTypeBestaand,Classifications/BouwjaarUtilBestaand,  Units/m2, Units/m2
		)
	{
		container results {
			container Verbeteringen
			{
				container S_X_X  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

				container S_H_T  := S_X_X;
				container S_H_B  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'B');
				container S_H_AP := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
				container S_T_B  := S_X_X;
				container S_T_AP := S_X_X;
				container S_B_AP := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_B/verbruik, S_H_B/Comfort_verbetering_tov_h, 'F');
			}
		}
	}
	container NieuwbouwUtil :=
		model/CalculationSchemes/EnergieKengetallenImport(
			'20160525_Utiliteiten_Nieuwbouw_BAG.csv',
			'UtiliteitType_str', 
			Classifications/UtilTypeNieuwbouw, Classifications/BouwJaar,  Units/m2, Units/m2
		)
	{
		container results {
			container Verbeteringen
			{
				container S_X_X  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

				container S_H_T  := S_X_X;
				container S_H_B  := S_X_X;
				container S_H_AP := S_X_X;
				container S_T_B  := S_X_X;
				container S_T_AP := S_X_X;
				container S_B_AP := S_X_X;
			}
		}
	}
	container BestaandeGlTb :=
		model/CalculationSchemes/EnergieKengetallenImport(
			'20160706_Glastuinbouw_BAG.csv', 
			'UtiliteitType_str',
			Classifications/GlTb, Classifications/bouwjaar, Units/m2, Units/m2
		)
	{
		container results {
			container Verbeteringen
			{
				container S_X_X  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

				container S_H_T  := S_X_X;
				container S_H_B  := S_X_X;
				container S_H_AP := S_X_X;
				container S_T_B  := S_X_X;
				container S_T_AP := S_X_X;
				container S_B_AP := S_X_X;
			}
		}
	}
	container NieuwbouwGlTb :=
		model/CalculationSchemes/EnergieKengetallenImport(
			'20160525_Glastuinbouw_Nieuwbouw_BAG.csv',
			'UtiliteitType_str',
			Classifications/GlTb, classifications/bouwjaar, Units/m2, Units/m2
		)
	{
		container results {
			container Verbeteringen
			{
				container S_X_X  := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

				container S_H_T  := S_X_X;
				container S_H_B  := S_X_X;
				container S_H_AP := S_X_X;
				container S_T_B  := S_X_X;
				container S_T_AP := S_X_X;
				container S_B_AP := S_X_X;
			}
		}
	}
	Template GebouwTempl
	{
		unit<uint32>                 ModelObject;
		unit<float64>                GJ_yr_per_Eenheid;
		unit<float64>                Eur_per_eenheid;
		attribute<GJ_yr_per_Eenheid> verbruik_prev(ModelObject); // alleen ruimteverwarming
		attribute<GJ_yr_per_Eenheid> comfort_prev (ModelObject);
		parameter<string>            VerbeterCode;

		// =================== ReboundFactor
		// verbetering van 100 kuub-> 85 kuub met een ReboundFactor van x 
		// geeft een besparing van 15 kuub en 
		// een comfortverbetering ter waarde van 15 kuub * ( 1/ (1-x) - 1); 
		// totaal voordeel is dus 15 kuub  / (1-x).
		// waarvan fractie x de comfortverbetering die gelijk gesteld is aan de Rebound en 
		// fractie (1-x) de feitelijke besparing is.
		attribute<Ratio> ReboundFactor_stap(ModelObject) :=
			=(VerbeterCode!='X') 
				? 'MakeDefined(table/RB_FAC_'+VerbeterCode+'[Ratio], 0.0[Ratio])' 
				: 'const(0 / 0, ModelObject, Ratio)';

		// de volgende kenmerken betreffen ook aleen RuimteVerwarming
		attribute<GJ_yr_per_Eenheid> verbruik(ModelObject) := 
			=(VerbeterCode!='X') 
				? 'MakeDefined(table/MV'+VerbeterCode+'_EG[GJ_yr_per_Eenheid], Functioneel/Ruimteverwarming)' 
				: 'const(0 / 0, ModelObject, GJ_yr_per_Eenheid)';

		attribute<GJ_yr_per_Eenheid> energie_verbetering_stap  (ModelObject) := verbruik - verbruik_prev;
		attribute<GJ_yr_per_Eenheid> totale_verbetering_stap   (ModelObject) := energie_verbetering_stap / (1.0 - ReboundFactor_stap);
		attribute<GJ_yr_per_Eenheid> comfort_verbetering_stap  (ModelObject) := totale_verbetering_stap - energie_verbetering_stap;

		attribute<Ratio>             efficiency                (ModelObject) := Functioneel/Ruimteverwarming / verbruik;
		attribute<Ratio>             ComfortFactor_stap        (ModelObject) := 1.0 / (1.0 - ReboundFactor_stap) - 1.0;

		attribute<GJ_yr_per_Eenheid> energie_verbetering_tov_h (ModelObject) :=  Functioneel/Ruimteverwarming - verbruik;
		attribute<GJ_yr_per_Eenheid> comfort_verbetering_tov_h (ModelObject) :=  comfort_prev + comfort_verbetering_stap;
		attribute<GJ_yr_per_Eenheid> totale_verbetering_tov_h  (ModelObject) :=  energie_verbetering_tov_h + comfort_verbetering_tov_h;

		attribute<Eur_per_eenheid> kosten_min (ModelObject) :=
			=(VerbeterCode!='X')
				? 'MakeDefined(table/MV'+VerbeterCode+'_EG_Eur_MIN[Eur_per_eenheid], 0.0[Eur_per_eenheid])'
				: 'const(0 / 0, ModelObject, Eur_per_eenheid)';
		attribute<Eur_per_eenheid> kosten_max (ModelObject) :=
			=(VerbeterCode!='X')
				? 'MakeDefined(table/MV'+VerbeterCode+'_EG_Eur_MAX[Eur_per_eenheid], 0.0[Eur_per_eenheid])'
				: 'const(0 / 0, ModelObject, Eur_per_eenheid)';
	}
}
