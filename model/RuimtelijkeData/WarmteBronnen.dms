//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile wordt de brondata voor de Warmtebronnen geconfigureerd//
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container WarmteBronnen
{
	container MetaData := Kengetallen/WarmteBronnen/MetaData;
	
	container RestWarmte: Descr = "zie FO $3.3", FreeData = "False"
	{
		// inlezen bestand voor bekende puntbronnen geschikt voor warmtelevering
		unit<uint32> bron
		:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/20180724_puntbronnen.dbf"
		,	StorageReadOnly = "True"
		,	DialogType      = "Map"
		,	DialogData      = "P"
		,	Source          = "%sourceDataProjDir%/aanbod/puntbronnen/20180724_metadata_puntbronnen.txt"
		{
			attribute<rdc_meter> P: StorageName = "%sourceDataProjDir%/aanbod/puntbronnen/20180724_puntbronnen.shp", StorageReadOnly = "True";
			attribute<string>    Naam;

			attribute<string>                Type;
			attribute<MetaData/TypeInfo>     TypeInfo_rel     := rlookup(Type, MetaData/TypeInfo/Type);
			attribute<MetaData/TypeInfoList> TypeInfoList_rel := MetaData/TypeInfo/TypeInfoList_rel[TypeInfo_rel];

			attribute<yr_uint16> ingebruik;
			attribute<yr_uint16> uitgebruik;

			attribute<MW>      MWth_max;
			attribute<MW>      MWth_min  := value(MetaData/TypeInfo/MWth_min[TypeInfo_rel],MW);
			attribute<Eur_kW>  Ki_kW_min := value(MetaData/TypeInfo/Ki_kW_min[TypeInfo_rel], Eur / kW);
			attribute<Eur_kW>  Ki_kW_max := value(MetaData/TypeInfo/Ki_kW_max[TypeInfo_rel], Eur / kW);
			
			attribute<_yr>  Rj_Onderhoud := value(MetaData/TypeInfo/JaarKosten[ TypeInfo_rel ], _yr);
			attribute<Eur_GJ>  K_GJ10    :=       MetaData/TypeInfo/K_GJ10[TypeInfo_rel];
			attribute<Eur_GJ>  K_GJ20    :=       MetaData/TypeInfo/K_GJ20[TypeInfo_rel];
			attribute<Eur_GJ>  K_GJ30    :=       MetaData/TypeInfo/K_GJ30[TypeInfo_rel];
			attribute<Eur_GJ>  K_GJ40    :=       MetaData/TypeInfo/K_GJ40[TypeInfo_rel];
			attribute<Eur_GJ>  K_GJ50    :=       MetaData/TypeInfo/K_GJ50[TypeInfo_rel];
			attribute<kg_GJ>   CO2_2010  := value(MetaData/TypeInfo/CO2_2010[TypeInfo_rel],KG_GJ);
			attribute<kg_GJ>   CO2_2020  := value(MetaData/TypeInfo/CO2_2020[TypeInfo_rel],KG_GJ);
			attribute<kg_GJ>   CO2_2030  := value(MetaData/TypeInfo/CO2_2030[TypeInfo_rel],KG_GJ);
			attribute<kg_GJ>   CO2_2040  := value(MetaData/TypeInfo/CO2_2040[TypeInfo_rel],KG_GJ);
			attribute<kg_GJ>   CO2_2050  := value(MetaData/TypeInfo/CO2_2050[TypeInfo_rel],KG_GJ);
			attribute< g_GJ>   NOx_2010  := value(MetaData/TypeInfo/NOx_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2020  := value(MetaData/TypeInfo/NOx_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2030  := value(MetaData/TypeInfo/NOx_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2040  := value(MetaData/TypeInfo/NOx_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2050  := value(MetaData/TypeInfo/NOx_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2010  := value(MetaData/TypeInfo/SO2_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2020  := value(MetaData/TypeInfo/SO2_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2030  := value(MetaData/TypeInfo/SO2_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2040  := value(MetaData/TypeInfo/SO2_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2050  := value(MetaData/TypeInfo/SO2_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2010  := value(MetaData/TypeInfo/VOS_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2020  := value(MetaData/TypeInfo/VOS_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2030  := value(MetaData/TypeInfo/VOS_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2040  := value(MetaData/TypeInfo/VOS_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2050  := value(MetaData/TypeInfo/VOS_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2010   := value(MetaData/TypeInfo/TS_2010 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2020   := value(MetaData/TypeInfo/TS_2020 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2030   := value(MetaData/TypeInfo/TS_2030 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2040   := value(MetaData/TypeInfo/TS_2040 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2050   := value(MetaData/TypeInfo/TS_2050 [TypeInfo_rel],g_GJ );
			attribute<string>  Eigenaar;
			attribute<string>  Brandstof;

			// aspects
			attribute<string>  Label           := Naam,                            DialogType = "LabelText";
			attribute<float64> SymbolWorldSize := sqrt(MWth_max * 100000[1 / MW]), DialogType = "SymbolWorldSize";
			parameter<int16>   SymbolIndex     := 44s,                             DialogType = "SymbolIndex";
		}

		template BronSelectie: IsHidden = "True"
		{
			parameter<units/yr_uint16> Jaar;
			unit<uint32> WarmteBronnen := Bron;

			unit<uint32> BronElementen := SubSet(WarmteBronnen/ingebruik <= Jaar && (WarmteBronnen/uitgebruik == 0w || WarmteBronnen/uitgebruik > Jaar))
			{
//				attribute<WarmteBronnen> WarmteBron_rel := nr_OrgEntity;

				attribute<units/yr_uint16>       ingebruik        := WarmteBronnen/ingebruik[nr_OrgEntity];
				attribute<string>                Label            := WarmteBronnen/Label[nr_OrgEntity], DialogType = "LabelText";
				attribute<MetaData/TypeInfoList> TypeInfoList_rel := WarmteBronnen/TypeInfoList_rel[nr_OrgEntity];
				attribute<rdc_meter>             point            := WarmteBronnen/P[nr_OrgEntity];

				attribute<MW>                    MWTh_min         := WarmteBronnen/MWth_min[nr_OrgEntity];
				attribute<Eur_kW>                Ki_kW_min        := WarmteBronnen/Ki_kW_min[nr_OrgEntity];
				attribute<Eur_kW>                Ki_kW_max        := WarmteBronnen/Ki_kW_max[nr_OrgEntity];
				attribute<_yr>                   Rj_Onderhoud     := WarmteBronnen/Rj_Onderhoud[nr_OrgEntity];
				attribute<MW>                    MWth_max         := WarmteBronnen/MWth_max[nr_OrgEntity];
				attribute<Eur_GJ>                K_GJ             :=
					(Jaar < 2020[units/yr_uint16] ? WarmteBronnen/K_GJ10 :
					 Jaar < 2030[units/yr_uint16] ? WarmteBronnen/K_GJ20 :
					 Jaar < 2040[units/yr_uint16] ? WarmteBronnen/K_GJ30 :
					 Jaar < 2050[units/yr_uint16] ? WarmteBronnen/K_GJ40 :
					 WarmteBronnen/K_GJ50)[nr_OrgEntity];

				attribute<KG_GJ> CO2_GJ := ='WarmteBronnen/CO2_'+string(Jaar)+'[nr_OrgEntity]';
				attribute<G_GJ>  NOx_GJ := ='WarmteBronnen/NOx_'+string(Jaar)+'[nr_OrgEntity]';
				attribute<G_GJ>  SO2_GJ := ='WarmteBronnen/SO2_'+string(Jaar)+'[nr_OrgEntity]';
				attribute<G_GJ>  VOS_GJ := ='WarmteBronnen/VOS_'+string(Jaar)+'[nr_OrgEntity]';
				attribute<G_GJ>  TS_GJ  := ='WarmteBronnen/TS_' +string(Jaar)+'[nr_OrgEntity]';
			}

			unit<uint32> Bronnen := unique(BronElementen/point)
			,	DialogType = "Map"
			,	DialogData = "point"
			{
				attribute<string>                Label                             := AsItemList(BronElementen/Label, per_BronElementen), DialogType = "LabelText";

				attribute<.>                     per_BronElementen (BronElementen) := rlookup(BronElementen/point, Values);
				attribute<MetaData/TypeInfoList> TypeInfoList_rel                  := modus_weighted(BronElementen/TypeInfoList_rel, BronElementen/MWth_max, per_BronElementen);

				attribute<rdc_meter>             point        := Values;
				attribute<Eur_kW>                Ki_kW_min    := sum(BronElementen/Ki_kW_min    * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<Eur_kW>                Ki_kW_max    := sum(BronElementen/Ki_kW_max    * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<MW>                    MWth_max     := sum(BronElementen/MWth_max, per_BronElementen);
				attribute<MW>                    MWth_min     := sum(BronElementen/MWth_min, per_BronElementen);
				attribute<_yr>                   Rj_Onderhoud := sum(BronElementen/Rj_Onderhoud * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<Eur_GJ>                K_GJ         := sum(BronElementen/K_GJ         * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<KG_GJ >                CO2_GJ       := sum(BronElementen/CO2_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 NOx_GJ       := sum(BronElementen/NOx_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 SO2_GJ       := sum(BronElementen/SO2_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 VOS_GJ       := sum(BronElementen/VOS_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 TS_GJ        := sum(BronElementen/TS_GJ        * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<m>                     cumulDist    := const(0[m], .);
				attribute<MW>                    cumulP       := const(0[MW], .);
				attribute<Bronnen>               Bronnen_rel  := id(.);
			}
		}
		// Vooralsnog per zichtjaar, zou ook per rekenstap kunnnen.
		container BronSelecties := for_each_ne(Classifications/zichtjaar/name, 'BronSelectie('+string(Classifications/zichtjaar/Jaar)+'[units/yr_uint16])');
	}

	container GeoThermie: Descr = "zie FO $3.4"
	{
		container import
		{
			unit<uint32> ContourSet:
				StorageName      = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.dbf",
				StorageReadOnly = "True",
				url             = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.txt",
				DialogType      = "Map",
				DialogData      = "geometry"
			{
				attribute<rdc_meter> geometry (poly): StorageName = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.shp", StorageReadOnly = "True";
				attribute<int32>     id;
			}
		}

		unit<uint32> ContourSet := subset(import/ContourSet/id != 0i), FreeData = "False"
		{
			attribute<rdc_meter>  geometry (poly)                     := import/ContourSet/geometry[nr_OrgEntity];
			attribute<ContourSet> Grid     (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100), FreeData = "True";

			unit<uint32> PointSet := subset(IsDefined(Grid)), FreeData = "False"
			{
				attribute<rdc_meter> point := rdc_grids/m100/point[nr_OrgEntity];
			}
		}
	}
	container WKO: Descr = "zie FO $3.4"
	{
		unit<uint32> ContourSet:
			StorageName     = "%sourceDataProjDir%/Aanbod/WKO/20180802_WKO_potentiecontour.dbf",
			StorageReadOnly = "True",
			url             = "%sourceDataProjDir%/Aanbod/WKO/20180802_metadata_wko_contour.txt",
			DialogType      = "Map",
			DialogData      = "geometry"
		{
			attribute<rdc_meter> geometry(poly) : StorageName = "%sourceDataProjDir%/Aanbod/WKO/20180802_WKO_potentiecontour.shp", StorageReadOnly = "True";
			attribute<string>    WKO;
			attribute<Bool>      Geschikt := WKO == 'geschikt' || WKO == 'zeer geschikt';
		}

		unit<uint32> GeschikteContour := subset(ContourSet/Geschikt), FreeData = "False"
		{
			container impl : FreeData = "True", IsHidden = "True"
			{
				attribute<rdc_meter> geometry  (poly, GeschikteContour) := ContourSet/geometry[nr_OrgEntity];
			}
			attribute<ContourSet> Grid (Geography/rdc_grids/m100) := poly2grid(impl/geometry, Geography/rdc_grids/m100), FreeData = "False";
		}
	}
	container LtWarmte: Source = "SN82_Functioneel ontwerp LT-warmtenetten_CPT_2018-10-3.docx"
	{
		unit<uint32> Categorie: nrofrows = 12 // source is 5N82 Functioneel Ontwerp LT-warmtenetten_CPT_2018-10-3.docx Tabel 16
		{
			attribute<string> code : [
				'Middelgrote industrie (bedrijventerreinen)'
			,	'RWZI'
			,	'KoelVries'
			,	'Bakkerij'
			,	'Wasserij'
			,	'Diervoeder'
			,	'Levensmiddelen'
			,	'Slachthuis'
			,	'Datacenter'
			,	'IJsbaan'
			,	'Supermarkt'
			,	'Glastuinbouw'
			];
			
			attribute<string> Label : [
				'Middelgrote industrie (bedrijventerreinen)'
			,	'RWZI'
			,	'KoelVries'
			,	'Bakkerij'
			,	'Wasserij'
			,	'Diervoeder'
			,	'Levensmiddelen'
			,	'Slachthuis'
			,	'Datacenter'
			,	'IJsbaan'
			,	'Supermarkt'
			,	'Glastuinbouw'
			];
			attribute<bool> levert_koude := const(false, .);				
			attribute<bool> vraagt_koude_koude : [
				true, false, true, false, false, false, true, true, true, true, true, false
			];
			attribute<MW>		MWth_max	: [0, 11, 2, 0, 2, 5, 24, 3, 13, 0, 0, 0],			Descr = "Maximale capaciteit waarvoor de bron kan worden ingezet";
			attribute<Float64>	bron_vol	:= const(0.70, .),									Descr = "Aandeel op secundair netvolume dat de bron voor rekening kan nemen";
			attribute<Float64>	bron_cap	:= const(0.30, .),									Descr = "Aandeel op secundaire netcapaciteit dat de bron voor rekening kan nemen";
			attribute<Celsius>	T_Bron		: [30, 15, 30, 30, 30, 50, 30, 30, 30, 30, 30, 30],	Descr = "Temperatuur welke de bron maximaal kan leveren zonder hulpvoorziening";
			attribute<Eur_kW>	Ki_KW_min	:= const(50	[Eur_kW], .),							Descr = "";
			attribute<Eur_kW>	Ki_KW_max	:= const(250[Eur_kW], .),							Descr = "";
			attribute<Eur_GJ>	K_GJ		:= const(0[Eur_GJ], .),								Descr = "";
			attribute<Eur_GJ>	E_GJ		:= const(0[Eur_GJ], .),								Descr = "";
		}
		unit<uint32> Bedrijventerrein
		:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/bedrijventerreinen.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	DialogType      = "Map"
		,	DialogData      = "Geometry"
		,	Source          = "CE-Delft"
		{
			attribute<rdc_meter> Geometry(poly);	
			
			attribute<rdc_meter> Point := centroid_or_mid(Geometry);

			attribute<string>    plannaam;
			attribute<string>    label := plannaam;
			
			attribute<Ratio>     bron_vol;
			attribute<Ratio>     bron_cap;
			attribute<MW>        cap_MW;
			attribute<Celsius>   T_bron := const(30[Celsius], .);
			
			attribute<MW>        MWth_max := cap_MW; // TODO: aanpassen wanneer brondata is aangepast.
		}
		
		unit<uint32> Glastuinbouw
		:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/glastuinbouw.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	DialogType      = "Map"
		,	DialogData      = "Geometry"
		,	Source          = "CE-Delft"
		{
			attribute<rdc_meter> Geometry(poly);
			attribute<rdc_meter> Point := centroid_or_mid(Geometry); 

			attribute<string>    FID;
			attribute<string>    label := FID;
			
			attribute<Ratio>     bron_vol;
			attribute<Ratio>     bron_cap;
			attribute<MW>        cap_MW;
			attribute<Celsius>   T_bron := const(30[Celsius], .);
			
			attribute<MW>        MWth_max := cap_MW; // TODO: aanpassen wanneer brondata is aangepast.
		}
		
		unit<uint32> LTbronnen_capaciteit
		:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/20190415_LT_puntbronnen.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	DialogType      = "Map"
		,	DialogData      = "Geometry"
		,	Source          = "CE-Delft"
		{
			attribute<dpoint>		LatLong := point(float64(Lat), float64(Long), dpoint);
			attribute<rdc_meter>	PointFromLL := LatLongWGS842RD(LatLong, rdc_meter);
			attribute<rdc_meter>	Geometry;
			attribute<rdc_meter>	Point := MakeDefined(Geometry, PointFromLL);
			
			attribute<string> Type;			
			attribute<unique_categorie> unique_categorie_rel := rlookup(Type, unique_categorie/values);
			attribute<../categorie> categorie_rel := unique_categorie/categorie_rel[unique_categorie_rel];

			attribute<string>	naam;
			attribute<string>	label := naam;
			attribute<Ratio>	bron_vol;
			attribute<Ratio>	bron_cap;
			attribute<Celsius>	T_bron; 
			attribute<Eur>		Ki_KW_min;
			attribute<Eur>		Ki_KW_max;
			attribute<Eur_GJ>	K_GJ;
			attribute<MW>		MWth_max;
			
		}
		
		unit<uint32> unique_categorie := unique(LTbronnen_capaciteit/categorie)
		{
			attribute<categorie> categorie_rel := rlookup(values, categorie/code);
		}
		
		unit<uint32> bron := union_unit(bedrijventerrein, glastuinbouw, LTbronnen_capaciteit) 
		,	DialogType = "Map", DialogData = "point"
		{
			attribute<rdc_meter>  point := union_data(., bedrijventerrein/point, glastuinbouw/point, LTbronnen_capaciteit/point);
			attribute<string>     Label := union_data(., bedrijventerrein/Label, glastuinbouw/Label, LTbronnen_capaciteit/Label);
			attribute<yr_uint16>  ingebruik := const(2020[yr_uint16], .);
			
			attribute<categorie>  Categorie_rel := union_data(., const(0[categorie], bedrijventerrein), const(11[categorie], glastuinbouw), LTbronnen_capaciteit/Categorie_rel);
			
			attribute<Ratio>   Bron_vol_spec := union_data(., bedrijventerrein/bron_vol, glastuinbouw/bron_vol, LTbronnen_capaciteit/bron_vol);
			attribute<Ratio>   Bron_cap_spec := union_data(., bedrijventerrein/bron_cap, glastuinbouw/bron_cap, LTbronnen_capaciteit/bron_cap);
			attribute<MW>      MWth_max_spec := union_data(., bedrijventerrein/MWth_max  , glastuinbouw/MWth_max  , LTbronnen_capaciteit/MWth_max  );
			attribute<Celsius> T_bron_spec   := union_data(., bedrijventerrein/T_bron  , glastuinbouw/T_bron  , LTbronnen_capaciteit/T_bron  );
			attribute<MW>      MWth_max := replace_value(MakeDefined(MWth_max_spec, 0[MW]), 0[MW], categorie/MWth_max[categorie_rel]);
			attribute<Ratio>   Bron_vol := replace_value(MakeDefined(Bron_vol_spec, 0d), 0d, categorie/Bron_vol[categorie_rel]);
			attribute<Ratio>   Bron_cap := replace_value(MakeDefined(Bron_cap_spec, 0d), 0d, categorie/Bron_cap[categorie_rel]);
			attribute<Celsius> T_bron   := replace_value(MakeDefined(T_bron_spec  , 0[Celsius]), 0[Celsius], categorie/T_bron[categorie_rel]);
			
			attribute<KW>      P_ow_max  := MWth_max * 1000[KW / MW];			
						
			attribute<Eur_kW> Ki_kW_min    := const(50[Eur_kw],.); // Source FO LT-warmtenetten, tabel 8
			attribute<Eur_kW> Ki_kW_max    := const(250[Eur_kw],.);
			
			attribute<Eur_GJ> K_GJ         := const(0[Eur_GJ], .);
		}
	}
	container OndiepeGeoThermie {
		unit<uint32> LTA_potentieel
		:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/LTA_potentieel.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	DialogType      = "Map"
		,	DialogData      = "Geometry"
		,	Source          = "CE-Delft"
		{
			attribute<rdc_meter> Geometry(poly);
			attribute<rdc_meter> Point := centroid(Geometry); 
			attribute<string> Label := BU_Naam;
		}		
	}
	container Gas: Descr = "Gasleidingennet beheersgebied Stedin"
	{
		unit<uint32> Leiding:
			StorageName      = "%sourceDataProjDir%/Aanbod/Gas/20161001_Stedin_Leidingen.dbf",
			StorageReadOnly = "True",
			DialogType      = "Map",
			DialogData      = "Leidingen",
			url             = "%sourceDataProjDir%/Aanbod/Gas/20161001_metadata_Stedin_Leidingen.html",
			SyncMode        = "All"
			{
				attribute<rdc_meter>                Leidingen (arc): StorageName = "%sourceDataProjDir%/Aanbod/Gas/20161001_Stedin_Leidingen.shp";
				attribute<string>                   Status;
				attribute<Classifications/StatusKl> Status_rel := rlookup(Status, Classifications/StatusKl/label);
			}
	}
}