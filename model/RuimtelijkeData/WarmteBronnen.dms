//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile wordt de brondata voor de Warmtebronnen geconfigureerd//
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container WarmteBronnen
{
	container MetaData := Kengetallen/WarmteBronnen/MetaData;
	
	container RestWarmte: Descr = "zie FO $3.3", FreeData = "False"
	{
		// inlezen bestand voor bekende puntbronnen geschikt voor warmtelevering
		unit<uint32> bron
		:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/20180724_puntbronnen.dbf"
		,	StorageReadOnly = "True"
		,	DialogType      = "Map"
		,	DialogData      = "P"
		,	Source          = "%sourceDataProjDir%/aanbod/puntbronnen/20190212_metadata_puntbronnen.txt"
		{
			attribute<rdc_meter> P: StorageName = "%sourceDataProjDir%/aanbod/puntbronnen/20180724_puntbronnen.shp", StorageReadOnly = "True";
			attribute<string>    Naam;

			attribute<string>                Type;
			attribute<MetaData/TypeInfo>     TypeInfo_rel     := rlookup(Type, MetaData/TypeInfo/Type);
			attribute<MetaData/TypeInfoList> TypeInfoList_rel := MetaData/TypeInfo/TypeInfoList_rel[TypeInfo_rel];

			attribute<yr_uint16> ingebruik;
			attribute<yr_uint16> uitgebruik;

			attribute<MW>      MWth_max;
			attribute<MW>      MWth_min  := value(MetaData/TypeInfo/MWth_min[TypeInfo_rel],MW);
			attribute<Eur_kW>  K_kW_min  := value(MetaData/TypeInfo/K_kW_min[TypeInfo_rel], Eur / kW);
			attribute<Eur_kW>  K_kW_max  := value(MetaData/TypeInfo/K_kW_max[TypeInfo_rel], Eur / kW);
			
			attribute<_yr>  Rj_Onderhoud := value(MetaData/TypeInfo/JaarKosten[ TypeInfo_rel ], _yr);
			attribute<Eur_GJ>  K_GJ10    :=       MetaData/TypeInfo/K_GJ10[TypeInfo_rel];
			attribute<Eur_GJ>  K_GJ20    :=       MetaData/TypeInfo/K_GJ20[TypeInfo_rel];
			attribute<Eur_GJ>  K_GJ30    :=       MetaData/TypeInfo/K_GJ30[TypeInfo_rel];
			attribute<Eur_GJ>  K_GJ40    :=       MetaData/TypeInfo/K_GJ40[TypeInfo_rel];
			attribute<Eur_GJ>  K_GJ50    :=       MetaData/TypeInfo/K_GJ50[TypeInfo_rel];
			attribute<kg_GJ>   CO2_2010  := value(MetaData/TypeInfo/CO2_2010[TypeInfo_rel],KG_GJ);
			attribute<kg_GJ>   CO2_2020  := value(MetaData/TypeInfo/CO2_2020[TypeInfo_rel],KG_GJ);
			attribute<kg_GJ>   CO2_2030  := value(MetaData/TypeInfo/CO2_2030[TypeInfo_rel],KG_GJ);
			attribute<kg_GJ>   CO2_2040  := value(MetaData/TypeInfo/CO2_2040[TypeInfo_rel],KG_GJ);
			attribute<kg_GJ>   CO2_2050  := value(MetaData/TypeInfo/CO2_2050[TypeInfo_rel],KG_GJ);
			attribute< g_GJ>   NOx_2010  := value(MetaData/TypeInfo/NOx_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2020  := value(MetaData/TypeInfo/NOx_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2030  := value(MetaData/TypeInfo/NOx_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2040  := value(MetaData/TypeInfo/NOx_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   NOx_2050  := value(MetaData/TypeInfo/NOx_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2010  := value(MetaData/TypeInfo/SO2_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2020  := value(MetaData/TypeInfo/SO2_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2030  := value(MetaData/TypeInfo/SO2_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2040  := value(MetaData/TypeInfo/SO2_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   SO2_2050  := value(MetaData/TypeInfo/SO2_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2010  := value(MetaData/TypeInfo/VOS_2010[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2020  := value(MetaData/TypeInfo/VOS_2020[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2030  := value(MetaData/TypeInfo/VOS_2030[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2040  := value(MetaData/TypeInfo/VOS_2040[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   VOS_2050  := value(MetaData/TypeInfo/VOS_2050[TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2010   := value(MetaData/TypeInfo/TS_2010 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2020   := value(MetaData/TypeInfo/TS_2020 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2030   := value(MetaData/TypeInfo/TS_2030 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2040   := value(MetaData/TypeInfo/TS_2040 [TypeInfo_rel],g_GJ );
			attribute< g_GJ>   TS_2050   := value(MetaData/TypeInfo/TS_2050 [TypeInfo_rel],g_GJ );
			attribute<string>  Eigenaar;
			attribute<string>  Brandstof;

			// aspects
			attribute<string>  Label           := Naam,                            DialogType = "LabelText";
			attribute<float64> SymbolWorldSize := sqrt(MWth_max * 100000[1 / MW]), DialogType = "SymbolWorldSize";
			parameter<int16>   SymbolIndex     := 44s,                             DialogType = "SymbolIndex";
		}

		template BronSelectie: IsHidden = "True"
		{
			parameter<units/yr_uint16> Jaar;
			unit<uint32> WarmteBronnen := Bron;

			unit<uint32> BronElementen := SubSet(WarmteBronnen/ingebruik <= Jaar)
			{
//				attribute<WarmteBronnen> WarmteBron_rel := nr_OrgEntity;

				attribute<units/yr_uint16>       ingebruik        := WarmteBronnen/ingebruik[nr_OrgEntity];
				attribute<string>                Label            := WarmteBronnen/Label[nr_OrgEntity], DialogType = "LabelText";
				attribute<MetaData/TypeInfoList> TypeInfoList_rel := WarmteBronnen/TypeInfoList_rel[nr_OrgEntity];
				attribute<rdc_meter>             point            := WarmteBronnen/P[nr_OrgEntity];

				attribute<MW>                    MWTh_min         := WarmteBronnen/MWth_min[nr_OrgEntity];
				attribute<Eur_kW>                K_kW_min         := WarmteBronnen/K_kW_min[nr_OrgEntity];
				attribute<Eur_kW>                K_kW_max         := WarmteBronnen/K_kW_max[nr_OrgEntity];
				attribute<_yr>                   Rj_Onderhoud     := WarmteBronnen/Rj_Onderhoud[nr_OrgEntity];
				attribute<MW>                    MWth_max         := WarmteBronnen/MWth_max[nr_OrgEntity];
				attribute<Eur_GJ>                K_GJ             :=
					(Jaar < 2020[units/yr_uint16] ? WarmteBronnen/K_GJ10 :
					 Jaar < 2030[units/yr_uint16] ? WarmteBronnen/K_GJ20 :
					 Jaar < 2040[units/yr_uint16] ? WarmteBronnen/K_GJ30 :
					 Jaar < 2050[units/yr_uint16] ? WarmteBronnen/K_GJ40 :
					 WarmteBronnen/K_GJ50)[nr_OrgEntity];

				attribute<KG_GJ> CO2_GJ := ='WarmteBronnen/CO2_'+string(Jaar)+'[nr_OrgEntity]';
				attribute<G_GJ>  NOx_GJ := ='WarmteBronnen/NOx_'+string(Jaar)+'[nr_OrgEntity]';
				attribute<G_GJ>  SO2_GJ := ='WarmteBronnen/SO2_'+string(Jaar)+'[nr_OrgEntity]';
				attribute<G_GJ>  VOS_GJ := ='WarmteBronnen/VOS_'+string(Jaar)+'[nr_OrgEntity]';
				attribute<G_GJ>  TS_GJ  := ='WarmteBronnen/TS_' +string(Jaar)+'[nr_OrgEntity]';
			}

			unit<uint32> Bronnen := unique(BronElementen/point)
			,	DialogType = "Map"
			,	DialogData = "point"
			{
				attribute<string>                Label                             := AsItemList(BronElementen/Label, per_BronElementen), DialogType = "LabelText";

				attribute<.>                     per_BronElementen (BronElementen) := rlookup(BronElementen/point, Values);
				attribute<MetaData/TypeInfoList> TypeInfoList_rel                  := modus_weighted(BronElementen/TypeInfoList_rel, BronElementen/MWth_max, per_BronElementen);

				attribute<rdc_meter>             point        := Values;
				attribute<Eur_kW>                K_kW_min     := sum(BronElementen/K_kW_min     * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<Eur_kW>                K_kW_max     := sum(BronElementen/K_kW_max     * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<MW>                    MWth_max     := sum(BronElementen/MWth_max, per_BronElementen);
				attribute<MW>                    MWth_min     := sum(BronElementen/MWth_min, per_BronElementen);
				attribute<_yr>                   Rj_Onderhoud := sum(BronElementen/Rj_Onderhoud * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<Eur_GJ>                K_GJ         := sum(BronElementen/K_GJ         * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<KG_GJ >                CO2_GJ       := sum(BronElementen/CO2_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 NOx_GJ       := sum(BronElementen/NOx_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 SO2_GJ       := sum(BronElementen/SO2_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 VOS_GJ       := sum(BronElementen/VOS_GJ       * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<G_GJ >                 TS_GJ        := sum(BronElementen/TS_GJ        * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
				attribute<m>                     cumulDist    := const(0[m], .);
				attribute<MW>                    cumulP       := const(0[MW], .);
				attribute<Bronnen>               Bronnen_rel  := id(.);

				attribute<Eur_kW>                Ki_kW_min    := K_kW_min;
				attribute<Eur_kW>                Ki_kW_max    := K_kW_max;
			}
		}
		container BronSelecties := for_each_ne(Classifications/zichtjaar/name, 'BronSelectie('+string(Classifications/zichtjaar/Jaar)+'[units/yr_uint16])');
	}

	container GeoThermie: Descr = "zie FO $3.4"
	{
		container import
		{
			unit<uint32> ContourSet:
				StorageName      = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.dbf",
				StorageReadOnly = "True",
				url             = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.txt",
				DialogType      = "Map",
				DialogData      = "geometry"
			{
				attribute<rdc_meter> geometry (poly): StorageName = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.shp", StorageReadOnly = "True";
				attribute<int32>     id;
			}
		}

		unit<uint32> ContourSet := subset(import/ContourSet/id != 0i), FreeData = "False"
		{
			attribute<rdc_meter>  geometry (poly)                     := import/ContourSet/geometry[nr_OrgEntity];
			attribute<ContourSet> Grid     (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100), FreeData = "True";

			unit<uint32> PointSet := subset(IsDefined(Grid)), FreeData = "False"
			{
				attribute<rdc_meter> point := rdc_grids/m100/point[nr_OrgEntity];
			}
		}
	}
	container WKO: Descr = "zie FO $3.4"
	{
		unit<uint32> ContourSet:
			StorageName     = "%sourceDataProjDir%/Aanbod/WKO/20180802_WKO_potentiecontour.dbf",
			StorageReadOnly = "True",
			url             = "%sourceDataProjDir%/Aanbod/WKO/20190212_metadata_wko_contour.txt",
			DialogType      = "Map",
			DialogData      = "geometry"
		{
			attribute<rdc_meter> geometry(poly) : StorageName = "%sourceDataProjDir%/Aanbod/WKO/20180802_WKO_potentiecontour.shp", StorageReadOnly = "True";
			attribute<string>    WKO;
			attribute<Bool>      Geschikt := WKO == 'geschikt' || WKO == 'zeer geschikt';
		}

		unit<uint32> GeschikteContour := subset(ContourSet/Geschikt), FreeData = "False"
		{
			container impl : FreeData = "True", IsHidden = "True"
			{
				attribute<rdc_meter> geometry  (poly, GeschikteContour) := ContourSet/geometry[nr_OrgEntity];
			}
			attribute<ContourSet> Grid (Geography/rdc_grids/m100) := poly2grid(impl/geometry, Geography/rdc_grids/m100), FreeData = "False";
		}
	}
	container Gas: Descr = "Gasleidingennet beheersgebied Stedin"
	{
		unit<uint32> Leiding:
			StorageName      = "%sourceDataProjDir%/Aanbod/Gas/Leidingen.dbf",
			StorageReadOnly = "True",
			DialogType      = "Map",
			DialogData      = "Leidingen",
			url             = "%sourceDataProjDir%/Aanbod/Gas/20190212_metadata_gasleidingen.txt",
			SyncMode        = "All"
			{
				attribute<rdc_meter>                Leidingen (arc): StorageName = "%sourceDataProjDir%/Aanbod/Gas/Leidingen.shp";
				attribute<string>                   Status;
				attribute<Classifications/StatusKl> Status_rel := rlookup(Status, Classifications/StatusKl/label);
			}
	}
}