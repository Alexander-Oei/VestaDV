//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile worden de brondata geconfigureerd.                    //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container BronData: Using = "Units;Geography", FreeData = "False"
{
	#include <BAG.dms>
	#include <Nieuwbouw.dms>
	#include <Sloop.dms>

	container CBS {
		unit<uint32> kwb2013:
			StorageName     = "%SourceDataProjDir%/CBS/kwb-2013.csv",
			StorageType     = "gdal.vect",
			StorageReadOnly = "True";
		
		unit<uint32> kwb2014:
			StorageName     = "%SourceDataProjDir%/CBS/kwb-2014.csv",
			StorageType     = "gdal.vect",
			StorageReadOnly = "True";
		
		unit<uint32> kwb2015:
			StorageName     = "%SourceDataProjDir%/CBS/kwb-2015.csv",
			StorageType     = "gdal.vect",
			StorageReadOnly = "True";
	}

	unit<uint32> EnergieLabelData_src
	:	StorageName     = "%SourceDataProjDir%/vraag/wonen/inputlabels_rvo_20180501.csv"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	{
		parameter<string> SQoute:= '\''';

		attribute<string> HLT_unquoted:= trim(replace(HLT,SQoute,''));
		attribute<string> adres_key   := 
			replace(Postcode,SQoute,'') + '_' + replace(HNR,SQoute,'') + 
			(strlen(HLT_unquoted) >0 
				? '_' + HLT_unquoted
				: ''
			);
		//order of replace matters!
		attribute<Classifications/energielabel> energielabel_rel:= rlookup(replace(replace(replace(replace(replace(label,SQoute,''),'A++++','eWP'),'A+++','eWP'),'A++','eWP'),'A','A+'), Classifications/energielabel/Label);
		attribute<uint32>                       datum_numeriek  := uint32(replace(DATUM,SQoute,''));
		attribute<voorkomende_labels>           voorkomende_labels_rel :=rlookup(label, voorkomende_labels/Values);
	}

	unit<uint32> voorkomende_labels:= unique(EnergieLabelData_src/label)//;
	{
		attribute<uint32> aantal:=pcount(EnergieLabelData_src/voorkomende_labels_rel);
	}


	unit<uint32> EnergieLabelData:= unique(EnergieLabelData_src/adres_key)
	{
		attribute<string> nummeraanduiding_id := BAG/import/nummeraanduiding/identificatie[rlookup(values, BAG/import/nummeraanduiding/adres_key)];
		attribute<string> VBO_ID    := rjoin(nummeraanduiding_id, BAG/import/vbo/nummeraanduiding_id, BAG/import/vbo/identificatie), FreeData = "False";
		
		attribute<uint32>                       datum_laatste        := max(EnergieLabelData_src/datum_numeriek, rlookup(EnergieLabelData_src/adres_key, values));
		attribute<Classifications/energielabel> energielabel_rel     := rjoin(values + '_' + string(datum_laatste), EnergieLabelData_src/adres_key + '_' + string(EnergieLabelData_src/datum_numeriek), EnergieLabelData_src/energielabel_rel), FreeData = "False";
	}

	container EnergieLabelData_pc6
	{
		parameter<String> FileName := '';
		parameter<String> File: StorageName = "%sourceDataProjDir%/vraag/wonen/pc6_energielabel.csv", StorageType = "str", StorageReadOnly = "True";
		parameter<string>  Header := ReadLines(File, void, 0);
		unit<uint32> RowSet := Range(UInt32, 0, StrCount(File, '\n')-1)
		{
			attribute<String> Lines := ReadLines(File, ., Header/ReadPos);
			
		}
		
		attribute<String> PC6(RowSet) := ReadElems(RowSet/Lines, String, const(0, RowSet));
		
		attribute<uint32> aantal_app(RowSet) := ReadElems(RowSet/Lines, UInt32, PC6/ReadPos);
		attribute<uint32> aantal_ap (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_app/ReadPos);
		attribute<uint32> aantal_a  (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_ap/ReadPos );
		attribute<uint32> aantal_b  (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_a/ReadPos  );
		attribute<uint32> aantal_c  (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_b/ReadPos  );
		attribute<uint32> aantal_d  (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_c/ReadPos  );
		attribute<uint32> aantal_e  (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_d/ReadPos  );
		attribute<uint32> aantal_f  (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_e/ReadPos  );
		attribute<uint32> aantal_g  (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_f/ReadPos  );
		attribute<uint32> totaal    (RowSet) := ReadElems(RowSet/Lines, UInt32, aantal_g/ReadPos  );
	}

	#include <Bebouwing.dms>
	#include <GGSectorAfBij.dms>
	#include <GLTBVerdeling.dms>
	
	container energie: Descr = "Blok 2", FreeData = "False"
	{
		
		container vraag
		{
			container ModelBagWoning := 
				CalculationSchemes/EnergieKengetallen/import(
					'20160707_Woningen_BAG.csv', 
					'WoningType_str', 
					Classifications/WoningtypeGeoHoogte, Classifications/BouwJaarBag, Units/nrWoningen, Units/nrWoningen
				)
			{
				container results
				{
					container Verbeteringen
					{
						container S_H_T := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'A');
						container S_H_B := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'B');
						container S_H_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
						container S_T_B := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_T/verbruik, S_H_T/Comfort_verbetering_tov_h, 'D');
						container S_T_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_T/verbruik, S_H_T/Comfort_verbetering_tov_h, 'E');
						container S_B_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_B/verbruik, S_H_B/Comfort_verbetering_tov_h, 'F');
					}
				}
			}
			container ModelWoningNieuwbouw :=
				CalculationSchemes/EnergieKengetallen/import(
					'20160525_Woningen_Nieuwbouw_BAG.csv',
					'WoningType_str',
					Classifications/woningtype, Classifications/BouwJaar, Units/nrWoningen, Units/nrWoningen
				)
			{
				container results {
					container Verbeteringen
					{
						container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');
						
						container S_H_T := S_X_X;
						container S_H_B := S_X_X;
						container S_H_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
						container S_T_B := S_X_X;
						container S_T_AP:= S_X_X;
						container S_B_AP:= S_H_AP;
					}
				}
			}
			container ModelBagUtil :=
				CalculationSchemes/EnergieKengetallen/import(
					'20160706_Utiliteiten_BAG.csv',
					'UtiliteitType_str', 
					Classifications/UtiliteitBAG,Classifications/BouwjaarUtilBag,  Units/m2, Units/m2
				)
			{
				container results {
					container Verbeteringen
					{
						container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');
						
						container S_H_T := S_X_X;
						container S_H_B := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'B');
						container S_H_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
						container S_T_B := S_X_X;
						container S_T_AP:= S_X_X;
						container S_B_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_B/verbruik, S_H_B/Comfort_verbetering_tov_h, 'F');
					}
				}
			}
			
			container ModelUtilNieuwbouw := 
				CalculationSchemes/EnergieKengetallen/import(
					'20160525_Utiliteiten_Nieuwbouw_BAG.csv', 
					'UtiliteitType_str', 
					Classifications/NieuwbouwUtil, Classifications/BouwJaar,  Units/m2, Units/m2
				)
			{
				container results {
					container Verbeteringen
					{
						container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');
						
						container S_H_T := S_X_X;
						container S_H_B := S_X_X;
						container S_H_AP:= S_X_X;
						container S_T_B := S_X_X;
						container S_T_AP:= S_X_X;
						container S_B_AP:= S_X_X;
					}
				}
			}

			container ModelGlTb2010 :=  
				CalculationSchemes/EnergieKengetallen/import(
					'20160706_Glastuinbouw_BAG.csv', 
					'UtiliteitType_str',
					Classifications/GlTb, Classifications/bouwjaar, Units/m2, Units/m2
				)
			{
				container results {
					container Verbeteringen
					{
						container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');
						
						container S_H_T := S_X_X;
						container S_H_B := S_X_X;
						container S_H_AP:= S_X_X;
						container S_T_B := S_X_X;
						container S_T_AP:= S_X_X;
						container S_B_AP:= S_X_X;
					}
				}
			}
			container ModelGlTbNieuwbouw :=
				CalculationSchemes/EnergieKengetallen/import(
					'20160525_Glastuinbouw_Nieuwbouw_BAG.csv',
					'UtiliteitType_str',
					Classifications/GlTb, classifications/bouwjaar, Units/m2, Units/m2
				)
			{
				
				container results {
					container Verbeteringen
					{
						container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');
						
						container S_H_T := S_X_X;
						container S_H_B := S_X_X;
						container S_H_AP:= S_X_X;
						container S_T_B := S_X_X;
						container S_T_AP:= S_X_X;
						container S_B_AP:= S_X_X;
					}
				}
			}
			Template GebouwTempl
			{
				unit<UInt32>  ModelObject;
				unit<Float64> GJ_yr_per_Eenheid;
				unit<Float64> Eur_per_eenheid;
				attribute<GJ_yr_per_Eenheid> verbruik_prev(ModelObject); // alleen ruimteverwarming
				attribute<GJ_yr_per_Eenheid> comfort_prev (ModelObject);
				parameter<String> VerbeterCode;

				// =================== ReboundFactor
				// verbetering van 100 kuub-> 85 kuub met een ReboundFactor van x 
				// geeft een besparing van 15 kuub en 
				// een comfortverbetering ter waarde van 15 kuub * ( 1/ (1-x) - 1); 
				// totaal voordeel is dus 15 kuub  / (1-x).
				// waarvan fractie x de comfortverbetering die gelijk gesteld is aan de Rebound en 
				// fractie (1-x) de feitelijke besparing is.
				attribute<Ratio> ReboundFactor_stap(ModelObject) :=
					=(VerbeterCode!='X') 
					? 'MakeDefined(value(table/RB_FAC_'+VerbeterCode+', Ratio), value(0.0, Ratio))' 
					: 'const(0 / 0, ModelObject, Ratio)';
				
				// de volgende kenmerken betreffen ook aleen RuimteVerwarming
				attribute<GJ_yr_per_Eenheid> verbruik(ModelObject) := 
					=(VerbeterCode!='X') 
					? 'MakeDefined(value(table/MV'+VerbeterCode+'_EG, GJ_yr_per_Eenheid), Functioneel/Ruimteverwarming)' 
					: 'const(0 / 0, ModelObject, GJ_yr_per_Eenheid)';

				attribute<GJ_yr_per_Eenheid> energie_verbetering_stap(ModelObject) :=  verbruik - verbruik_prev;
				attribute<GJ_yr_per_Eenheid> totale_verbetering_stap (ModelObject) :=  energie_verbetering_stap / (1.0 - ReboundFactor_stap);
				attribute<GJ_yr_per_Eenheid> comfort_verbetering_stap (ModelObject) :=  totale_verbetering_stap - energie_verbetering_stap;
				
				
				attribute<Ratio> efficiency (ModelObject) := Functioneel/Ruimteverwarming / verbruik;
				attribute<Ratio> ComfortFactor_stap(ModelObject) := 1.0 / (1.0 - ReboundFactor_stap) - 1.0;
				
				attribute<GJ_yr_per_Eenheid> energie_verbetering_tov_h(ModelObject) :=  Functioneel/Ruimteverwarming - verbruik;
				attribute<GJ_yr_per_Eenheid> comfort_verbetering_tov_h(ModelObject) :=  comfort_prev + comfort_verbetering_stap;
				attribute<GJ_yr_per_Eenheid> totale_verbetering_tov_h (ModelObject) :=  energie_verbetering_tov_h + comfort_verbetering_tov_h;
					
				attribute<Eur_per_eenheid> kosten_min (ModelObject) := 
					=(VerbeterCode!='X') 
					? 'MakeDefined(value(table/MV'+VerbeterCode+'_EG_Eur_MIN, Eur_per_eenheid), value(0.0, Eur_per_eenheid))' 
					: 'const(0 / 0, ModelObject, Eur_per_eenheid)';
				attribute<Eur_per_eenheid> kosten_max (ModelObject) := 
					=(VerbeterCode!='X') 
					? 'MakeDefined(value(table/MV'+VerbeterCode+'_EG_Eur_MAX, Eur_per_eenheid), value(0.0, Eur_per_eenheid))' 
					: 'const(0 / 0, ModelObject, Eur_per_eenheid)';
			}
		}
		
		// Kosten (investeringen etc.) voor warmtelevering:
		// a	Woningen (per woningtype, per leeftijdcategorie).
		// b	Utiliteit (per m2, per aard utiliteit).
		// c	Glastuinbouw (per hectare, per type )
		// d	Onderdelen distributie warmte.
		// e	Transport warmte (prijs per km rechte afstand; gedifferentieerd naar capaciteit; + 'omwegfactor')
		container prijzen: Expr = "CalculationSchemes/EnergiePrijzen/All(Parameters/prijzenBron, log(1.00)[_yr])", Descr = "zie FO $3.5";
	}
	container WarmteBronnen
	{
		container prijzen := energie/prijzen
		{
			unit<uint32> aardgas_tabel := AardGas/Table;
			attribute<aardgas_tabel> aardgas_tabel_rel(classifications/zichtjaar) := rlookup(classifications/zichtjaar/jaar, UInt16(aardgas_tabel/jaar));
			attribute<Eur_GJ> Gas_GJ             (classifications/zichtjaar) := prijzen/AardGas/results/GrootGebruik/eindgebruik_ex[aardgas_tabel_rel], Descr = "M10";
			
			unit<uint32> elek_tabel := Elektriciteit/Table;
			attribute<elek_tabel> elek_tabel_rel(classifications/zichtjaar) := rlookup(classifications/zichtjaar/jaar, UInt16(elek_tabel/jaar));
			attribute<Eur_GJ> ElekEnGros_GJ     (classifications/zichtjaar) := prijzen/Elektriciteit/results/GrootGebruik/CommodityPrice[elek_tabel_rel];
			attribute<Eur_GJ> ElekKMG_GJ        (classifications/zichtjaar) := prijzen/Elektriciteit/results/KleinMiddelGebruik/eindgebruik_ex[elek_tabel_rel];
			
			unit<uint32> overig_tabel := Overig/Table;
			container    overig_results := Overig/Results;
			attribute<overig_tabel> overig_tabel_rel(classifications/zichtjaar) := rlookup(classifications/zichtjaar/jaar, overig_results/jaar);
			attribute<Eur_GJ> BioMassa_GJ           (classifications/zichtjaar) := overig_results/BioMassa    [overig_tabel_rel];
			attribute<Eur_GJ> Kolen_GJ              (classifications/zichtjaar) := overig_results/Kolen_Excl  [overig_tabel_rel];
			attribute<Eur_GJ> KolenCO2_GJ           (classifications/zichtjaar) := overig_results/Kolen_CO2   [overig_tabel_rel];
		}
		container MetaData
		{
			unit<uint32> RekenType: nrofrows = 8
			{
				attribute<String> Naam: [ 'STEG', 'Kolen', 'Gasmotor', 'Industrie', 'AVI', 'BMC', 'BioWKK', 'GeoThermie' ];
				attribute<String> Label := Naam, DialogType = "LabelString";
			}
			
			unit<uint32>  TypeInfoData
			:	StorageName = "%EnergieDataProjDir%/TypeInfo.csv" 
			,	StorageType = "gdal.vect"
			,	StorageReadOnly = "True"
			,	SyncMode    = "None"
			{
				attribute<String > Type;
				attribute<String > Label := Type, DialogType = "LabelString";
				attribute<String > K_kW_min;   // [Eur_kW]
				attribute<String > K_kW_max;   // [Eur_kW]
				attribute<String> MWth_min;   // [MWth]
				attribute<String> JaarKosten; // [_yr]
				
				attribute<TypeInfoList> TypeInfoList_rel := rlookup(Type, TypeInfoList/Naam);
				attribute<RekenType> RekenType_rel := TypeInfoList/RekenType_rel[TypeInfoList_rel];

				attribute<Eur_GJ>  K_GJ10 := ='union_data(RekenType, '+AsItemList('RekenTypes/'+RekenType/Naam+'/K_GJ[classifications/zichtjaar/V/J2010]')+')[RekenType_rel]';
 				attribute<Eur_GJ>  K_GJ20 := ='union_data(RekenType, '+AsItemList('RekenTypes/'+RekenType/Naam+'/K_GJ[classifications/zichtjaar/V/J2020]')+')[RekenType_rel]';
 				attribute<Eur_GJ>  K_GJ30 := ='union_data(RekenType, '+AsItemList('RekenTypes/'+RekenType/Naam+'/K_GJ[classifications/zichtjaar/V/J2030]')+')[RekenType_rel]';
 				attribute<Eur_GJ>  K_GJ40 := ='union_data(RekenType, '+AsItemList('RekenTypes/'+RekenType/Naam+'/K_GJ[classifications/zichtjaar/V/J2040]')+')[RekenType_rel]';
 				attribute<Eur_GJ>  K_GJ50 := ='union_data(RekenType, '+AsItemList('RekenTypes/'+RekenType/Naam+'/K_GJ[classifications/zichtjaar/V/J2050]')+')[RekenType_rel]';
 				attribute<string>   CO2_2010;
 				attribute<string>   CO2_2020;
 				attribute<string>   CO2_2030;
 				attribute<string>   CO2_2040;
 				attribute<string>   CO2_2050;
 				attribute<string>   NOx_2010;
 				attribute<string>   NOx_2020;
 				attribute<string>   NOx_2030;
 				attribute<string>   NOx_2040;
 				attribute<string>   NOx_2050;
 				attribute<string>   SO2_2010;
 				attribute<string>   SO2_2020;
 				attribute<string>   SO2_2030;
 				attribute<string>   SO2_2040;
 				attribute<string>   SO2_2050;
 				attribute<string>   VOS_2010;
 				attribute<string>   VOS_2020;
 				attribute<string>   VOS_2030;
 				attribute<string>   VOS_2040;
 				attribute<string>   VOS_2050;
 				attribute<string>   TS_2010;
 				attribute<string>   TS_2020;
 				attribute<string>   TS_2030;
 				attribute<string>   TS_2040;
 				attribute<string>   TS_2050;
			}
			unit<int32> TypeInfoList: nrofrows = 15
			{
				attribute<String> Naam: [
					"STEG", "Gasturbine", "Conventioneel",
					"Kolen", "KVSTEG",
					"Gasmotor", "WijkWKK",
					"Industrie", "Raffinaderij", "Kern", "Geothermie",
					"AVI", "BMC", "BioWKK", "Onbekend"
				];
				attribute<String> Label := Naam, DialogType = "LabelString";
				
				attribute<RekenType> RekenType_rel: [ 
					0, 0, 0, 
					1, 1, 
					2, 2,
					3, 3, 3, 7,
					4, 5, 6, null
				];
				container V := for_each_nedv(Naam, 'value('+String(ID(.))+', ..)', void, .);
			}
			container RekenTypes {
				container STEG
				{
					// obv (0.20/0.30) * M10[Eur/GJ];
					// obj M10 = 1000[MJ/GJ]*L10/ 31.65 [MJ/m3], 
					// obv L10 = gasprijs in [Eur/m3] commodity incl CO2, SDE-heffing, energiebel, excl BTW, geen distributie en transport.
					attribute<Eur_GJ> K_GJ  (classifications/zichtjaar) := (0.20/0.30) * prijzen/Gas_GJ;
				}
				container Kolen
				{
					// obv (0.20/0.30) * P10[Eur/GJ]
					// obv P10 = O10+0,105[ton/GJ]*B10 
					// obv O10= Kolenprijs = 2.20 [Eur/GJ] CONSTANT!
					// en B10[Eur/ton]=CO2-prijs die varieert met de tijd, 
					attribute<Eur_GJ> P   (classifications/zichtjaar) := prijzen/Kolen_GJ + prijzen/KolenCO2_GJ;
					attribute<Eur_GJ> K_GJ(classifications/zichtjaar) := (0.20/0.30) * P;
				}
				container Gasmotor
				{
					// M10/0.45 - Q10*1 
					// obv Q10[Eur/GJ] = elektriciteitsprijs en gros
					// (Gasprijs/(totaalrendement WKK (0.9)*Percentage warmteoutput WKK (0.75)) - (Elektriciteitsprijs (per GJ) * ((totaalrendement WKK (0.9)* Percentage elektriciteits-output WKK (0.25) )/(totaalrendement WKK (0.9)* Percentage warmte-output WKK (0.75) )))
					parameter<Float64> WarmteAandeel:= 0.75;
					parameter<Float64> Rendement    := 0.90;
					parameter<Float64>  ElektriciteitAandeel := 1.0 - WarmteAandeel;
					parameter<Float64> Aardgas_Factor := 1.0 / (Rendement * WarmteAandeel);
					parameter<Float64> Elektriciteit_Factor := - ElektriciteitAandeel / WarmteAandeel;
					parameter<Float64> Biogas_Factor := 0.0;
					parameter<Float64> Biovast_Factor := 0.0;
					parameter<Float64> Ondergrond_Factor := 0.0;
					parameter<Float64> Opwekking_Factor := 0.0;
					attribute<Eur_GJ> K_GJ(classifications/zichtjaar) :=Aardgas_Factor * prijzen/Gas_GJ + Elektriciteit_Factor * prijzen/ElekEnGros_GJ; // en gros prijs als opbrengst, dit is excl distributiekosten
					// attribute<Eur_GJ> K_GJ(classifications/zichtjaar) := (prijzen/Gas_GJ/(0.9*0.75))-(prijzen/ElekEnGros_GJ*((0.9*0.25)/(0.9*0.75)))
				}
				container Industrie
				{
					// obv 0.0000025 [GJ/GJ] * R10[Eur/GJ]
					// obv R10 = S10[Eur/kWh] * 1000000[kJ/GJ] / 3600[sec/h]
					attribute<Eur_GJ> K_GJ(classifications/zichtjaar) := 0.0000025 [GJ / GJ] * prijzen/ElekKMG_GJ;
				}
				container GeoThermie
				{
					// obv 0.0000025 [GJ/GJ] * R10[Eur/GJ]
					// obv R10 = S10[Eur/kWh] * 1000000[kJ/GJ] / 3600[sec/h]
					parameter<Float64> Elektriciteit_Factor := (1GJ / 30GJ);
					attribute<Eur_GJ> K_GJ(classifications/zichtjaar) := Elektriciteit_Factor * prijzen/ElekKMG_GJ;
				}
				container AVI
				{
					// 0.18 * Q10[Eur/GJ] 
					// obv Q10 = 0.058[Eur/kWh] * 1000/3.6 [kWh/GJ] die varieert met de tijd.
					attribute<Eur_GJ> K_GJ(classifications/zichtjaar) := 0.18 * prijzen/ElekEnGros_GJ; // en gros prijs als kosten, is deze prijs nu excl of incl distributiekosten en heffingen?
				}
				container BMC
				{
					// obv (0.20 / 0.30) * N10[Eur/GJ] obv N10 = 122.4 / 16 CONSTANT ! 
					attribute<Eur_GJ> K_GJ(classifications/zichtjaar) := (0.20 / 0.30) * prijzen/BioMassa_GJ;
				}
				
				container BioWKK
				{
					// obv (0.20 / 0.30) * N10[Eur/GJ] obv N10 = 122.4 / 16 CONSTANT ! 
					parameter<Float64> WarmteAandeel:= 0.75;
					parameter<Float64> Rendement    := 0.80;
					parameter<Float64> ElektriciteitAandeel := 1.0 - WarmteAandeel;
					parameter<Float64> Warmte_Factor := 1.0 / (Rendement * WarmteAandeel);
					parameter<Float64> Elektriciteit_Factor := - ElektriciteitAandeel / WarmteAandeel;
					parameter<Float64> Aardgas_Factor := 0.0;
					parameter<Float64> Biogas_Factor := 0.0;
					parameter<Float64> Biovast_Factor := Warmte_Factor;
					parameter<Float64> Ondergrond_Factor := 0.0;
					parameter<Float64> Opwekking_Factor := 0.0;
					
					attribute<Eur_GJ> K_GJ(classifications/zichtjaar) := Warmte_Factor *  prijzen/BioMassa_GJ + Elektriciteit_Factor * prijzen/ElekEnGros_GJ; // en gros prijs als opbrengst, dit is excl distributiekosten
				}
			}
		}
		container RestWarmte: Descr = "zie FO $3.3", FreeData = "False"
		{
			unit<uint32> bron
			:	StorageName     = "%sourceDataProjDir%/aanbod/puntbronnen/puntbronnen_20180517.dbf"
			,	StorageReadOnly = "True"
			,	DialogType      = "Map"
			,	DialogData      = "P"
			,	Source          = "ECN, Marit van Hout, 5 juni 2015 per email\n"
				                   "aanlevering Y:\\data\\Vesta\\v2\\config\\MAIS\\aanlevering\\Steven_070416\\06-04 vergelijk_puntbronnen_180713_PBL-Lijst met centrales.xlsx\n"
				                   "bewerking: Y:\\data\\Vesta\\v2\\config\\MAIS\\bewerk\\puntbronnen_070416\\06-04 vergelijk_puntbronnen_180713_PBL-Lijst met centrales.xlsx tabblad GIS\n"
				                   "eigen bewerking verwijderen steenkolencentrales"
								   "zie email van Bas van Bemmel dd 14-09-2017"
//			,	SyncMode        = "None"
			{
				attribute<rdc_meter> P: StorageName = "%sourceDataProjDir%/aanbod/puntbronnen/puntbronnen_20180517.shp", StorageReadOnly = "True";

				attribute<String>    Naam;
				
				attribute<String>  Type;
				attribute<MetaData/TypeInfoData> TypeInfo_rel     := rlookup(Type, MetaData/TypeInfoData/Type);
				attribute<MetaData/TypeInfoList> TypeInfoList_rel := lookup(TypeInfo_rel, MetaData/TypeInfoData/TypeInfoList_rel);
				
				attribute<yr_uint16> ingebruik;
				attribute<yr_uint16> uitgebruik;
				
				attribute<MW>      MWth_max;
				attribute<MW>      MWth_min := value(MetaData/TypeInfoData/MWth_min[TypeInfo_rel],MW);
				attribute<Eur_kW>  K_kW_min := value(MetaData/TypeInfoData/K_kW_min[TypeInfo_rel], Eur / kW);
				attribute<Eur_kW>  K_kW_max := value(MetaData/TypeInfoData/K_kW_max[TypeInfo_rel], Eur / kW);
				
 				attribute<_yr>  Rj_Onderhoud := value(MetaData/TypeInfoData/JaarKosten[ TypeInfo_rel ], _yr);
 				attribute<Eur_GJ>  K_GJ10 : = MetaData/TypeInfoData/K_GJ10[TypeInfo_rel];
 				attribute<Eur_GJ>  K_GJ20 : = MetaData/TypeInfoData/K_GJ20[TypeInfo_rel];
 				attribute<Eur_GJ>  K_GJ30 : = MetaData/TypeInfoData/K_GJ30[TypeInfo_rel];
 				attribute<Eur_GJ>  K_GJ40 : = MetaData/TypeInfoData/K_GJ40[TypeInfo_rel];
 				attribute<Eur_GJ>  K_GJ50 : = MetaData/TypeInfoData/K_GJ50[TypeInfo_rel];
				attribute<kg_GJ>   CO2_2010 := value(MetaData/TypeInfoData/CO2_2010[TypeInfo_rel],KG_GJ);
				attribute<kg_GJ>   CO2_2020 := value(MetaData/TypeInfoData/CO2_2020[TypeInfo_rel],KG_GJ);
				attribute<kg_GJ>   CO2_2030 := value(MetaData/TypeInfoData/CO2_2030[TypeInfo_rel],KG_GJ);
				attribute<kg_GJ>   CO2_2040 := value(MetaData/TypeInfoData/CO2_2040[TypeInfo_rel],KG_GJ);
				attribute<kg_GJ>   CO2_2050 := value(MetaData/TypeInfoData/CO2_2050[TypeInfo_rel],KG_GJ);
				attribute< g_GJ>   NOx_2010 := value(MetaData/TypeInfoData/NOx_2010[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   NOx_2020 := value(MetaData/TypeInfoData/NOx_2020[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   NOx_2030 := value(MetaData/TypeInfoData/NOx_2030[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   NOx_2040 := value(MetaData/TypeInfoData/NOx_2040[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   NOx_2050 := value(MetaData/TypeInfoData/NOx_2050[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   SO2_2010 := value(MetaData/TypeInfoData/SO2_2010[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   SO2_2020 := value(MetaData/TypeInfoData/SO2_2020[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   SO2_2030 := value(MetaData/TypeInfoData/SO2_2030[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   SO2_2040 := value(MetaData/TypeInfoData/SO2_2040[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   SO2_2050 := value(MetaData/TypeInfoData/SO2_2050[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   VOS_2010 := value(MetaData/TypeInfoData/VOS_2010[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   VOS_2020 := value(MetaData/TypeInfoData/VOS_2020[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   VOS_2030 := value(MetaData/TypeInfoData/VOS_2030[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   VOS_2040 := value(MetaData/TypeInfoData/VOS_2040[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   VOS_2050 := value(MetaData/TypeInfoData/VOS_2050[TypeInfo_rel],g_GJ );
				attribute< g_GJ>   TS_2010  := value(MetaData/TypeInfoData/TS_2010 [TypeInfo_rel],g_GJ );
				attribute< g_GJ>   TS_2020  := value(MetaData/TypeInfoData/TS_2020 [TypeInfo_rel],g_GJ );
				attribute< g_GJ>   TS_2030  := value(MetaData/TypeInfoData/TS_2030 [TypeInfo_rel],g_GJ );
				attribute< g_GJ>   TS_2040  := value(MetaData/TypeInfoData/TS_2040 [TypeInfo_rel],g_GJ );
				attribute< g_GJ>   TS_2050  := value(MetaData/TypeInfoData/TS_2050 [TypeInfo_rel],g_GJ );
				attribute<String>  Eigenaar;
				attribute<String>  Brandstof;

				// aspects				
				attribute<String>    Label:           Expr = "Naam",                                   DialogType = "LabelText";
				attribute<Float64>   SymbolWorldSize: Expr = "Sqrt(MWth_max * value(100000, 1 / MW))", DialogType = "SymbolWorldSize";
				parameter<int16>     SymbolIndex:     Expr = "int16(44)",                              DialogType = "SymbolIndex";
			}
			template BronSelectieTempl
			{
				parameter<units/yr_uint16> Jaar;
				unit<uint32> WarmteBronnen := Bron;
				
				unit<UInt32> BronElementen := SubSet(WarmteBronnen/ingebruik <= Jaar)
				{
//					attribute<WarmteBronnen> WarmteBron_rel := nr_OrgEntity;

					attribute<units/yr_uint16> ingebruik := WarmteBronnen/ingebruik[nr_OrgEntity];
					
					attribute<String>     Label := WarmteBronnen/Label[nr_OrgEntity], DialogType = "LabelText";
					attribute<MetaData/TypeInfoList> TypeInfoList_rel := WarmteBronnen/TypeInfoList_rel[nr_OrgEntity];
		
					attribute<rdc_meter>  Point:        Expr = "WarmteBronnen/P         [nr_OrgEntity]";
					attribute<MW>         MWTh_min:     Expr = "WarmteBronnen/MWth_min  [nr_OrgEntity]";
					attribute<Eur_kW>     K_kW_min:     Expr = "WarmteBronnen/K_kW_min  [nr_OrgEntity]";
					attribute<Eur_kW>     K_kW_max:     Expr = "WarmteBronnen/K_kW_max  [nr_OrgEntity]";
					attribute<_yr>        Rj_Onderhoud: Expr = "WarmteBronnen/Rj_Onderhoud[nr_OrgEntity]";
					attribute<MW>         MWth_max:     Expr = "WarmteBronnen/MWth_max  [nr_OrgEntity]";
					attribute<Eur_GJ>     K_GJ:         Expr = 
						"(Jaar < 2020[units/yr_uint16] ? WarmteBronnen/K_GJ10 :  "
						" Jaar < 2030[units/yr_uint16] ? WarmteBronnen/K_GJ20 :  "
						" Jaar < 2040[units/yr_uint16] ? WarmteBronnen/K_GJ30 :  "
						" Jaar < 2050[units/yr_uint16] ? WarmteBronnen/K_GJ40 :  "
						" WarmteBronnen/K_GJ50 )  "
						"[nr_OrgEntity]";
						
					attribute<KG_GJ> CO2_GJ := ='WarmteBronnen/CO2_'+String(Jaar)+'[nr_OrgEntity]';
					attribute<G_GJ>  NOx_GJ := ='WarmteBronnen/NOx_'+String(Jaar)+'[nr_OrgEntity]';
					attribute<G_GJ>  SO2_GJ := ='WarmteBronnen/SO2_'+String(Jaar)+'[nr_OrgEntity]';					
					attribute<G_GJ>  VOS_GJ := ='WarmteBronnen/VOS_'+String(Jaar)+'[nr_OrgEntity]';
					attribute<G_GJ>  TS_GJ  := ='WarmteBronnen/TS_' +String(Jaar)+'[nr_OrgEntity]';
				}
				unit<UInt32> Bronnen := Unique(BronElementen/Point), DialogType = "Map", DialogData = "Point"
				{
					attribute<String>     Label:        Expr = "AsItemList(BronElementen/Label, per_BronElementen)", DialogType = "LabelText";

//					attribute<WarmteBronnen> WarmteBron_rel := modus_weighted(BronElementen/WarmteBron_rel, Jaar+1[units/yr_uint16]-BronElementen/ingebruik, per_BronElementen);
					
					attribute<.> per_BronElementen(BronElementen) := rlookup(BronElementen/Point, Values);
					attribute<MetaData/TypeInfoList> TypeInfoList_rel := modus_weighted(BronElementen/TypeInfoList_rel, BronElementen/MWth_max, per_BronElementen);
					
					attribute<rdc_meter>  Point:        Expr = "Values";
					attribute<Eur_kW>     K_kW_min:     Expr = "sum(BronElementen/K_kW_min * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen)";
					attribute<Eur_kW>     K_kW_max:     Expr = "sum(BronElementen/K_kW_max * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen)";
					attribute<MW>         MWth_max:     Expr = "sum(BronElementen/MWth_max, per_BronElementen)";
					attribute<MW>         MWth_min:     Expr = "sum(BronElementen/MWth_min, per_BronElementen)";
					attribute<_yr>        Rj_Onderhoud: Expr = "sum(BronElementen/Rj_Onderhoud * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen)";
					attribute<Eur_GJ>     K_GJ:         Expr = "sum(BronElementen/K_GJ         * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen)";
					attribute<KG_GJ >     CO2_GJ := sum(BronElementen/CO2_GJ * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
					attribute<G_GJ >      NOx_GJ := sum(BronElementen/NOx_GJ * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
					attribute<G_GJ >      SO2_GJ := sum(BronElementen/SO2_GJ * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
					attribute<G_GJ >      VOS_GJ := sum(BronElementen/VOS_GJ * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
					attribute<G_GJ >      TS_GJ  := sum(BronElementen/TS_GJ  * BronElementen/MWth_max, per_BronElementen) / sum(BronElementen/MWth_max, per_BronElementen);
					attribute<m>          cumulDist:    Expr = "const(0[m], .)";
					attribute<MW>         cumulP:       Expr = "const(0[MW], .)";
					attribute<Bronnen>    Bronnen_rel:  Expr = "ID(.)";
					
					attribute<Eur_kW>    Ki_kW_min := K_kW_min;
					attribute<Eur_kW>    Ki_kW_max := K_kW_max;
				}
			}
			container BronSelecties := for_each_ne(Classifications/zichtjaar/name, 'BronSelectieTempl('+String(Classifications/zichtjaar/Jaar)+'[units/yr_uint16])');
		}
		template TypeInfoTempl
		{
			parameter<String> InstallatieTypeName;

			parameter<MetaData/TypeInfoData> TypeInfo_rel     := rlookup(InstallatieTypeName, MetaData/TypeInfoData/Type);
			parameter<MetaData/TypeInfoList> TypeInfoList_rel := MetaData/TypeInfoData/TypeInfoList_rel[TypeInfo_rel];
			parameter<MetaData/RekenType>    RekenType_rel    := MetaData/TypeInfoData/RekenType_rel   [TypeInfo_rel];
			parameter<MW>      MWth_min := value(MetaData/TypeInfoData/MWth_min[ TypeInfo_rel ], MW);
			parameter<Eur_kW > K_kW_min := value(MetaData/TypeInfoData/K_kW_min[ TypeInfo_rel ], Eur_kW);
			parameter<Eur_kW > K_kW_max := value(MetaData/TypeInfoData/K_kW_max[ TypeInfo_rel ], Eur_kW);
			parameter<_yr>     Rj_Onderhoud := value(MetaData/TypeInfoData/JaarKosten[ TypeInfo_rel ], _yr);
			parameter<Eur_GJ > K_GJ10   := value(MetaData/TypeInfoData/K_GJ10[ TypeInfo_rel ], Eur_GJ);
			parameter<Eur_GJ > K_GJ20   := value(MetaData/TypeInfoData/K_GJ20[ TypeInfo_rel ], Eur_GJ);
			parameter<Eur_GJ > K_GJ30   := value(MetaData/TypeInfoData/K_GJ30[ TypeInfo_rel ], Eur_GJ);
			parameter<Eur_GJ > K_GJ40   := value(MetaData/TypeInfoData/K_GJ40[ TypeInfo_rel ], Eur_GJ);
			parameter<Eur_GJ > K_GJ50   := value(MetaData/TypeInfoData/K_GJ50[ TypeInfo_rel ], Eur_GJ);
			
			container RekenType := ='MetaData/RekenTypes/'+MetaData/RekenType/Naam[RekenType_rel];
		}
		container GeoThermie: Descr = "zie FO $3.4"
		{
			container import
			{
				unit<UInt32> ContourSet: 
					StorageName      = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.dbf",
					StorageReadOnly = "True",
					url             = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.txt",
					DialogType      = "Map",
					DialogData      = "geometry"
				{
					attribute<rdc_meter> geometry (poly): StorageName = "%sourceDataProjDir%/aanbod/GeoThermie/GT_GTB_zone_1_2.shp", StorageReadOnly = "True";
	//				attribute<string>    GEOTHERMIE;
					attribute<Int32>    ID;
				}
			}
			container TypeInfo := TypeInfoTempl('Geothermie');
			
			unit<UInt32> ContourSet :=  Subset(import/ContourSet/ID != 0i), FreeData = "False"
			{
				attribute<rdc_meter>  geometry(poly): Expr = "import/ContourSet/geometry[nr_OrgEntity]";
				attribute<ContourSet> Grid     (Geography/rdc_grids/m100) := poly2grid(geometry, Geography/rdc_grids/m100), FreeData = "True";
				unit<UInt32> PointSet: Expr = "SubSet(IsDefined(Grid))", FreeData = "False"
				{
					attribute<rdc_meter> Point: Expr = "rdc_grids/m100/point[nr_OrgEntity]";
				}
			}
		}
		container WKO: Descr = "zie FO $3.4"
		{
			unit<UInt32> ContourSet: 
				StorageName      = "%sourceDataProjDir%/Aanbod/WKO/OS_WARM_900_4560_GJ_hectare_jaar_Grondwaterbeschermingsgebieden_2008_PBL_GWB_1_2_PMV_Utr.dbf",
				StorageReadOnly = "True",
				url             = "%sourceDataProjDir%/Aanbod/WKO/OS_WARM_900_4560_GJ_hectare_jaar_Grondwaterbeschermingsgebieden_2008_PBL_GWB_1_2_PMV_Utr.txt",
				DialogType      = "Map",
				DialogData      = "geometry"
			{
				attribute<rdc_meter> geometry(poly): StorageName = "%sourceDataProjDir%/Aanbod/WKO/OS_WARM_900_4560_GJ_hectare_jaar_Grondwaterbeschermingsgebieden_2008_PBL_GWB_1_2_PMV_Utr.shp", StorageReadOnly = "True";
				attribute<string>    WKO;
				attribute<Bool>      Geschikt: Expr = "WKO == 'geschikt' || WKO == 'zeer geschikt'";
			}
			unit<uint32> GeschikteContour := subset(ContourSet/Geschikt), FreeData = "False"
			{
				container impl : FreeData = "True"
				{
					attribute<rdc_meter> geometry  (poly, GeschikteContour) := ContourSet/geometry[nr_OrgEntity];
				}
				attribute<ContourSet> Grid(Geography/rdc_grids/m100) := poly2grid(impl/geometry, Geography/rdc_grids/m100), FreeData = "False";
			}
		}
		container WijkWKK: Descr = "zie FO $3.4"
		{
			container TypeInfo := TypeInfoTempl('WijkWKK');
		}
		container BioWKK: Descr = "zie FO $3.4"
		{
			container TypeInfo := TypeInfoTempl('BioWKK');
		}
		container Gas: Descr = "Gasleidingennet beheersgebied Stedin"
		{
			unit<UInt32> Leiding: 
				StorageName      = "%sourceDataProjDir%/Aanbod/Gas/Leidingen.dbf",
				StorageReadOnly = "True",
				DialogType      = "Map",
				DialogData      = "Leidingen",
				url             = "%sourceDataProjDir%/Aanbod/Gas/Gasvervangingsdata _ Stedin Zakelijk.htm",
				Source          = "download van website op 29 maart 2017: https://www.stedin.net/zakelijk/open-data/gasvervangingsdata/#gasvervangingsbestand"
								  "conversie van geometry ZM-bestand naar normaal geometry-bestand in ArcGIS 10.3 mbv Copy features", 
				SyncMode        = "All"
				{
					attribute<rdc_meter> Leidingen(arc): StorageName = "%sourceDataProjDir%/Aanbod/Gas/Leidingen.shp";
					attribute<string> Status;
					attribute<Classifications/StatusKl> Status_rel := rlookup(Status, Classifications/StatusKl/label);
				}
		}
	}

	container VraagReductiePrijzen: Descr = "zie FO $3.6"
	{
	}
	container HuidigeNetten: Descr = "zie FO $3.8"
	{
	}
	container DraagvlagIndicatoren: Descr = "zie FO $4.1"
	{
		
	}
	
	container FysiekeConstanten
	{
		parameter<GJ_m3> GasEnergie := 31.65[ MJ / m3 ] / 1000[ MJ  / GJ ]; // ondergrens
//		parameter<GJ_m3> GasEnergie := 35.17[ MJ / m3 ] / 1000[ MJ  / GJ ]; // bovengrens, rekening houdend met eficientere verbranding (o.a. condensatiewarmte van waterdamp)
	}
	
	
	container klimaat
	{
		container Jaar_1976_2005
		{
			attribute<float32> TovDeBilt (Geography/rdc_grids/m100): StorageName = "%sourceDataProjDir%/hulpbestanden/klimaat/1976-2005/klimaat_1976_2005.tif";
		}
		container de_bilt:= 
			for_each_nedv(Classifications/zichtjaar/name, 'een'
			, Geography/rdc_grids/m100, float32
			)
		{
			attribute<float32> een (Geography/rdc_grids/m100) := const(1.0, Geography/rdc_grids/m100, float32);
		}
		container scenario_knmi_w := 
			for_each_ndva(Classifications/zichtjaar/name
			, Geography/rdc_grids/m100, float32
			, '%sourceDataProjDir%/hulpbestanden/klimaat/scenario_knmi_w/w_' + Classifications/zichtjaar/label + '.tif'
			);
		container scenario_knmi_g_plus := 
			for_each_ndva(  Classifications/zichtjaar/name
			, Geography/rdc_grids/m100, float32
			, '%sourceDataProjDir%/hulpbestanden/klimaat/scenario_knmi_g_plus/g_pl_' + Classifications/zichtjaar/label + '.tif'
			);
	}
	container Leercurves
	{
		// Optie 1a, 2: SchilVerbetering
			// LabelCategorieen: {C-up, B-Dn, Verder dan B}
			// jaren: 2010..2050
			// {pessimistisch, Optimistisch}
		unit<UInt32> TabelJaar: nrofrows = 5 
		{
			attribute<units/yr_uint16> Jaar: [ 2010, 2020, 2030, 2040, 2050 ];
		}
		container Schil: Source = "email?date=22-01-2013&sender=Ruud.vandenWijngaart@pbl.nl"
		{
			container Pessimistisch
			{
				attribute<Percent> Cmin  (TabelJaar): [ 100, 101, 102, 109, 115 ], Source = "email?date=22-01-2013&sender=Ruud.vandenWijngaart@pbl.nl#optie 1a.xlsx#Pessimistisch";
				attribute<Percent> Bpls  (TabelJaar): [ 100, 101, 105, 110, 116 ], Source = "email?date=22-01-2013&sender=Ruud.vandenWijngaart@pbl.nl#optie 1a.xlsx#Pessimistisch";
				attribute<Percent> Verder(TabelJaar): [ 100, 80, 70, 64, 59 ], Source = "Rapport Vesta 2.0 Uitbreidingen en dataverificaties Delft augustus 2013 CE-Delft tabel 29"; // Huidige kosten E 80.000,- per woning
			}
			container Optimistisch
			{
				attribute<Percent> Cmin  (TabelJaar): [ 100, 85, 73, 63, 54 ], Source = "email?date=22-01-2013&sender=Ruud.vandenWijngaart@pbl.nl#optie 1a.xlsx#Optimistisch";
				attribute<Percent> Bpls  (TabelJaar): [ 100, 85, 72, 61, 52 ], Source = "email?date=22-01-2013&sender=Ruud.vandenWijngaart@pbl.nl#optie 1a.xlsx#Optimistisch";
				attribute<Percent> Verder(TabelJaar): [ 100, 72, 58, 49, 43 ], Source = "Rapport Vesta 2.0 Uitbreidingen en dataverificaties Delft augustus 2013 CE-Delft tabel 29"; // Huidige kosten E 60.000,- per woning
			}
		}
		// Optie 1b en 5: gebouwmaatregelen
			//	{HR-ketel, HRe-ketel, Zonneboiler, eWP (l/w), eWP (w/w), Zon-PV, LTV, EWV}  kosten in woningtabel
			// jaren: 2010..2050
			// {pessimistisch, Optimistisch}
		container Installatie
		{
			container Pessimistisch
			{
				//attribute<Percent> HR (TabelJaar): [ 100, 93, 88, 85, 83 ]; // dit wordt niet gebruikt!
				attribute<Percent> mWKK (TabelJaar): [ 100, 80, 70, 64, 59 ], Source = "#optie 1b.xlsx#Pessimistisch"; // in de excel tabel is dit de rij HRe
				attribute<Percent> ZonB (TabelJaar): [ 100, 91, 85, 80, 77 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Pessimistisch";
				attribute<Percent> ZonPV(TabelJaar): [ 100, 52, 37, 32, 27 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Pessimistisch";
				attribute<Percent> eWPlw(TabelJaar): [ 100, 80, 70, 64, 59 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Pessimistisch"; 
				attribute<Percent> eWPww(TabelJaar): [ 100, 88, 80, 74, 70 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Pessimistisch"; // deze wordt niet gebruikt!
				attribute<Percent> hWP  (TabelJaar) := eWPlw;
				attribute<Percent> EWV  (TabelJaar): [ 100, 99, 100, 103, 107 ], Source = "rapport CE-Delft Ruud 180413#optie 5.xlsx#Pessimistisch";
			}
			container Optimistisch
			{
				//attribute<Percent> HR   (TabelJaar): [ 100, 88, 79, 73, 68 ]; // dit wordt niet gebruikt!
				attribute<Percent> mWKK (TabelJaar): [ 100, 72, 58, 49, 43 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Optimistisch"; // in de excel tabel is dit de rij HRe
				attribute<Percent> ZonB (TabelJaar): [ 100, 85, 75, 67, 62 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Optimistisch";
				attribute<Percent> ZonPV(TabelJaar): [ 100, 40, 28, 25, 21 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Optimistisch";
				attribute<Percent> eWPlw(TabelJaar): [ 100, 72, 58, 49, 43 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Optimistisch";
				attribute<Percent> eWPww(TabelJaar): [ 100, 81, 69, 60, 54 ], Source = "rapport CE-Delft Ruud 180413#optie 1b.xlsx#Optimistisch"; // deze wordt niet gebruikt!
				attribute<Percent> hWP  (TabelJaar)  := eWPlw;
				attribute<Percent> EWV  (TabelJaar): [ 100, 87, 77, 70, 64 ], Source = "rapport CE-Delft Ruud 180413#optie 5.xlsx#Optimistisch";
			}
		}
	}
}
