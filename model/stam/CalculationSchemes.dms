//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// Dit is de container met rekenschema's van de configuratie voor het project Vesta     //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container CalculationSchemes: Using = "Units;Geography", isHidden = "True"
{

	#include <EnergieKengetallen.dms>

	#include <WoningComponentOperaties.dms>
	#include <UtilComponentOperaties.dms>
	#include <GlTbComponentOperaties.dms>
	#include <LegeBebouwingsComponent.dms>
	

	container BebouwingsOperaties
	{
		template Samenstelling
		{
			container Woning;
			container NieuwbouwWoning;
			parameter<bool> HasWoningResterendFactors;
			container WoningResterendFactors;
			container Utiliteit;
			container NieuwbouwUtil;
			parameter<bool> HasUtiliteitResterendFactors;
			container UtiliteitResterendFactors;
			container GlasTuinbouw;
			container NieuwbouwGLTB;
			parameter<bool> HasGlasTuinbouwResterendFactors;
			container GlasTuinbouwResterendFactors;
		}
		template Union
		{
			container BestaandeState;
			container Nieuwbouw;
			
			container Bestaand := BestaandeState/Bebouwing;
			
			unit<uint32> BebouwingsObject := union_unit(Bestaand/BebouwingsObject, Nieuwbouw/BebouwingsObject)
			,	DialogType = "Map"
			,	DialogData = "Pnt"
			{
				attribute<Geography/rdc_meter> Pnt := Point;
				attribute<string> Code  := union_data(BebouwingsObject, Bestaand/BebouwingsObject/Code,  Nieuwbouw/BebouwingsObject/Code);
				attribute<String> Label := union_data(BebouwingsObject, Bestaand/BebouwingsObject/Label, Nieuwbouw/BebouwingsObject/Label), DialogType = "LabelText";
				parameter<m> SymbolWorldSize: [ 50 ], DialogType = "SymbolWorldSize";
			}
			
			unit<Float64> JoinedUnit := valuesunit(Bestaand/NrJoinedUnits);
			unit<uint8>  BebouwingsTypeDomein := Bestaand/BebouwingsTypeDomein;
			
			attribute<JoinedUnit>                      NrJoinedUnits  (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/NrJoinedUnits, Nieuwbouw/NrJoinedUnits);
			attribute<Geography/RegioIndelingen/PC4>      PC4_rel     (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/PC4_rel, Nieuwbouw/PC4_rel);
			attribute<Geography/RegioIndelingen/blok500m> blok500m_rel(BebouwingsObject) := union_data(BebouwingsObject, Bestaand/blok500m_rel, Nieuwbouw/blok500m_rel);
			attribute<Geography/RegioIndelingen/blok1km>  blok1km_rel (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/blok1km_rel, Nieuwbouw/blok1km_rel);
			attribute<Geography/RegioIndelingen/blok2km>  blok2km_rel (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/blok2km_rel, Nieuwbouw/blok2km_rel);
			attribute<Geography/rdc_meter>           Point            (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/Point, Nieuwbouw/Point);
			attribute<BebouwingsTypeDomein>          BebouwingsType   (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/BebouwingsType, Nieuwbouw/BebouwingsType);
			attribute<Classifications/BouwJaar>      Bouwjaar         (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/Bouwjaar, Nieuwbouw/Bouwjaar);
			attribute<uint8>                         ModelObjectKey          (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/ModelObjectKey, Nieuwbouw/ModelObjectKey);
			attribute<nrAansl>                       nrAansluitingen  (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/nrAansluitingen, Nieuwbouw/nrAansluitingen);
			attribute<nrWoningen>                    nrWoonUnits      (BebouwingsObject) := union_data(BebouwingsObject, Bestaand/nrWoonUnits, Nieuwbouw/nrWoonUnits);

			attribute<Float64>                    AandeelWarmteVraag(BebouwingsObject):= union_data(BebouwingsObject, Bestaand/AandeelWarmteVraag, Nieuwbouw/AandeelWarmteVraag);
		
			attribute<String> Label(BebouwingsObject) := BebouwingsObject/Label;
			container Gebied
			{
				attribute<Float64> n     (BebouwingsObject):= union_data(BebouwingsObject, Bestaand/Gebied/n,      Nieuwbouw/Gebied/n);
				attribute<Float64> MEAN_x(BebouwingsObject):= union_data(BebouwingsObject, Bestaand/Gebied/MEAN_x, Nieuwbouw/Gebied/MEAN_x);
				attribute<Float64> MEAN_y(BebouwingsObject):= union_data(BebouwingsObject, Bestaand/Gebied/MEAN_y, Nieuwbouw/Gebied/MEAN_y);
				attribute<Float64> SSD_xx(BebouwingsObject):= union_data(BebouwingsObject, Bestaand/Gebied/SSD_xx, Nieuwbouw/Gebied/SSD_xx);
				attribute<Float64> SSD_xy(BebouwingsObject):= union_data(BebouwingsObject, Bestaand/Gebied/SSD_xy, Nieuwbouw/Gebied/SSD_xy);
				attribute<Float64> SSD_yy(BebouwingsObject):= union_data(BebouwingsObject, Bestaand/Gebied/SSD_yy, Nieuwbouw/Gebied/SSD_yy);
			}
 			container Criteria;
		}
	}

	#include <VestaRun.dms>
	#include <Payments.dms>
	#include <Transformations.dms>
	
	#include <StartingStateComponent.dms>
	#include <VestaRunDataComponent.dms>
	
	#include <AllocatieResultaatComponent.dms>
	
	Template GridAggrComponent
	{
		container AllocatieResultaatComponent;
		parameter<String> WkoResultsRef; 
		
		container impl: IsHidden = "True"
		{
			container VestaRunDataComponent     := AllocatieResultaatComponent/VestaRunDataComponent;
			container RuimtelijkeVraagComponent := AllocatieResultaatComponent/RuimtelijkeVraagComponent;
			unit<UInt32> BebouwingsObject       := AllocatieResultaatComponent/BebouwingsObject;
			
			attribute<Geography/rdc_grids/m100> GridCellID(BebouwingsObject): Expr = "RuimtelijkeVraagComponent/GridCellID";
		}
		container Vraag
		{
			attribute<GJ_yr> AardGas      (Geography/rdc_grids/m100) := sum(AllocatieResultaatComponent/MeterVraag/AardGas      , impl/GridCellID);
			attribute<GJ_yr> RestWarmte   (Geography/rdc_grids/m100) := sum(AllocatieResultaatComponent/MeterVraag/RestWarmte   , impl/GridCellID);
			attribute<GJ_yr> GeoThermie   (Geography/rdc_grids/m100) := sum(AllocatieResultaatComponent/MeterVraag/GeoThermie   , impl/GridCellID);
			attribute<GJ_yr> WijkWKK      (Geography/rdc_grids/m100) := sum(AllocatieResultaatComponent/MeterVraag/WijkWKK      , impl/GridCellID);
			attribute<GJ_yr> WKO          (Geography/rdc_grids/m100) := sum(AllocatieResultaatComponent/MeterVraag/WKO          , impl/GridCellID);
			attribute<GJ_yr> Elektriciteit(Geography/rdc_grids/m100) := sum(AllocatieResultaatComponent/MeterVraag/Elektriciteit, impl/GridCellID);
			attribute<GJ_yr> Totaal       (Geography/rdc_grids/m100) := AardGas + RestWarmte + GeoThermie + WijkWKK + WKO + Elektriciteit;
		}
		container AansluitCapaciteit
		{
			attribute<kW> Totaal (Geography/rdc_grids/m100) := sum(impl/RuimtelijkeVraagComponent/AansluitCapaciteit/Warmte,   impl/GridCellID);
			attribute<kW> AardGas(Geography/rdc_grids/m100) := sum(impl/VestaRunDataComponent/WarmteVraagA/AansluitCapaciteit, impl/GridCellID);
			attribute<kW> Overig (Geography/rdc_grids/m100) := Totaal - AardGas;
		}
		container WKO
		{
			attribute<GJ_yr>  V_Warmte   (Geography/rdc_grids/m100) := =WkoResultsRef == '' ? 'const(0[GJ_yr], Geography/rdc_grids/m100)' : 'sum('+WkoResultsRef+'/V_Warmte, impl/GridCellID)';
			attribute<GJ_yr>  V_Koude    (Geography/rdc_grids/m100) := =WkoResultsRef == '' ? 'const(0[GJ_yr], Geography/rdc_grids/m100)' : 'sum('+WkoResultsRef+'/V_Koude , impl/GridCellID)';
			attribute<GJ_yr>  V_Elek     (Geography/rdc_grids/m100) := =WkoResultsRef == '' ? 'const(0[GJ_yr], Geography/rdc_grids/m100)' : 'sum('+WkoResultsRef+'/V_Elek  , impl/GridCellID)';
			attribute<GJ_yr>  Onttrekking(Geography/rdc_grids/m100) := V_Warmte - (V_Koude + V_Elek);
			
			attribute<kW> Capaciteit(Geography/rdc_grids/m100) := =WkoResultsRef == '' ? 'const(0[kW], Geography/rdc_grids/m100)' : 'sum('+WkoResultsRef+'/P_Warmte,     impl/GridCellID)';
		}
	}
	
	Template PotentialComponent
	{
		container GridAggr;
		unit<spoint> Kernel := Geography/DistMatrices/pot1000mRange;
		
		attribute<Units/GJ_yr> AardGas      (Geography/rdc_grids/m100) := Float64(potential(Float32(GridAggr/AardGas),       Kernel/Cilindrical));
		attribute<Units/GJ_yr> RestWarmte   (Geography/rdc_grids/m100) := Float64(potential(Float32(GridAggr/RestWarmte),    Kernel/Cilindrical));
		attribute<Units/GJ_yr> GeoThermie   (Geography/rdc_grids/m100) := Float64(potential(Float32(GridAggr/GeoThermie),    Kernel/Cilindrical));
		attribute<Units/GJ_yr> WijkWKK      (Geography/rdc_grids/m100) := Float64(potential(Float32(GridAggr/WijkWKK),       Kernel/Cilindrical));
		attribute<Units/GJ_yr> WKO          (Geography/rdc_grids/m100) := Float64(potential(Float32(GridAggr/WKO),           Kernel/Cilindrical));
		attribute<Units/GJ_yr> Elektriciteit(Geography/rdc_grids/m100) := Float64(potential(Float32(GridAggr/Elektriciteit), Kernel/Cilindrical));
		attribute<Units/GJ_yr> Totaal       (Geography/rdc_grids/m100) := Float64(potential(Float32(GridAggr/Totaal),        Kernel/Cilindrical));
	}
	
	Template AggrComponent
	{
		container VestaRunDataComponent;
		
		unit<uint32>                           BebouwingsObject                           := VestaRunDataComponent/BebouwingsObject;
		attribute<Classifications/AanbodOptie> WarmteAllocatieComponent(BebouwingsObject) := VestaRunDataComponent/WarmteAllocatie;
		
		parameter<Eur_GJ> WarmtePrijs := VestaRunDataComponent/Warmtewet/WarmtePrijs;
		
		container impl: IsHidden = "True"
		{
			unit<Float64>        ModelUnit                                := VestaRunDataComponent/EnergieVraagModellen/ModelUnit;
			attribute<PlanRegio> PlanRegio_rel          (BebouwingsObject):= VestaRunDataComponent/PlanRegio_rel;
			attribute<Float64>   BeschikbaarheidsFactor (BebouwingsObject):= Float64(!IsDefined(WarmteAllocatieComponent)); // per PlanRegio moet toch per keuze worden gecheckt  * Float64(!IsDefined(PlanRegioWarmteAllocatie[PlanRegio_rel]));
		}

		attribute<nrAansl>        nrAanslWarmteD     (PlanRegio) := sum(impl/BeschikbaarheidsFactor * VestaRunDataComponent/WarmteVraagD/nrAansluitingen,    impl/PlanRegio_rel);
		attribute<impl/ModelUnit> nrModelUnitsWarmteD(PlanRegio) := sum(impl/BeschikbaarheidsFactor * VestaRunDataComponent/WarmteVraagD/nrModelUnits,       impl/PlanRegio_rel);
		attribute<Units/kW>       CapaciteitWarmteD  (PlanRegio) := sum(impl/BeschikbaarheidsFactor * VestaRunDataComponent/WarmteVraagD/AansluitCapaciteit, impl/PlanRegio_rel);
		
		attribute<Units/GJ_yr>    VerbruikD_obj      (BebouwingsObject) := VestaRunDataComponent/WarmteVraagD/Verbruik;
		attribute<Units/Eur_yr>   WarmteVraagD_obj   (BebouwingsObject) := WarmtePrijs      * VerbruikD_obj, Source = "FO v7a F 8-10";
		
		attribute<Units/GJ_yr>    VerbruikD          (PlanRegio) := sum(impl/BeschikbaarheidsFactor * VestaRunDataComponent/WarmteVraagD/Verbruik,         impl/PlanRegio_rel);
		attribute<Units/Eur_yr>   WarmteVraagD       (PlanRegio) := WarmtePrijs        * VerbruikD, Source = "FO v7a F 8-10";
		
		attribute<Units/GJ_yr>    VerbruikA          (PlanRegio) := sum(impl/BeschikbaarheidsFactor * VestaRunDataComponent/WarmteVraagA/Verbruik,         impl/PlanRegio_rel);
		attribute<Units/Eur_yr>   WarmteVraagA       (PlanRegio) := WarmtePrijs        * VerbruikA, Source = "FO v7a F 8-10";
	}

	#include <EnergiePrijzen.dms>

	#include <KostenBatenSchema.dms>
	#include <NcwSchema.dms>
	#include <AanbodOpties.dms>
	
	container Rapportage {
		#include <RegionaleRapportageTempl.dms>
		#include <FlowTempl.dms>

		template EindgebruikerComponentTempl
		{
			container AllocatieResultaatComponent;
			container NCW15;
			container NCW30;
			container NCW50;
			
			attribute<Eur_yr> Oj_VastRechtG(PlanRegio);
			attribute<Eur   > Oi_AansluitG (PlanRegio);
			attribute<Eur_yr> Oj_VastRechtE(PlanRegio);
			attribute<Eur   > Oi_AansluitE (PlanRegio);
			
			container Pc4KaartComponent;
			
			container VestaRunDataComponent    := AllocatieResultaatComponent/VestaRunDataComponent;
			container RuimtelijkeVraagComponent:= AllocatieResultaatComponent/RuimtelijkeVraagComponent;
			unit<uint32> BebouwingsObject      := VestaRunDataComponent/BebouwingsObject;
			
			parameter<Ratio> BTW_Factor    := VestaRunDataComponent/BTW_Factor;
			parameter<Ratio> BTW_Factor_gv := VestaRunDataComponent/BTW_Factor_gv;
			
			container gebouwen {
				container Elektriciteit {
					attribute<Eur_yr> Verbruik      (PlanRegio) := sum(AllocatieResultaatComponent/Elektriciteit/eindgebruik_ex, VestaRunDataComponent/PlanRegio_rel);
					attribute<Eur_yr> netwerk       (PlanRegio) := sum(AllocatieResultaatComponent/Elektriciteit/netwerk,        VestaRunDataComponent/PlanRegio_rel);
					attribute<Eur_yr> EnergieHeffing(PlanRegio) := sum(AllocatieResultaatComponent/Elektriciteit/EnergieHeffing, VestaRunDataComponent/PlanRegio_rel);
					attribute<Eur_yr> CO2Heffing    (PlanRegio) := sum(AllocatieResultaatComponent/Elektriciteit/CO2Heffing,     VestaRunDataComponent/PlanRegio_rel);
					
					attribute<Eur_yr> VastRecht     (PlanRegio):= Oj_VastRechtE;
					attribute<Eur_yr> Aansl_j       (PlanRegio):= Oi_AansluitE * Ncw50/AnnualisationFactor;
					attribute<Eur_yr> Aansl_m       (PlanRegio):= Oi_AansluitE * Ncw/mr50/AnnualisationFactor;
					
					attribute<Eur_yr> Vraag_ex      (PlanRegio) := Verbruik + VastRecht + Aansl_j;
					attribute<Eur_yr> Vraag_m       (PlanRegio) := Verbruik + Vastrecht + Aansl_m - EnergieHeffing;
				}
				container AardGas {
					attribute<Eur_yr> Verbruik      (PlanRegio) := sum(AllocatieResultaatComponent/AardGas/eindgebruik_ex, VestaRunDataComponent/PlanRegio_rel);
					attribute<Eur_yr> netwerk       (PlanRegio) := sum(AllocatieResultaatComponent/AardGas/netwerk,        VestaRunDataComponent/PlanRegio_rel);
					attribute<Eur_yr> EnergieHeffing(PlanRegio) := sum(AllocatieResultaatComponent/AardGas/EnergieHeffing, VestaRunDataComponent/PlanRegio_rel);
					attribute<Eur_yr> CO2Heffing    (PlanRegio) := sum(AllocatieResultaatComponent/AardGas/CO2Heffing,     VestaRunDataComponent/PlanRegio_rel);
							
					attribute<Eur_yr> VastRecht     (PlanRegio):= Oj_VastRechtG;
					attribute<Eur_yr> Aansl_j       (PlanRegio):= Oi_AansluitG  * Ncw50/AnnualisationFactor;
					attribute<Eur_yr> Aansl_m       (PlanRegio):= Oi_AansluitG  * Ncw/mr50/AnnualisationFactor;
					
					attribute<Eur_yr> Vraag_ex      (PlanRegio):= Verbruik + VastRecht + Aansl_j;
					attribute<Eur_yr> Vraag_m       (PlanRegio):= Verbruik + VastRecht + Aansl_m - EnergieHeffing;
				}
				
				template GebiedsOptieTempl
				{
					// *** Vastrecht en aansluitbijdrage voor Deelnemers wordt nu ook meegenomen itt FO C6
					parameter<Classifications/AanbodOptie> Optie;
					attribute<Ratio> Aandeel(BebouwingsObject);
					
					attribute<Eur_yr> Verbruik    (PlanRegio): = sum(Pc4KaartComponent/WarmteVraagD_obj                   * Aandeel, VestaRunDataComponent/PlanRegio_rel);
					attribute<Eur_yr> VastRecht   (PlanRegio): = sum(VestaRunDataComponent/Opbrengsten/VastRechtBijdrageD * Aandeel, VestaRunDataComponent/PlanRegio_rel);
					
					attribute<Eur>    Oi_AanslD   (PlanRegio) := sum(VestaRunDataComponent/Opbrengsten/AansluitBijdrageD  * Aandeel, VestaRunDataComponent/PlanRegio_rel);
					attribute<Eur_yr> Aansl_j     (PlanRegio) := Oi_AanslD * VestaRunDataComponent/NcwRefs/_28/StartDiscountFactor * VestaRunDataComponent/NcwRefs/_28/AnnualisationFactor;
					attribute<Eur_yr> Aansl_m     (PlanRegio) := Oi_AanslD * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor;
					
					attribute<Eur_yr> Vraag_ex    (PlanRegio): = Verbruik + VastRecht + Aansl_j;
					attribute<Eur_yr> Vraag_m     (PlanRegio): = Verbruik + VastRecht + Aansl_m;
				}
				container RestWarmte: = GebiedsOptieTempl(Classifications/AanbodOptie/V/RestWarmte, AllocatieResultaatComponent/Aandelen/RestWarmte);
				container GeoThermie: = GebiedsOptieTempl(Classifications/AanbodOptie/V/GeoThermie, AllocatieResultaatComponent/Aandelen/GeoThermie);
				container WijkWKK:    = GebiedsOptieTempl(Classifications/AanbodOptie/V/WijkWKK, AllocatieResultaatComponent/Aandelen/WijkWKK);
				container BioWKK:     = GebiedsOptieTempl(Classifications/AanbodOptie/V/BioWKK, AllocatieResultaatComponent/Aandelen/BioWKK);
				container WKO {
					parameter<bool> Active : =rjoin(VestaRunDataComponent/Tag,  Classifications/BebouwingsComponent/Name, Classifications/BebouwingsComponent/KanWKO);
					
					attribute<Ratio> Aandeel(BebouwingsObject): = AllocatieResultaatComponent/Aandelen/WKO;
					
					// *** Vastrecht en aansluitbijdrage voor Deelnemers wordt nu ook meegenomen itt FO C6
					
					attribute<Eur_yr> Warmte      (PlanRegio): = =Active ? 'sum(Pc4KaartComponent/WarmteVraagD_obj         * Aandeel, VestaRunDataComponent/PlanRegio_rel)' : 'const(0[Eur_yr], PlanRegio)';
					attribute<Eur_yr> Koude       (PlanRegio): = =Active ? 'sum(AllocatieResultaatComponent/KoudeAllocatie * Aandeel, VestaRunDataComponent/PlanRegio_rel)' : 'const(0[Eur_yr], PlanRegio)';
					attribute<Eur_yr> Om_Comfort  (PlanRegio): = =Active ? 'sum(AllocatieResultaatComponent/Om_Comfort     * Aandeel, VestaRunDataComponent/PlanRegio_rel)' : 'const(0[Eur_yr], PlanRegio)';
					
					attribute<Eur_yr> Verbruik    (PlanRegio): = =Active ? 'Warmte + Koude' : 'const(0[Eur_yr], PlanRegio)';
					attribute<Eur_yr> VastRecht   (PlanRegio): = =Active ? 'sum(VestaRunDataComponent/Opbrengsten/VastRechtBijdrageD * Aandeel, VestaRunDataComponent/PlanRegio_rel)' : 'const(0[Eur_yr], PlanRegio)';
					
					attribute<Eur>    Aansl_i     (PlanRegio): = =Active ? 'EndState/WKO/Oi_Aansl/'+VestaRunDataComponent/Tag : 'const(0[Eur], PlanRegio)';
					attribute<Eur_yr> Aansl_j     (PlanRegio): = =Active ? 'Aansl_i * VestaRunDataComponent/NcwRefs/_28/StartDiscountFactor * VestaRunDataComponent/NcwRefs/_28/AnnualisationFactor' : 'const(0[Eur_yr], PlanRegio)';
					attribute<Eur_yr> Aansl_m     (PlanRegio): = =Active ? 'Aansl_i * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor' : 'const(0[Eur_yr], PlanRegio)';
					
					attribute<Eur_yr> Vraag_ex    (PlanRegio): = =Active ? 'Verbruik + VastRecht + Aansl_j' : 'const(0[Eur_yr], PlanRegio)';
					attribute<Eur_yr> Vraag_m     (PlanRegio): = =Active ? 'Verbruik + VastRecht + Aansl_m' : 'const(0[Eur_yr], PlanRegio)';
				}
				
				attribute<Eur>    Ki_GebouwVerbetering_excl(PlanRegio): = sum(VestaRunDataComponent/Kosten/Ki_GebouwVerbetering, VestaRunDataComponent/PlanRegio_rel);
				attribute<Eur_yr> Kw_GebouwVerbetering_excl(PlanRegio) := Ki_GebouwVerbetering_excl * NCW30/AnnualisationFactor;
				
				attribute<Eur_yr> Kw_Totaal_excl(PlanRegio): = Elektriciteit/Vraag_ex + AardGas/Vraag_ex + RestWarmte/Vraag_ex + GeoThermie/Vraag_ex + WKO/Vraag_ex + WijkWKK/Vraag_ex + BioWKK/Vraag_ex + Kw_GebouwVerbetering_excl;
				attribute<Eur_yr> Kj_OenM_base  (PlanRegio): = Ki_GebouwVerbetering_excl * VestaRunData/Onderhoud/Rj_GebouwVerbetering;
				attribute<Eur_yr> Kj_Onderh_excl(PlanRegio): = Kj_OenM_base * VestaRunData/Onderhoud/R_Onderhoud;
				attribute<Eur_yr> Kj_Admin_excl (PlanRegio): = Kj_OenM_base * VestaRunData/Onderhoud/R_Admin;
			}
			container LokaleEnergieProductie
			{
				attribute<Eur>    Ki_ZonneBoiler(PlanRegio): = sum(VestaRunDataComponent/kosten/Ki_ZonneBoiler,VestaRunDataComponent/PlanRegio_rel);
				attribute<Eur>    Ki_Zon_PV     (PlanRegio): = sum(VestaRunDataComponent/kosten/Ki_Zon_PV,     VestaRunDataComponent/PlanRegio_rel);
				attribute<Eur>    Ki_mWKK       (PlanRegio): = sum(VestaRunDataComponent/Kosten/Ki_mWKK,       VestaRunDataComponent/PlanRegio_rel);
				attribute<Eur>    Ki_eWP        (PlanRegio): = sum(VestaRunDataComponent/Kosten/Ki_eWP,        VestaRunDataComponent/PlanRegio_rel);
				attribute<Eur>    Ki_hWP        (PlanRegio): = sum(VestaRunDataComponent/Kosten/Ki_hWP,        VestaRunDataComponent/PlanRegio_rel);
				attribute<Eur>    Ki_EWV        (PlanRegio): = sum(VestaRunDataComponent/Kosten/Ki_EWV,        VestaRunDataComponent/PlanRegio_rel);
				attribute<Eur>    Ki_Totaal30   (PlanRegio): = sum(VestaRunDataComponent/Kosten/Ki_LokaleOpwekking30, VestaRunDataComponent/PlanRegio_rel);
				attribute<Eur>    Ki_Totaal15   (PlanRegio): = sum(VestaRunDataComponent/Kosten/Ki_LokaleOpwekking15, VestaRunDataComponent/PlanRegio_rel);
				
				attribute<Eur_yr> Kw_Totaal_excl(PlanRegio): = Ki_Totaal30 * Ncw30/AnnualisationFactor + Ki_Totaal15 * Ncw15/AnnualisationFactor;
				attribute<Eur_yr> Kj_OenM_base  (PlanRegio): = (Ki_Totaal30 + Ki_Totaal15) * VestaRunData/Onderhoud/Rj_LokaleOpwekking;
				attribute<Eur_yr> Kj_Onderh_excl(PlanRegio): = Kj_OenM_base * VestaRunData/Onderhoud/R_Onderhoud;
				attribute<Eur_yr> Kj_Admin_excl (PlanRegio): = Kj_OenM_base * VestaRunData/Onderhoud/R_Admin;
			}
			attribute<Eur_yr> Om_Comfort    (PlanRegio): = gebouwen/WKO/Om_Comfort;
			attribute<Eur_yr> Kw_Totaal_excl(PlanRegio): = gebouwen/Kw_Totaal_excl + LokaleEnergieProductie/Kw_Totaal_excl;
			attribute<Eur_yr> Kj_Onderh_excl(PlanRegio): = gebouwen/Kj_Onderh_excl + LokaleEnergieProductie/Kj_onderh_excl;
			attribute<Eur_yr> Kj_Admin_excl (PlanRegio): = gebouwen/Kj_Admin_excl  + LokaleEnergieProductie/Kj_Admin_excl;
			
			attribute<Eur_yr> Oj_Subsidie(PlanRegio) := 
				sum(
			  		  VestaRunDataComponent/sprongen/subsidie/EIA30 * NCW30/AnnualisationFactor
					+ VestaRunDataComponent/sprongen/subsidie/EIA15 * NCW15/AnnualisationFactor
					+ VestaRunDataComponent/sprongen/subsidie/EEA
				,	VestaRunDataComponent/PlanRegio_rel
				);
				
			attribute<Eur_yr> Om_Subsidie(PlanRegio) := 
				sum(
					  VestaRunDataComponent/sprongen/subsidie/EIA30 * NCW/mr30/AnnualisationFactor
					+ VestaRunDataComponent/sprongen/subsidie/EIA15 * NCW/mr15/AnnualisationFactor
					+ VestaRunDataComponent/sprongen/subsidie/EEA
				,	VestaRunDataComponent/PlanRegio_rel
				);
				
			attribute<Eur_yr> Kw_Totaal_incl(PlanRegio): = 
				BTW_Factor * (Kw_Totaal_excl + Kj_Onderh_excl+Kj_Admin_excl) +
				(BTW_Factor_gv -BTW_Factor) * gebouwen/Kw_GebouwVerbetering_excl
				- Oj_Subsidie;
		}
		template WriteToCSV
		{
			// begin case parameters
			container context;
			unit<uint8> RapGroep;
			parameter<String> fieldlist;
			parameter<String> filename;
			// end   case parameters
	
			container impl
			{
				unit<uint32> Field := range(uint32,0,strcount(fieldlist,';')+1)
				{
					attribute<string> FieldDescr  := ReadArray(fieldlist,.,string,0);
					attribute<UInt32> SepPos      := strpos(FieldDescr, ':');
					attribute<string> Name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;
					attribute<string> NameInTable := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;
				}
				parameter<string> NewLine := '\n';
			}
			parameter<String> Header := AsList(impl/Field/Name, ';');

			parameter<String> Metric := 
				=asList(
					Quote('[')+'+PropValue(ValuesUnit(context/' + impl/Field/NameInTable +'),' + quote('metric') + ')+'+Quote(']')
					, '+'+Quote(';')+'+'
				);

			attribute<String> Body (RapGroep) := 
				='union_data(RapGroep, '
					+AsList('String(context/'+impl/Field/NameInTable+')'
						,'+' + quote(';') + '+'
					)
				+')';

			parameter<String> Result := Header + impl/NewLine + Metric + impl/NewLine + AsList(Body+impl/NewLine,'')
			,	StorageName = "=filename"
			,	StorageType = "str";
		}
		template ExportCsvT
		{
			// begin case parameters
			unit<uint32> table;
			unit<uint32> variabele;
			parameter<string> filename;
			// end   case parameters
			
			parameter<string> result_expr:= AsList('MakeDefined(string(table/' + variabele/name + '),'''')',' +'';''+ ');
			attribute<string> result_att(table) := =result_expr;
			parameter<string> result := AsList(variabele/name, ';')+'\n'+AsList(result_att, '\n'),
				Storagename = "=filename",
				StorageType = "str";
		}		
	}
	template BuisKosten
	{
		unit<uint32>     PlanRegio;
		attribute<MW>    Capaciteit(PlanRegio);
		
		attribute<Eur_m>  K_min(PlanRegio) := Capaciteit > 0[MW] ? 215.5[Eur / m] * (Capaciteit * 1.0[1 / MW])^ 0.4828 : 0[Eur_m];
		attribute<Eur_m>  K_max(PlanRegio) := Capaciteit > 0[MW] ? 379.3[Eur / m] * (Capaciteit * 1.0[1 / MW])^ 0.4739 : 0[Eur_m];
		attribute<Eur_m>  K_m  (PlanRegio) := (K_min * Schuiven/KostenMin + K_max * Schuiven/KostenMax) * Leercurves/curve2;
		parameter<Ratio> a := 1.25; // omwegfactor
		attribute<Eur_m> aK_m  (PlanRegio) := a * K_m; // K_hoofd_m incl omwegfactor
	}
}
