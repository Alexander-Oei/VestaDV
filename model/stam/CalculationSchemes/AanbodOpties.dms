//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container AanbodOpties
{
	#include <RestWarmte.dms>
	#include <RestWarmteIteratie.dms>
	#include <GeoThermie.dms>
	#include <WKO.dms>
	#include <WKOWoningData.dms>
	#include <WKOUtilData.dms>
	#include <WKOData.dms>
	#include <WKOIter.dms>
	#include <WKOResults.dms>
	#include <WijkTempl.dms>
	#include <LtWarmtenet.dms>
	#include <LtData.dms>
	#include <TEOData.dms>
	#include <LtBronIter.dms>
	#include <ltResults.dms>
	#include <TEO.dms>
	
	Template WijkWKK
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<units/yr_uint16> Jaar;
		// end case parameters

		//parameter<kg_GJ> CO2_GJ :=  Impl/kosten/CO2_GJ + 0[GJ];

		// emissies per GJ gas voor WijkWKK
		parameter<kg_GJ> CO2_GJb := Prijzen/AardGas/CO2_GJ;
		parameter<g_GJ>  NOx_GJb :=  28[g_GJ];
		parameter<g_GJ>  SO2_GJb :=   0[g_GJ];
		parameter<g_GJ>  VOS_GJb := 420[g_GJ];
		parameter<g_GJ>  TS_GJb  :=   0[g_GJ];

		container Impl    := WijkTempl(BeginStatus, AanbodKentallen, EnergiePrijzen, Jaar, Kengetallen/WarmteBronnen/WijkWKK/TypeInfo, Classifications/GebiedsOptie/V/WijkWKK, '', 400[PJ_yr]), isHidden = "True";
		unit<uint32> PlanRegio := .../PlanRegio;
		attribute<kg_yr> CO2(PlanRegio) := impl/CO2;
		
		container Results := Impl/Results {
			container WijkWKK := Impl/Results/WijkResults;
		}
	}
	
	Template BioWKK
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<units/yr_uint16> Jaar;
		// end case parameters

		// emissies per GJ bio-brandstof voor BioWKK.
		parameter<kg_GJ> CO2_GJb :=  0[kg_GJ]; // obv definitie hernieuwbare bron.
		parameter<g_GJ>  NOx_GJb := 49[g_GJ];
		parameter<g_GJ>  SO2_GJb := 10[g_GJ];
		parameter<g_GJ>  VOS_GJb :=  0[g_GJ];
		parameter<g_GJ>  TS_GJb  :=  2[g_GJ];

		container Impl    := WijkTempl(BeginStatus, AanbodKentallen, EnergiePrijzen, Jaar, Kengetallen/WarmteBronnen/BioWKK/TypeInfo, Classifications/GebiedsOptie/V/BioWKK, 'BioWKK_Start', 100[PJ_yr]), isHidden = "True";
		container Results := Impl/Results {
			container BioWKK := Impl/Results/WijkResults;
		}
		unit<uint32> PlanRegio := .../PlanRegio;
		attribute<kg_yr> CO2(PlanRegio) := impl/CO2;
	}
	Template Lt15_30
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<units/yr_uint16> Jaar;
		// end case parameters
		
		container impl := LtWarmtenetImpl(BeginStatus, BeginStatus/Lt15_30, AanbodKentallen, EnergiePrijzen, Jaar, 15[Celsius], 30[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := Impl/Results {
			container Lt15_30 := LtWarmtenet;
		}
	}
	
	Template Lt15_50
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<units/yr_uint16> Jaar;
		// end case parameters
		
		container impl := LtWarmtenetImpl(BeginStatus, BeginStatus/Lt15_50, AanbodKentallen, EnergiePrijzen, Jaar, 15[Celsius], 50[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := Impl/Results {
			container Lt15_50 := LtWarmtenet;
		}
	}
	Template Lt15_70
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<units/yr_uint16> Jaar;
		// end case parameters
		
		container impl := LtWarmtenetImpl(BeginStatus, BeginStatus/Lt15_70, AanbodKentallen, EnergiePrijzen, Jaar, 15[Celsius], 70[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := Impl/Results {
			container Lt15_70 := LtWarmtenet;
		}
	}
	Template Lt30_30
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<units/yr_uint16> Jaar;
		// end case parameters
		
		container impl := LtWarmtenetImpl(BeginStatus, BeginStatus/Lt30_30, AanbodKentallen, EnergiePrijzen, Jaar, 30[Celsius], 30[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := Impl/Results {
			container Lt30_30 := LtWarmtenet;
		}
	}
	Template Lt30_50
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<units/yr_uint16> Jaar;
		// end case parameters
		
		container impl := LtWarmtenetImpl(BeginStatus, BeginStatus/Lt30_50, AanbodKentallen, EnergiePrijzen, Jaar, 30[Celsius], 50[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := Impl/Results {
			container Lt30_50 := LtWarmtenet;
		}
	}
	Template Lt30_70
	{
		// begin case parameters
		container BeginStatus;
		container AanbodKentallen;
		container EnergiePrijzen;
		parameter<units/yr_uint16> Jaar;
		// end case parameters
		
		container impl := LtWarmtenetImpl(BeginStatus, BeginStatus/Lt30_70, AanbodKentallen, EnergiePrijzen, Jaar, 30[Celsius], 70[Celsius]);
		container ObjectResults := impl/ObjectResults;
		container Results := Impl/Results {
			container Lt30_70 := LtWarmtenet;
		}
	}
	template PlanregioOptieResultaat {
		container BebouwingsComponent;
		parameter<Classifications/GebiedsOptie> Optie;
		attribute<Bool> GebruikOptie(PlanRegio);
		
		unit<uint32> PlanRegio := Invoer/SpecifiekeInstellingen/PlanRegio;
		
		unit<uint32> BebouwingsObject := BebouwingsComponent/BebouwingsObject;
		container result := BebouwingsComponent
		{
			attribute<Classifications/WarmteOptie> WarmteAllocatie(BebouwingsObject) := 
				Classifications/WarmteOptie/kanGebiedsOptie[BebouwingsComponent/WarmteAllocatie] && GebruikOptie[BebouwingsComponent/PlanRegio_rel]
				? Classifications/GebiedsOptie/WarmteOptie_rel[Optie]
				: BebouwingsComponent/WarmteAllocatie;
		}
		
	}
	
	template GebiedToedelen {
		unit<uint8> BC;
		container CandidateSets;
		unit<uint32> UnitedCandidates;
		parameter<string> ResultsTemplName;
		parameter<Classifications/WarmteOptie> WarmteOptie_rel;		
		unit<uint32> Gebied;
		
		unit<uint32> RendabelCluster 	:= subset(Gebied/Afweging), DialogData = "Map", DialogType = "Point"
		{
			attribute<Gebied>    Gebied_rel := nr_OrgEntity;
			attribute<rdc_meter> point := Gebied/Point[nr_OrgEntity];	
			attribute<.>         Partitioning (UnitedCandidates) := invert(nr_OrgEntity)[Gebied/Partitioning];
		}

		attribute<uint32> NrAllowedObjects          (BC) := ='union_data(BC, '+AsItemList('#CandidateSets/'+BC/Name+'/AllowedObjects')+')';
		attribute<uint32> NrAllObjects              (BC) := ='union_data(BC, '+AsItemList('#CandidateSets/'+BC/Name+'/BebouwingsObject')+')';
		attribute<uint32> CumulNrPrevAllowedObjects (BC) := cumulate(NrAllowedObjects)-NrAllowedObjects;
		attribute<uint32> CumulNrPrevAllObjects     (BC) := cumulate(NrAllObjects)-NrAllObjects;

		container ObjectResults :=
			for_each_ne(BC/Name, 
				ResultsTemplName+'('
					'UnitedCandidates, RendabelCluster, CandidateSets/'+BC/Name+', '
					'WarmteOptie_rel,'
					'CumulNrPrevAllowedObjects['+string(id(BC))+'[BC]],'
					'CumulNrPrevAllObjects['+string(id(BC))+'[BC]]'
				')'
			);
			
		unit<uint32> result := ='union_unit('+AsItemList('ObjectResults/'+BC/Name+'/BebouwingsObject')+')' // aka: GebiedToedelen_resultaat
		{
			attribute<RendabelCluster>	RendabelCluster_rel	:= ='union_data(., ' + AsItemList('ObjectResults/'+BC/Name+'/Cluster_relNow')+')';
			
			attribute<string>		Label					:= ='union_data(., ' + asItemList('BebouwingsComponenten/' + BC/Name + '/BebouwingsObject/Label') + ')', DialogType = "LabelText";
			attribute<Float64>		ToerekeningsFactor := ='union_data(., ' + AsItemList('ObjectResults/'+BC/Name+'/WkoData/ToerekeningsFactor')+')';
			
			attribute<Eur>			Ki_ow           := scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Ki_ow          [RendabelCluster/Gebied_rel]);
			attribute<Eur>			Ki_wd           := scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Ki_wd          [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Kji_ow          := scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Kji_ow         [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Kji_wd          := scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Kji_wd         [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Kj_wd_oh		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Kj_wd_oh       [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Kj_wd_adm		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Kj_wd_adm      [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Kj_ow_oh		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Kj_ow_oh       [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Kj_ow_adm		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Kj_ow_adm      [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Kj_ow_productie	:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Kj_ow_productie[RendabelCluster/Gebied_rel]);
			attribute<Eur>			Oi_wd_EIA		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Oi_wd_EIA      [RendabelCluster/Gebied_rel]);
			attribute<Eur>			Oi_ow_EIA		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Oi_ow_EIA      [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Oji_wd_EIA		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Oji_wd_EIA     [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Oji_ow_EIA		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Oji_ow_EIA     [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Oj_wd_EEA		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Oj_wd_EEA      [RendabelCluster/Gebied_rel]);
			attribute<Eur_yr>		Oj_ow_EEA		:= scalesum(ToerekeningsFactor, RendabelCluster_rel, Gebied/Oj_ow_EEA      [RendabelCluster/Gebied_rel]);
		}
	}
	
	template GebiedsAllocatieResultaat_cumuleren {
		container Cumulator;
		container Increment;
		
		container Jaarlijks:= for_each_nedv(classifications/gebiedsoptie_jaarlijks/full_name, replace('                         Increment/Jaarlijks/@X@', '@X@', classifications/gebiedsoptie_jaarlijks/full_name), PlanRegio, EUR_yr);
		container Eenmalig := for_each_nedv(classifications/gebiedsoptie_eenmalig/name,       replace('Cumulator/Eenmalig/@X@ + Increment/Eenmalig/@X@' , '@X@', classifications/gebiedsoptie_eenmalig/name      ), PlanRegio, EUR   );
		container Verbruik := for_each_nedv(classifications/gebiedsoptie_verbruik/name,       replace('Cumulator/Verbruik/@X@ + Increment/Verbruik/@X@' , '@X@', classifications/gebiedsoptie_verbruik/name      ), PlanRegio, GJ_yr );
		container Uitstoot := for_each_nedv(classifications/gebiedsoptie_uitstoot/name,       replace('Cumulator/Uitstoot/@X@ + Increment/Uitstoot/@X@' , '@X@', classifications/gebiedsoptie_uitstoot/name      ), PlanRegio, kg_yr );
	}
	
	template GebiedsAllocatieResultaat_verzamelen {
		container Cumulaties;
		unit<uint8> GebiedsOptieSet;
		
		container Jaarlijks:= for_each_nedv(classifications/gebiedsoptie_jaarlijks/full_name, replace('add('+AsItemList('Cumulaties/'+GebiedsOptieSet/name+'/Jaarlijks/@X@')+')', '@X@', classifications/gebiedsoptie_jaarlijks/full_name), PlanRegio, EUR_yr);
		container Eenmalig := for_each_nedv(classifications/gebiedsoptie_eenmalig/name,       replace('add('+AsItemList('Cumulaties/'+GebiedsOptieSet/name+'/Eenmalig/@X@' )+')', '@X@', classifications/gebiedsoptie_eenmalig/name      ), PlanRegio, EUR);
		container Verbruik := for_each_nedv(classifications/gebiedsoptie_verbruik/name,       replace('add('+AsItemList('Cumulaties/'+GebiedsOptieSet/name+'/Verbruik/@X@' )+')', '@X@', classifications/gebiedsoptie_verbruik/name      ), PlanRegio, GJ_yr);
		container Uitstoot := for_each_nedv(classifications/gebiedsoptie_uitstoot/name,       replace('add('+AsItemList('Cumulaties/'+GebiedsOptieSet/name+'/Uitstoot/@X@' )+')', '@X@', classifications/gebiedsoptie_uitstoot/name      ), PlanRegio, kg_yr);
	}
	
}
