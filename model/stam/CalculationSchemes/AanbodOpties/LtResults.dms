//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template LtResults
{
	// begin case parameters
	unit<uint32> UnitedCandidates;
	unit<uint32> Cluster;
	container WkoData;
	parameter<Classifications/AanbodOptie> AanbodOptie_rel;
	
	parameter<uint32> NrPrevAllowedObjects;
	parameter<uint32> NrPrevAllObjects;
	// end case parameters

	container WkoDataComponent          := WkoData/WkoDataComponent;
	parameter<string> ComponentNaam     := WkoData/ComponentNaam;

	container BeginStatusComponent      := ='BeginStatus/bebouwing/'+ComponentNaam;

	container BCdata                    := WkoDataComponent/BCdata;
	container RuimtelijkeVraagComponent := BCdata/RuimtelijkeVraagComponent;
	unit<uint32> BebouwingsObject       := BCdata/BebouwingsObject;
	unit<uint32> PlanRegio              := Invoer/SpecifiekeInstellingen/PlanRegio;

	unit<uint32> AllowedObjects := WkoData/AllowedObjects
	{
		attribute<UnitedCandidates> UnitedCandidates_rel := value(id(.) + NrPrevAllowedObjects, UnitedCandidates);
		attribute<Cluster>          Cluster_Rel          := Cluster/Partitioning[UnitedCandidates_rel];
	}

	// TODO: rename WKO->ClusterOptie
	
	attribute<UnitedCandidates> UnitedCandidates_rel (BebouwingsObject) := AllowedObjects/UnitedCandidates_rel[invert(AllowedObjects/nr_OrgEntity)];
	attribute<Cluster> Cluster_RelNow (BebouwingsObject) := Cluster/Partitioning[UnitedCandidates_rel];
	attribute<bool>    HadWarmte      (BebouwingsObject) := IsDefined(BeginStatusComponent/WarmteAllocatie);
	attribute<bool>    StartThis      (BebouwingsObject) := IsDefined(Cluster_RelNow), IntegrityCheck = "not(and(HadWarmte, IsDefined(Cluster_RelNow)))";
	attribute<bool>    WasThis        (BebouwingsObject) := (BeginStatusComponent/WarmteAllocatie == AanbodOptie_rel);
	attribute<bool>    HasThis        (BebouwingsObject) := StartThis || WasThis;

	//volumevraag voor nieuwe allocatie
	attribute<GJ_yr>   V_Warmte       (BebouwingsObject) := WkoData/WkoDataComponent/V_Warmte		* float64(StartThis); // @@@ is Thermische Vraag
	attribute<GJ_yr>   V_Koude        (BebouwingsObject) := WkoData/WkoDataComponent/V_Koude		* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>   V_ElekW        (BebouwingsObject) := WkoData/WkoDataComponent/V_ElekW_ind	* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>   V_ElekK        (BebouwingsObject) := WkoData/WkoDataComponent/V_ElekK_ind	* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>   V_Elek         (BebouwingsObject) := V_ElekW + V_ElekK;
	
	//volumevraag na nieuwe allocatie
	attribute<GJ_yr>   V_WarmteC      (BebouwingsObject) := WkoData/WkoDataComponent/V_Warmte		* float64(StartThis); // @@@ is Thermische Vraag
	attribute<GJ_yr>   V_KoudeC       (BebouwingsObject) := WkoData/WkoDataComponent/V_Koude		* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>   V_ElekWC       (BebouwingsObject) := WkoData/WkoDataComponent/V_ElekW_ind	* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>   V_ElekKC       (BebouwingsObject) := WkoData/WkoDataComponent/V_ElekK_ind	* float64(StartThis), Source = "FO v7a F 54"; // @@@ is Thermische Vraag
	attribute<GJ_yr>   V_ElekC        (BebouwingsObject) := V_ElekWC + V_ElekKC;

	attribute<kW>      P_Warmte       (BebouwingsObject) := BCdata/WarmteVraag/deelnemers/AansluitCapaciteit * float64(StartThis);

	container BC
	{
		attribute<Eur>		Ki_ow_bron			(BebouwingsObject)	:=	AllObjects/Ki_ow_bron			[value(id(BebouwingsObject) + NrPrevAllObjects, AllObjects)] * float64(StartThis); // lookup item niet expliciet configureren ivm het niet kunnen vinden van AllObject als values unit, truc met copy is ook mogelijk
		attribute<Eur>		Ki_wd_bron			(BebouwingsObject)	:=	AllObjects/Ki_wd_bron			[value(id(BebouwingsObject) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr>	Kj_onderhoud_bron	(BebouwingsObject)	:=	AllObjects/Kj_onderhoud_bron	[value(id(BebouwingsObject) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr>	Kj_admin_bron		(BebouwingsObject)	:=	AllObjects/Kj_admin_bron		[value(id(BebouwingsObject) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
		attribute<Eur_yr>	Kj_productie_bron	(BebouwingsObject)	:=	AllObjects/Kj_productie_bron	[value(id(BebouwingsObject) + NrPrevAllObjects, AllObjects)] * float64(StartThis);
	}

	container PR
	{
		attribute<Eur>		Ki_ow_bron			(PlanRegio)			:=	sum(BC/Ki_ow_bron,									BCdata/PlanRegio_rel);
		attribute<Eur>		Ki_wd_bron			(PlanRegio)			:=	sum(BC/Ki_wd_bron,									BCdata/PlanRegio_rel);
		attribute<Eur>		Ki_ow_gebouw		(PlanRegio)			:=	sum(WkoData/Ki_ow			* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur>		Ki_wd_gebouw		(PlanRegio)			:=	sum(WkoData/Ki_wd			* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur>		Ki_ow				(PlanRegio)			:=	Ki_ow_bron + Ki_ow_gebouw;
		attribute<Eur>		Ki_wd				(PlanRegio)			:=	Ki_wd_bron + Ki_wd_gebouw;
		
		attribute<Eur>		Ki_id				(PlanRegio)			:=	sum(WkoData/Ki_id			* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur>		Ki_ge_pm			(PlanRegio)			:=	sum(WkoData/Ki_ge_pm		* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur>		Ki_ge_ov			(PlanRegio)			:=	sum(WkoData/Ki_ge_ov		* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Kj_ge_hv			(PlanRegio)			:=	const(0[Eur_yr], PlanRegio);

		attribute<Eur>		Oi_Aansl			(PlanRegio)			:=	sum(WkoData/Oi_Aansl		* float64(StartThis),	BCdata/PlanRegio_rel); // accumulate
		attribute<Eur_yr>	Oj_verbruik			(PlanRegio)			:=	sum(WkoData/Oj_verbruik		* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Om_comfort			(PlanRegio)			:=	sum(WkoData/Om_comfort		* float64(HasThis),		BCdata/PlanRegio_rel);

		attribute<Eur_yr>	Kj_ge				(PlanRegio)			:=	sum(WkoData/KL_ge			* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Kj_wd_pr			(PlanRegio)			:=	const(0[Eur_yr], PlanRegio);
		
		attribute<Eur_yr>	Km_elek_ind			(PlanRegio)			:=	sum(WkoData/Km_elek_id		* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Km_elek_col			(PlanRegio)			:=	sum(WkoData/Km_elek_ow		* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Km_ow_e				(PlanRegio)			:=	Km_elek_ind + Km_elek_col;
		attribute<Eur_yr>	Kj_elek_ind			(PlanRegio)			:=	sum(WkoData/Kj_elek_id		* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Kj_elek_col			(PlanRegio)			:=	sum(WkoData/Kj_elek_ow		* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Kj_ow_e				(PlanRegio)			:=	Kj_elek_ind + Kj_elek_col;
		
		attribute<Eur_yr>	Kj_uitkoppel_oh		(PlanRegio)			:=	sum(WkoData/Kj_uitkoppel_oh	* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Kj_col_ewp_oh		(PlanRegio)			:=	sum(WkoData/Kj_col_ewp_oh	* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Kj_bron_oh			(PlanRegio)			:=	sum(BC/Kj_onderhoud_bron,							BCdata/PlanRegio_rel);
		attribute<Eur_yr>	Kj_ow_o				(PlanRegio)			:=	Kj_uitkoppel_oh + Kj_col_ewp_oh + Kj_bron_oh;
		
		attribute<Eur_yr>	KEH_ow_ind			(PlanRegio)			:=	sum(WkoData/Kj_elek_ow_EH	* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	KEH_ow_col			(PlanRegio)			:=	sum(WkoData/Kj_elek_id_EH	* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	KEH_ow_e			(PlanRegio)			:=	KEH_ow_ind + KEH_ow_col;
		
		attribute<Eur_yr>	KCO2_ow_ind			(PlanRegio)			:=	sum(WkoData/Kj_elek_ow_CO2	* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	KCO2_ow_col			(PlanRegio)			:=	sum(WkoData/Kj_elek_id_CO2	* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<Eur_yr>	KCO2_ow_e			(PlanRegio)			:=	KCO2_ow_ind + KCO2_ow_col;
		
		attribute<KG_yr>	CO2					(PlanRegio)			:=	sum(WkoData/CO2				* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<GJ_yr>	GJe					(PlanRegio)			:=	sum(WkoData/GJe				* float64(HasThis),		BCdata/PlanRegio_rel);
		attribute<GJ_yr>	GJw					(PlanRegio)			:=	sum(WkoData/GJw				* float64(HasThis),		BCdata/PlanRegio_rel);
	}

	container Result := BCdata
	{
		unit<uint32> BebouwingsObject := BCdata/BebouwingsObject;

		attribute<Classifications/AanbodOptie> WarmteAllocatie (BebouwingsObject) := StartThis ? AanbodOptie_rel                         : BeginStatusComponent/WarmteAllocatie;
		attribute<Eur_yr>                      KoudeAllocatie  (BebouwingsObject) := StartThis ? WkoDataComponent/Opbrengsten/Oj_Koude   : BeginStatusComponent/KoudeAllocatie;
		attribute<Eur_yr>                      Om_comfort      (BebouwingsObject) := StartThis ? WkoDataComponent/Opbrengsten/Om_comfort : BeginStatusComponent/Om_comfort;
		attribute<Cluster>                     WkoCluster_rel  (BebouwingsObject) := Cluster_rel;
	}
}