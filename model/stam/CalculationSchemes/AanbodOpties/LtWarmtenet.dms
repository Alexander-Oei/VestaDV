//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

Template LtWarmtenetImpl
{
	// begin case parameters
	container BeginStatus;
	container PrevLtWarmtenet;
	container AanbodKentallen;
	container EnergiePrijzen;
	parameter<units/yr_uint16> ZichtJaar;
	
	parameter<units/Celsius> T_ow;
	parameter<units/Celsius> T_sec;
	// end case parameters
	
	parameter<bool> CollectieveWP := (T_ow < T_sec);
	
	parameter<string> AanbodOptie_name := 'LT'+string(T_ow)+'_'+string(T_sec);
	parameter<Classifications/AanbodOptie> AanbodOptie_rel := ='Classifications/AanbodOptie/V/'+AanbodOptie_name;
		
	container KostenBaten           := BeginStatus/KostenBaten;
	container BebouwingsComponenten := KostenBaten/BebouwingsComponenten;

	unit<uint8>  WkoComponent       := Classifications/WkoComponent;
	unit<uint32> PlanRegio          := Invoer/SpecifiekeInstellingen/PlanRegio;
	unit<uint8>  Prijzen_elec       := Prijzen/Elektriciteit/Staffel;

	container constanten {
	
		parameter<bool> KoudeBeschikbaar := false, Descr = "Wordt binnen dit type gebiedsoptie ook centraal koude aangeboden, ja/nee"; // TO DO: brontype-afhankelijk maken
		
		//Aandelen primair en hulp in het secundaire net
		parameter<Float64> 		AandeelPrimairVermogen 		:= 				0.30, 					Descr = "Aandeel van het gevraagde vermogen dat door de primaire bron wordt geleverd";
		parameter<Float64> 		AandeelHulpVermogen 		:= 				1.00, 					Descr = "Aandeel van het gevraagde vermogen dat door de hulpvoorziening wordt geleverd";
		parameter<Float64> 		AandeelPrimairVolume   		:= 				0.70, 					Descr = "Aandeel van het gevraagde volume dat door de primaire bron wordt geleverd";
		parameter<Float64> 		AandeelHulpVolume 			:= 				0.30, 					Descr = "Aandeel van het gevraagde volume dat door de hulpvoorziening wordt geleverd";
		
		//Seasonal Performance Factors
		parameter<Ratio> 		SPF_coll_W :=
													T_ow <= 20[Celsius] && T_sec <= 35[Celsius] ? 7.9 :
													T_ow <= 20[Celsius] && T_sec <= 55[Celsius] ? 4.2 :
													T_ow <= 20[Celsius] && T_sec <= 75[Celsius] ? 3.5 :
													T_ow <= 35[Celsius] && T_sec <= 35[Celsius] ? 7.9 :
													T_ow <= 35[Celsius] && T_sec <= 55[Celsius] ? 4.2 :
													T_ow <= 35[Celsius] && T_sec <= 75[Celsius] ? 3.8 :	1.0, Descr = "efficientie van de collectieve warmtepomp bij warmtelevering";
		parameter<Ratio> 		SPF_coll_K			: [30], 										Descr = "efficientie van de collectieve warmtepomp bij koudelevering";
		parameter<Float64> 		SPF_ind_A_rv  		:= 1.0,											Descr = "efficientie van de individuele warmtepomp voor ruimteverwarming, label A+";
		parameter<Float64> 		SPF_ind_B_rv  		:= T_sec <= 35[Celsius] ? 4.2 : 1.0,			Descr = "efficientie van de individuele warmtepomp voor ruimteverwarming, label B";
		parameter<Float64> 		SPF_ind_CE_rv 		:= T_sec <= 35[Celsius] ? 3.2 :  T_sec <= 55[Celsius] ? 4.2 : 1.0, Descr = "efficientie van de individuele warmtepomp voor ruimteverwarming, label C, D of E";
		parameter<Float64> 		SPF_ind_ww  		:= T_sec <= 55[Celsius] ? 2.5 : 1.0,			Descr = "efficientie van de individuele warmtepomp voor tapwaterverwarming";
		parameter<Ratio> 		SPF_ind_K			: [3],											Descr = "efficientie van een individuele warmtepomp bij koudelevering"; // TODO, Check.
		
		
		// Aandeel eigen opwekking
		parameter<Float64> 		AEO_ind_A_rv  		:= 0.0, 										Descr = "Aandeel eigen opwekking, ruimteverwarming, label A+";
		parameter<Float64> 		AEO_ind_B_rv  		:= T_sec <= 35[Celsius] ? 0.3 : 0.0, 			Descr = "Aandeel eigen opwekking, ruimteverwarming, label B";
		parameter<Float64> 		AEO_ind_CE_rv 		:= T_sec <= 35[Celsius] ? 0.6 : T_sec <= 55[Celsius] ? 0.3 : 0.0, Descr = "Aandeel eigen opwekking, ruimteverwarming, label C, D of E";
		parameter<Float64> 		AEO_ind_ww    		:= T_sec <= 35[Celsius] ? 0.5 : T_sec <= 55[Celsius] ? 0.2 : 0.0, Descr = "Aandeel eigen opwekking, warm tapwater";
		parameter<Float64> 		AEO_ind_K           : [1.0],										Descr = "Aandeel eigen opwekking koude, relevant indien koude geleverd kan worden, 100% individuele opwekking indien niet geleverd en wel gevraagd zoals bij utiliteiten";
		parameter<Ratio> 		Leidingverlies		: [0.15],										Descr = "aandeel op volume dat verloren gaat tussen bron en afnemer";
		
		//aansluitwaardes
		parameter<float64> 		ASW_wc 				:= 						6		[kW_Woning], 	Descr = "aansluitwaarde warmte eengezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_kc 				:= 						2		[kW_Woning], 	Descr = "aansluitwaarde koude eengezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_wa 				:= 						5		[kW_Woning], 	Descr = "aansluitwaarde warmte meergezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_ka 				:= 						2		[kW_Woning], 	Descr = "aansluitwaarde koude meergezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_wu 				:= 						0.05	[kW_m2], 		Descr = "aansluitwaarde warmte utiliteit per m2 (gevraagde capaciteit)";
		parameter<float64> 		ASW_ku 				:= 						0.06	[kW_m2], 		Descr = "aansluitwaarde koude utiliteit per m2 (gevraagde capaciteit)";
		
		//gelijktijdigheidsfactoren
		parameter<float64>		GTF_woning_w		:=						0.50, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag warmte woningen";
		parameter<float64>		GTF_woning_k		:=						0.50, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag koude woningen";
		parameter<float64>		GTF_util_w 			:=						0.95, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag warmte utiliteit";
		parameter<float64>		GTF_util_k	 		:=						0.95, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag koude utiliteit";
		
		// investeringskosten technische componenten
		parameter<Eur_Woning> 	Ki_inpandig 		:= Leercurves/Curve2 * 	2000	[Eur_Woning], 	Descr = "Investeringskosten extra inpandige buizen (alleen bij meergezinswoningen)";
		parameter<EUR> 			Ki_booster 			:= Leercurves/Curve2 * 	2000	[EUR],      	Descr = "Investeringskosten booster-warmtepomp voor warm tapwater";
		parameter<Eur_Woning> 	Ki_afleverset 		:= Leercurves/Curve2 * 	2000	[Eur_Woning], 	Descr = "Investeringskosten afleverset (warmtewisselaar + meter)";
		parameter<EUR_KW> 		Ki_uitkoppel		:= Leercurves/Curve2 * 	250 	[EUR / KW],		Descr = "Investeringskosten uitkoppeling bron bij bestaande bron";
		parameter<EUR_KW> 		Ki_eWP_coll			:= Leercurves/Curve2 * 	680 	[EUR / KW],		Descr = "Investeringskosten warmtepomp collectief als hulpvoorziening";
		parameter<EUR>    		Ki_Buffer   		:= Leercurves/Curve2 * 	100000	[EUR], 			Descr = "Investeringskosten aanleg buffervat voor seizoensopslag en dagopslag";
		parameter<Eur_kW> 		Ki_doublet		 	:= Leercurves/Curve2 * 	1133	[Eur_kW], 		Descr = "Investeringskosten realiseren nieuw doublet als nieuwe bron";
	
		parameter<Eur_m2> 		Ki_id_ugroot     	:= Leercurves/Curve2 * 	0		[Eur_m2],		Descr = "Investeringskosten extra inpandige buizen bij utiliteit groter dan 7500 m2";
		parameter<Eur_m2> 		Ki_id_uklein     	:= Leercurves/Curve2 * 	20		[Eur_m2],		Descr = "Investeringskosten extra inpandige buizen bij utiliteit kleiner dan 100 m2";
		
		//investeringskosten wijkdistributie
		parameter<Eur_Woning>	Ki_aansl_meergezins	:= Leercurves/Curve2 * 	(5558 	[Eur_Woning] * Schuiven/VerketelingMin) + (2073 [Eur_Woning] * Schuiven/VerketelingMax), Descr = "Investeringskosten aansluitleiding bij meergezinswoningen";
		parameter<Eur_Woning>	Ki_aansl_grondgeb	:= Leercurves/Curve2 * 	10000	[Eur_Woning],	Descr = "Investeringskosten aansluitleiding bij grondgebonden woning";
		parameter<Eur>			Ki_aansl_util		:= Leercurves/Curve2 * 	10000	[Eur],			Descr = "Investeringskosten aansluitleiding bij utiliteitsbouw";
		parameter<Eur_m2>		Ki_distr			:= Leercurves/Curve2 * 	(6000	[Eur_Woning] * 187[NrWoningen] / 15741[m2]), Descr = "Investeringskosten distributieleidingen per vierkante meter vraaggebied";
		parameter<Eur_m >		Ki_brondist			:= Leercurves/Curve2 * 	0		[Eur_m],		Descr = "Investeringskosten distributieleidingen om bronnen te verbinden";
		parameter<EUR_KW>		Ki_onderstation		:= Leercurves/Curve2 * 	120 	[EUR / KW],		Descr = "Investeringskosten onderstations in wijkdistributie";
		
		// begrenzingen aan cluster mogelijkheden.
		parameter<m>            L_max_bron_connectie:=                      2000    [m],            Descr = "Afzonderlijke aantakkingen aan een bron-cluster mogen niet langer dan dit zijn. Bij een T aansluiting op al gekozen telt alleen de lengte van de nieuwe poot.";

		//meerkosten warmteproductie per bron (voor nu constant per bron)
		//parameter<Eur_GJ>		K_GJ_bron			:=						0.000	[EUR_GJ],		Descr = "meerkosten voor warmteproductie in de primaire bron, in latere versies afhankelijk van brontype";

		// percentage van de initiele investerings welke jaarlijks aan onderhoud en administratiekosten wordt gerekend
		container OenM  {
			Parameter<_yr> 		R_id_onderhoud      := 						0.025 	[_yr], 			Descr = "jaarlijkse onderhoudskosten inpandige distributie als percentage van de initiele investering";
			Parameter<_yr> 		R_id_admin		    := 						0.000 	[_yr], 			Descr = "jaarlijkse administratiekosten inpandige distributie als percentage van de initiele investering";
			Parameter<_yr> 		R_ow_onderhoud	    := 						0.050 	[_yr], 			Descr = "jaarlijkse onderhoudskosten opwekking aan de bron als percentage van de initiele investering";
			Parameter<_yr> 		R_ow_admin		    := 						0.025 	[_yr], 			Descr = "jaarlijkse administratiekosten opwekking aan de bron als percentage van de initiele investering";
			Parameter<_yr> 		R_wd_onderhoud	    := 						0.025 	[_yr], 			Descr = "jaarlijkse onderhoudskosten wijkdistributie als percentage van de initiele investering";
			Parameter<_yr> 		R_wd_admin		    := 						0.025 	[_yr], 			Descr = "jaarlijkse administratiekosten wijkdistributie als percentage van de initiele investering";
			Parameter<_yr> 		R_wpColl_onderhoud	:= 						0.035 	[_yr], 			Descr = "jaarlijkse onderhoudskostencollectieve warmtepomp als percentage van de initiele investering";
			Parameter<_yr> 		R_wpColl_admin		:= 						0.025 	[_yr], 			Descr = "jaarlijkse administratiekosten collectieve warmtepomp als percentage van de initiele investering";
			Parameter<_yr> 		R_buffer_onderhoud	:= 						0.025 	[_yr], 			Descr = "jaarlijkse onderhoudskosten seizoensbuffer als percentage van de initiele investering";
			Parameter<_yr> 		R_buffer_admin		:= 						0.025 	[_yr], 			Descr = "jaarlijkse administratiekosten seizoensbuffer als percentage van de initiele investering";
			}
	}

	// TOOD: BronWarmtePrijs wordt nu (14/04/2019) niet gebruikt. Weghalen of gebruiken ?
// 	parameter<EUR_GJ> BronWarmtePrijs :=  // @@@ we moeten hier iets aannemen om de bron-cluster opbrengsten ergens op te baseren.
// 			BebouwingsComponenten/NieuwbouwWoning/Warmtewet/WarmtePrijs * 0.80 
// 		+   BebouwingsComponenten/NieuwbouwUtil/Warmtewet/WarmtePrijs * 0.20;
	
	unit<uint32> BronSrc := BeginStatus/LtWarmte/bron;
	unit<uint32> BronSelectie := subset(BronSrc/P_ow_max > 0.0 && BronSrc/T_bron >= T_ow && not(BronSrc/Toegewezen) && pointrow(BronSrc/Point) > 0d && pointcol(BronSrc/Point) > 0d)
		,	DialogType = "Map", DialogData = "Point"
	{
	
		attribute<BronSrc> BronSrc_rel := nr_OrgEntity;
		
		attribute<rdc_meter> Point := BronSrc/Point[BronSrc_rel];
		attribute<string>    Label := BronSrc/Label[BronSrc_rel];
		
		
		attribute<KW>     P_Warmte_primair   := BronSrc/P_ow_max[BronSrc_rel]; // warmte op T_bron voor eWP
		attribute<KW>     P_Warmte_secundair := P_Warmte_primair / BronSrc/bron_cap[BronSrc_rel]; // warmte op temperatuur T_bron na eWP
		
		attribute<Celsius> T_bron            := BronSrc/T_bron[BronSrc_rel];
		
		attribute<Ratio>   Weight            := P_Warmte_secundair / 1[KW];
		attribute<Ratio>   Bron_vol_Weighted := BronSrc/Bron_vol[BronSrc_rel] * Weight; // bron_vol maal gewicht tbv gewogen middeling.									
		attribute<Eur_kW> Ki_kW_min_weighted := BronSrc/Ki_kW_min[BronSrc_rel] * Weight;
		attribute<Eur_kW> Ki_kW_max_weighted := BronSrc/Ki_kW_max[BronSrc_rel] * Weight;
		attribute<Eur_GJ> K_GJ_weighted      := BronSrc/K_GJ[BronSrc_rel] * Weight;
	}
	
	unit <uint32> bron := Unique(BronSelectie/Point) // dit moet omdat connect_points anders weigert.
	,	DialogType = "Map",	DialogData = "Point"
	{
		attribute<rdc_meter> Point := Values;
		attribute<.> BronSelectie_rel (BronSelectie) := rlookup(BronSelectie/Point, Values);
		
		attribute<string>    Label       := AsItemList(BronSelectie/Label, BronSelectie_rel), DialogType = "LabelText";

		attribute<.>         per_bron    := id(.);

		attribute<kW>        P_Warmte_primair   := sum(BronSelectie/P_Warmte_primair, BronSelectie_rel);
		attribute<kW>        P_Warmte_secundair := sum(BronSelectie/P_Warmte_secundair, BronSelectie_rel);
		
		attribute<Ratio>     Weight             := sum(BronSelectie/Weight, BronSelectie_rel);
		
		attribute<Ratio>  Bron_vol_Weighted  := sum(BronSelectie/Bron_vol_Weighted, BronSelectie_rel);
		attribute<Eur_kW> Ki_kW_min_weighted := sum(BronSelectie/Ki_kW_min_weighted, BronSelectie_rel);
		attribute<Eur_kW> Ki_kW_max_weighted := sum(BronSelectie/Ki_kW_max_weighted, BronSelectie_rel);		
		attribute<Eur_GJ> K_GJ_weighted      := sum(BronSelectie/K_GJ_weighted, BronSelectie_rel);

		attribute<float64>   n           := Float64(pcount(BronSelectie_rel));
		
		unit<uint32> Feature := bron // nu nog hetzelfde, maar in clustering kunnen T splitsingen worden opgenomen.
		{
			attribute<rdc_meter> Geometry(arc) := points2sequence(Point, ID(.));
			attribute<bron>      MST_rel   := ID(bron);
		}
	}

	//samenvoegen invoerbronnen tot geclusterde modelbronnen
	parameter<uint32> NrBronIterations: [ 3 ];
	unit<uint32> BronIteration := Range(uint32, 0, NrBronIterations) 
	{
		attribute<string> Name := 'I'+string(id(.));
		attribute<string> PrevBron := MakeDefined(Name[id(.)-1] + '/SelectedClusters', 'bron');
		attribute<.> NrSelectedObjects          := ='union_data(BronIteration, '+AsItemList('#BronIterations/'+BronIteration/Name+'/Selected')+')';
		attribute<.> CumulNrPrevSelectedObjects := cumulate(NrSelectedObjects) - NrSelectedObjects;
	}

	container BronIterations := for_each_ne(BronIteration/Name, 'LtBronIter(' + BronIteration/PrevBron + ', bron)');
	container LastBronIter :=  ='BronIterations/'+last(BronIteration/Name);
	container LastClusters := LastBronIter/SelectedClusters;
	
	//modelbronnen als resultaat van samenvoegen kleine bron
	unit<uint32> BronCluster := ='union_unit('+asItemList('BronIterations/'+BronIteration/Name+'/Selected')+',LastClusters)', DialogType = "Map", DialogData = "Point"
	{
		// features samenvoegen 
		unit<uint32> Feature := ='union_unit('+asItemList('BronIterations/'+BronIteration/Name+'/Selected/Feature')+', LastClusters/Feature)'
			, DialogType = "Map", DialogData = "Geometry"
		{
			attribute<rdc_meter>  Geometry(arc) := ='union_data(., '+asItemList('BronIterations/'+BronIteration/Name+'/Selected/Feature/Geometry')+', LastClusters/Feature/Geometry)';
			attribute<..> MST_rel  := ='value(union_data(., '+asItemList('BronIterations/'+BronIteration/Name+'/Selected/Feature/MST_rel+BronIteration/CumulNrPrevSelectedObjects['+ string(ID(BronIteration))+']')+', LastClusters/Feature/MST_rel+ sum(BronIteration/NrSelectedObjects)), ..)';
			attribute<m>  LengthProxy := arc_length(Geometry, m);
		}
//		attribute<rdc_meter> point := ='union_data(., '+asItemList('BronIterations/'+BronIteration/Name+'/Selected/point')+', LastClusters/Point)';

		attribute<string>    Label  := ='union_data(., '+asItemList('BronIterations/'+BronIteration/Name+'/Selected/Label')+', LastClusters/Label)';
		attribute<rdc_meter> Point  := ='union_data(., '+asItemList('BronIterations/'+BronIteration/Name+'/Selected/Point')+', LastClusters/Point)';
		attribute<.>         per_bron(bron) := ='value(MakeDefined('
			+asItemList('BronIterations/'+BronIteration/Name+'/Selected/per_bron + BronIteration/CumulNrPrevSelectedObjects['+ string(ID(BronIteration))+']')+', LastClusters/per_bron + sum(BronIteration/NrSelectedObjects)), .)';
		
		//resultaten bronclustering, eigenschappen per broncluster
		attribute<kW>		P_Warmte_primair				:=	='union_data(., ' +AsItemList('BronIterations/'+BronIteration/Name+'/Selected/P_Warmte_primair')+',		LastClusters/P_warmte_primair)';
		attribute<kW>		P_Warmte_secundair				:=	='union_data(., ' +AsItemList('BronIterations/'+BronIteration/Name+'/Selected/P_Warmte_secundair')+',	LastClusters/P_Warmte_secundair)';
		
		attribute<Ratio>	Weight							:=	='union_data(., ' +AsItemList('BronIterations/'+BronIteration/Name+'/Selected/Weight')+',				LastClusters/Weight)';
		attribute<Ratio>	Bron_vol_Weighted				:=	='union_data(., ' +AsItemList('BronIterations/'+BronIteration/Name+'/Selected/Bron_vol_Weighted')+',	LastClusters/Bron_vol_Weighted)';
		attribute<Eur_kW>	Ki_kW_min_weighted				:=	='union_data(., ' +AsItemList('BronIterations/'+BronIteration/Name+'/Selected/Ki_kW_min_weighted')+',	LastClusters/Ki_kW_min_weighted)';
		attribute<Eur_kW>	Ki_kW_max_weighted				:=	='union_data(., ' +AsItemList('BronIterations/'+BronIteration/Name+'/Selected/Ki_kW_max_weighted')+',	LastClusters/Ki_kW_max_weighted)';
		attribute<Eur_GJ>	K_GJ_weighted					:=	='union_data(., ' +AsItemList('BronIterations/'+BronIteration/Name+'/Selected/K_GJ_weighted')+',		LastClusters/K_GJ_weighted)';
		
		// bronspecifieke eigenschappen tbv rentabiliteitsafweging (nog niet volledig geimplementeerd)
		attribute<Ratio>	Bron_vol						:=	Bron_vol_Weighted / Weight,						Descr = "aandeel op volume bronspecifiek";
		attribute<Eur_kW>	Ki_kW_min						:=	Ki_kW_min_weighted / Weight,					Descr = "minimale kosten uitkoppeling bronspecifiek";
		attribute<Eur_kW>	Ki_kW_max						:=	Ki_kW_max_weighted / Weight,					Descr = "maximale kosten uitkoppeling bronspecifiek";
		attribute<Eur_GJ>	K_GJ							:=	K_GJ_weighted / Weight,							Descr = "meerkosten warmteproductie bronspecifiek";
		attribute<Ratio>	Bron_cap						:=	P_warmte_primair / P_Warmte_secundair,			Descr = "aandeel op capaciteit bronspecifiek";
		
		//gebiedsbeschrijving broncluster
		attribute<m>        LengthProxy                     := sum(Feature/LengthProxy, Feature/MST_rel);
		
		attribute<.>		per_UnitedCandidates(UnitedCandidates) :=	Selected/BronCluster_rel[invert(Selected/nr_OrgEntity)];
	}
	
	container BestaandeWoningData :=
		WKOWoningData(
			BebouwingsComponenten/BestaandeWoning, 
			BeginStatus/KostenBaten/PlanRegioKaarten/BestaandeWoning/WarmtePrijs, 
			BebouwingsComponenten/BestaandeWoning/BebouwingsTypeDomein,
			BeginStatus/KostenBaten/KostenD/Wonen/bw,
			constanten/KoudeBeschikbaar
		);

	container NieuwbouwWoningData :=
		WKOWoningData(
			BebouwingsComponenten/NieuwbouwWoning, 
			BeginStatus/KostenBaten/PlanRegioKaarten/NieuwbouwWoning/WarmtePrijs, 
			BebouwingsComponenten/NieuwbouwWoning/BebouwingsTypeDomein,
			BeginStatus/KostenBaten/KostenD/Wonen/nw,
			constanten/KoudeBeschikbaar
		);

	container BestaandeUtilData :=
		WKOUtilData(
			BebouwingsComponenten/BestaandeUtil, 
			BeginStatus/KostenBaten/PlanRegioKaarten/BestaandeUtil/WarmtePrijs,
			constanten/KoudeBeschikbaar
		);
	
	container NieuwbouwUtilData :=
		WKOUtilData(
			BebouwingsComponenten/NieuwbouwUtil, 
			BeginStatus/KostenBaten/PlanRegioKaarten/NieuwbouwUtil/WarmtePrijs,
			constanten/KoudeBeschikbaar
		);
	
	parameter<string> geschiktExpr := 'BcData/energielabel/CurrValue <= Classifications/energielabel/V/LabelE';
	container CandidateSets := for_each_ne(WkoComponent/Name, 
		'LtData('+WkoComponent/Name+'Data, '+Quote(WkoComponent/Name)+', T_sec, false, '+Quote(geschiktExpr)+')');
	
	//samenvoeging bestaande woningen, nieuwbouwwoningen, bestaande utiliteit, nieuwbouwutiliteit
	unit <uint32> UnitedCandidates := ='union_unit('+AsItemList('CandidateSets/'+WkoComponent/Name+'/AllowedObjects')+')'
	,	DialogType = "Map",	DialogData = "Point"
	{
		attribute<string>    Label        := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/AllowedObjects/Label') + ')', DialogType = "LabelText";
		attribute<rdc_meter> Point        := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/AllowedObjects/Point') + ')';

		//bepaling per kandidaat verbouwingsobject wat de dichtstbijzijnde bron is
		container connect_info := connect_info(BronCluster/Feature/Geometry, Point) {
			attribute<float64>              dist    (UnitedCandidates); // afstand
			attribute<BronCluster/Feature>  ArcID   (UnitedCandidates); // aan welk broncluster feature wordt er gekoppeld?
		}
		attribute<BronCluster> BronCluster_rel := BronCluster/Feature/MST_rel[connect_info/ArcID];
		
		//over te nemen attributen uit LtData.dms
		attribute<Eur_yr>	Contributiemarge	:= ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Contributiemarge		[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')', Descr = "Netto contributiemarge per object";
		attribute<GJ_Yr >	V_Warmte_primair	:= ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/V_Warmte_primair		[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')', Descr = "jaalijkse volumevraag warmte";
		attribute<GJ_Yr >	V_Koude_primair		:= ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/V_Koude_primair		[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')', Descr = "jaalijkse volumevraag koude";
		attribute<kW>		P_sec_primair		:= ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/P_sec_primair		[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')', Descr = "vermogen dat voor rekening van de primaire bron wordt gerekend";
		attribute<kW>		P_sec_hulp			:= ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/P_sec_hulp			[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')', Descr = "vermogen dat voor rekening van de hulpvoorziening wordt gerekend";
	}

	
	//selectie van vraaggebied rondom bron-cluster op basis van afstand tot capaciteit bron volledig gevuld is
	attribute<m> distance_threshold(BronCluster) := nth_element_weighted(
			value(UnitedCandidates/connect_info/dist, m), 
			BronCluster/P_Warmte_primair  , 
			UnitedCandidates/P_sec_primair,
			UnitedCandidates/BronCluster_rel
		), Descr = "selectie van vraaggebied rondom bron-cluster op basis van afstand tot capaciteit bron volledig gevuld is";
	
	// afnemers nabij centrum van een geselecteerd bron-cluster
	unit<uint32> Selected := Subset(UnitedCandidates/connect_info/dist <= distance_threshold[UnitedCandidates/BronCluster_rel])
	,	DialogType = "Map", DialogData = "Point" 
	{
		attribute<rdc_meter>        Point                   := UnitedCandidates/Point               [nr_OrgEntity];
		
		//attributen benodigd voor bepalen brongerelateerde kosten
		attribute<BronCluster>		BronCluster_rel			:= UnitedCandidates/BronCluster_rel		[nr_OrgEntity];
		attribute<EUR_Yr>			Contributiemarge		:= UnitedCandidates/Contributiemarge	[nr_OrgEntity];
		attribute<GJ_Yr>			V_Warmte_primair		:= UnitedCandidates/V_Warmte_primair	[nr_OrgEntity];
		attribute<GJ_Yr>			V_Koude_primair			:= UnitedCandidates/V_Koude_primair		[nr_OrgEntity];
		attribute<KW>				P_sec_primair			:= UnitedCandidates/P_sec_primair		[nr_OrgEntity];
		attribute<KW>				P_sec_hulp				:= UnitedCandidates/P_sec_hulp			[nr_OrgEntity];
	}
	
	//bepaling brongerelateerde kosten
	container Gebied {
		//Omvang gebied vraag-cluster
		attribute<m2>				AreaProxy			(BronCluster)	:=	BronCluster/LengthProxy * distance_threshold,							Descr = "indicatie van oppervlakte afnamegebied";
		
		//Omvang gebied bron-cluster en vraag-cluster gecombineerd
		
		//Optelling van attributen van gebouwen in vraaggebied
		attribute<Eur_Yr>			Contributiemarge	(BronCluster)	:=	sum(Selected/Contributiemarge,	Selected/BronCluster_rel),				Descr = "totale contributiemarge van gebouwen in vraaggebied";
		attribute<GJ_Yr>			V_Warmte_primair	(BronCluster)	:=	sum(Selected/V_Warmte_primair,	Selected/BronCluster_rel),				Descr = "totale warmtevraag aan de primaire bron van gebouwen in vraaggebied";
		attribute<GJ_Yr>			V_Koude_primair		(BronCluster)	:=	sum(Selected/V_Koude_primair,	Selected/BronCluster_rel),				Descr = "totale koudevraag aan de primaire bron van gebouwen in vraaggebied";
		attribute<KW>				P_sec_primair		(BronCluster)	:=	sum(Selected/P_sec_primair,		Selected/BronCluster_rel),				Descr = "totale capaciteitsvraag aan de primaire bron van gebouwen in vraaggebied";
		attribute<KW>				P_sec_hulp			(BronCluster)	:=	sum(Selected/P_sec_hulp,		Selected/BronCluster_rel),				Descr = "totale capaciteitsvraag aan de hulpvoorziening van gebouwen in vraaggebied";

		//Aanvullende kosten brongerelateerd
		attribute<Eur>				Ki_ow_brondist		(BronCluster)	:=	BronCluster/LengthProxy * constanten/Ki_brondist,						Descr ="investeringskosten distributieleidingen om bron met elkaar te verbinden";
		attribute<Eur>				Ki_ow_buffer		(BronCluster)	:=	const(constanten/Ki_Buffer, BronCluster),								Descr ="investeringskosten buffervat bij primaire bron";
		attribute<Eur>				Ki_ow				(BronCluster)	:=	Ki_ow_brondist + Ki_ow_buffer,											Descr ="investeringskosten opwekking";
		attribute<Eur>				Oi_ow_EIA			(BronCluster)	:=	Ki_ow * SpecifiekeInstellingen/Beleid/EIA/LT,							Descr ="investeringssubsidie opwekking";
		attribute<Eur_Yr>			KL_ow				(BronCluster)	:=	(Ki_ow - Oi_ow_EIA) * NCW/ow28/AnnualisationFactor,						Descr ="jaarlijkse kapitaallasten opwekking";
		attribute<Eur>				Ki_wd_wijkdist		(BronCluster)	:=	AreaProxy * constanten/Ki_distr,										Descr ="investeringskosten distributieleidingen wijkdistributie";
		attribute<Eur>				Oi_wd_EIA			(BronCluster)	:=	Ki_wd_wijkdist * SpecifiekeInstellingen/Beleid/EIA/wd,					Descr ="investeringssubsidie distributieleidingen wijkdistributie";
		attribute<Eur_Yr>			KL_wd				(BronCluster)	:=	(Ki_wd_wijkdist - Oi_wd_EIA) * NCW/id28/AnnualisationFactor,			Descr ="jaarlijkse kapitaallasten distributieleidingen wijkdistributie";
		attribute<Eur_Yr>			Kj_productie		(BronCluster)	:=	V_Warmte_primair * BronCluster/K_GJ,									Descr ="bronspecifieke productiekosten per jaar";
		attribute<Eur_Yr>			Kj_ow_admin			(BronCluster)	:=	Ki_ow * constanten/OenM/R_ow_admin,										Descr ="administratiekosten opwekking";
		attribute<Eur_Yr>			Kj_ow_onderhoud		(BronCluster)	:=	Ki_ow * constanten/OenM/R_ow_onderhoud,									Descr ="onderhoudskosten opwekking";
		attribute<Eur_Yr>			Kj_wd_admin			(BronCluster)	:=	Ki_wd_wijkdist * constanten/OenM/R_wd_admin,							Descr ="administratiekosten distributieleidingen wijkdistributie";
		attribute<Eur_Yr>			Kj_wd_onderhoud		(BronCluster)	:=	Ki_wd_wijkdist * constanten/OenM/R_wd_onderhoud,						Descr ="onderhoudskosten distributieleidingen wijkdistributie";
		attribute<Eur_Yr>			Kj_onderhoud		(BronCluster)	:=	Kj_ow_onderhoud + Kj_wd_onderhoud,										Descr ="onderhoudskosten brongerelateerd";
		attribute<Eur_Yr>			Kj_admin			(BronCluster)	:=	Kj_ow_admin + Kj_wd_admin,												Descr ="administratiekosten brongerelateerd";
		
		attribute<Eur_Yr>			Kj_brongerelateerd	(BronCluster)	:=	KL_ow + KL_wd + Kj_onderhoud + Kj_admin + Kj_productie,					Descr ="totale jaarlijkse kosten brongerelateerd";
		attribute<Eur_Yr>			Rentabiliteit		(BronCluster)	:=	Contributiemarge - Kj_brongerelateerd,									Descr ="rentabiliteit van aanleg gebiedsoptie";
		
		attribute<bool>				Afweging			(BronCluster)	:=	Rentabiliteit > 0 [Eur_yr],												Descr ="besluit tot allocatie op basis van rentabiliteit";
	}
	unit<uint32> RendabelCluster 	:= subset(gebied/Afweging) {
		attribute<BronCluster> BronCluster_rel := nr_OrgEntity;
		attribute<RendabelCluster> RendabelCluster_per_BronCluster(BronCluster) := invert(BronCluster_rel);
		attribute<.> per_bronSrc(bronSrc) := RendabelCluster_per_BronCluster[BronCluster/per_bron[rlookup(bronSrc/Point, bron/Point)]];
		attribute<.> per_UnitedCandidates(UnitedCandidates) := RendabelCluster_per_BronCluster[BronCluster/per_UnitedCandidates]; // relatie van BebouwingsObjecten naar geselecteerde bron-clusters
		
		attribute<Eur_yr> Rentabiliteit := Gebied/Rentabiliteit[BronCluster_rel];
		
		// feature selectie
		unit<uint32> BronClusterFeature := BronCluster/Feature;
		unit<uint32> Feature := subset(IsDefined(invert(BronCluster_rel)[BronClusterFeature/MST_rel]))
		, DialogType = "Map", DialogData = "Geometry"
		{
			attribute<BronClusterFeature> BronClusterFeature_rel := nr_OrgEntity;
			attribute<rdc_meter>    Geometry(arc) := BronClusterFeature/Geometry[BronClusterFeature_rel];
			attribute<..>           MST_rel  := invert(BronCluster_rel)[BronClusterFeature/MST_rel[BronClusterFeature_rel]];			
		}
		
		unit<uint32> Network := connect_eq(Feature/Geometry, BronCluster_rel[Feature/MST_rel], Selected/Point, selected/BronCluster_rel) {
			attribute<rdc_meter> UnionData(arc);
			attribute<Feature>   nr_OrgEntity;
			attribute<..>        MST_rel := Feature/MST_rel[nr_OrgEntity];
		}
	}
	
	attribute<uint32> NrAllowedObjects          (WkoComponent)	:= ='union_data(WkoComponent, '+AsItemList('#CandidateSets/'+WkoComponent/Name+'/AllowedObjects')+')';
	attribute<uint32> NrAllObjects              (WkoComponent)	:= ='union_data(WkoComponent, '+AsItemList('#CandidateSets/'+WkoComponent/Name+'/BebouwingsObject')+')';
	attribute<uint32> CumulNrPrevAllowedObjects (WkoComponent)	:= cumulate(NrAllowedObjects)-NrAllowedObjects;
	attribute<uint32> CumulNrPrevAllObjects     (WkoComponent)	:= cumulate(NrAllObjects)-NrAllObjects;

	unit<uint32> AllObjects := ='union_unit('+AsItemList('ObjectResults/'+WkoComponent/Name+'/BebouwingsObject')+')'
	{
		attribute<string>		Label				:= ='union_data(., ' + asItemList('BebouwingsComponenten/' + WkoComponent/Name + '/BebouwingsObject/Label') + ')', DialogType = "LabelText";
		attribute<RendabelCluster>	RendabelCluster_rel		:= ='union_data(., ' + AsItemList('ObjectResults/'+WkoComponent/Name+'/Cluster_relNow')+')';
		attribute<BronCluster>	Cluster_rel			:= RendabelCluster/nr_OrgEntity[RendabelCluster_rel];
		attribute<Eur_yr>		Kj_totaal			:= ='union_data(., ' + AsItemList('ObjectResults/'+WkoComponent/Name+'/WkoData/Kj_totaal')+')';
		attribute<Eur>			Ki_ow_bron			:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Ki_ow);
		attribute<Eur>			Ki_wd_bron			:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Ki_wd_wijkdist);
		attribute<Eur_yr>		Kj_wd_oh_bron		:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Kj_wd_onderhoud);
		attribute<Eur_yr>		Kj_wd_admin_bron	:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Kj_wd_admin);
		attribute<Eur_yr>		Kj_ow_oh_bron		:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Kj_ow_onderhoud);
		attribute<Eur_yr>		Kj_ow_admin_bron	:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Kj_ow_admin);
		attribute<Eur_yr>		Kj_productie_bron	:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Kj_productie);
		attribute<Eur_yr>		Oi_wd_EIA_bron		:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Oi_wd_EIA);
		attribute<Eur_yr>		Oi_ow_EIA_bron		:= scalesum(max_elem(Kj_totaal, 1.0[Eur_yr]), Cluster_rel, Gebied/Oi_ow_EIA);
	}

	
	container ObjectResults :=
		for_each_ne(WkoComponent/Name, 
			'LtResults('
				'UnitedCandidates, RendabelCluster, CandidateSets/'+WkoComponent/Name+',Classifications/AanbodOptie/V/'+AanbodOptie_name+',' 
				'CumulNrPrevAllowedObjects['+string(id(WkoComponent))+'[WkoComponent]],'
				'CumulNrPrevAllObjects['+string(id(WkoComponent))+'[WkoComponent]]'
			')'
		);

	
	container Results := BeginStatus
	{
		container Bebouwing :=
			for_each_ne(Classifications/BebouwingsComponent/Name
				, Classifications/BebouwingsComponent/KanWKO 
					? 'ObjectResults/'+Classifications/BebouwingsComponent/Name+'/Result' 
					: 'BeginStatus/Bebouwing/'+Classifications/BebouwingsComponent/Name
			);
			
		container Stock := BeginStatus/Stock;
		container Flow  := BeginStatus/Flow;
		
		container LtWarmte := BeginStatus/LtWarmte
		{
			unit<uint32> bron := BeginStatus/LtWarmte/bron {
				attribute<bool> NuToegewezen := IsDefined(RendabelCluster/per_bronSrc);
				attribute<bool> Toegewezen := BeginStatus/LtWarmte/bron/Toegewezen || NuToegewezen;
				
				unit<uint32> PrevClusterSet := BeginStatus/LtWarmte/bron/CumulativeClusterSet;
				unit<uint32> CumulativeClusterSet := union_unit(PrevClusterSet, RendabelCluster)
				, DialogType = "Map", DialogData = "Point"
				{
					attribute<.> per_bron(..) := MakeDefined(RendabelCluster/per_bronSrc, PrevClusterSet/per_bron);
					
					attribute<rdc_meter> Point := mean(center_bound(Feature/Geometry), Feature/Cluster_rel);
										
					attribute<Classifications/AanbodOptie> AanbodOptie_rel := union_data(., PrevClusterSet/AanbodOptie_rel, const(impl/AanbodOptie_rel, RendabelCluster));
					attribute<Classifications/Rekenstap  > Rekenstap_rel   := union_data(., PrevClusterSet/Rekenstap_rel,   const(......../zichtjaar_rel, RendabelCluster));
					attribute<Classifications/Zichtjaar  > ZichtJaar_rel   := union_data(., PrevClusterSet/ZichtJaar_rel,   const(rlookup(RekenstapName, classifications/RekenStap/name), RendabelCluster));
					
					unit<uint32> Feature := union_unit(PrevClusterSet/Feature, RendabelCluster/Feature)
					, DialogType = "Map", DialogData = "Geometry"
					{
						attribute<rdc_meter> Geometry(arc) := union_data(., PrevClusterSet/Feature/Geometry, RendabelCluster/Feature/Geometry);
						attribute<..> Cluster_rel := value(union_data(., PrevClusterSet/Feature/Cluster_rel, RendabelCluster/Feature/MST_rel + #PrevClusterSet/Feature), ..);
											
						attribute<Classifications/AanbodOptie> AanbodOptie_rel := CumulativeClusterSet/AanbodOptie_rel[Cluster_rel];
						attribute<Classifications/Rekenstap  > Rekenstap_rel   := CumulativeClusterSet/Rekenstap_rel  [Cluster_rel];
						attribute<Classifications/Zichtjaar  > ZichtJaar_rel   := CumulativeClusterSet/ZichtJaar_rel  [Cluster_rel];
					}
				}
				
				unit<uint32> PrevNetwork := BeginStatus/LtWarmte/bron/CumulativeNetwork;
				unit<uint32> CumulativeNetwork := union_unit(PrevNetwork, RendabelCluster/Network)
				, DialogType = "Map", DialogData = "Geometry"
				{
					attribute<rdc_meter> Geometry(arc) := union_data(., PrevNetwork/Geometry, RendabelCluster/Network/UnionData);
					
//					attribute<..> Cluster_rel := value(union_data(., PrevNetwork/Feature/MST_rel, RendabelCluster/Feature/MST_rel + #PrevClusterSet/Feature), ..);
										
					attribute<Classifications/AanbodOptie> AanbodOptie_rel := union_data(., PrevNetwork/AanbodOptie_rel, const(impl/AanbodOptie_rel, RendabelCluster/Network));
					attribute<Classifications/Rekenstap  > Rekenstap_rel   := union_data(., PrevNetwork/Rekenstap_rel,   const(......../zichtjaar_rel, RendabelCluster/Network));
					attribute<Classifications/Zichtjaar  > ZichtJaar_rel   := union_data(., PrevNetwork/ZichtJaar_rel,   const(rlookup(RekenstapName, classifications/RekenStap/name), RendabelCluster/Network));
				}
			}
		}
		container LtWarmtenet
		{
			unit<uint8> LT_Component := Classifications/WkoComponent; // TODO MTA: CHECK (impliciete?) aannamen dat LT ook niet geschikt is voor Glastuinbouw en daarmee qua componenttoepassing equivalent is met WKO
			
			//opbrengsten per groep bebouwingscomponenten
			
			container		Oi_Aansl		:=	for_each_nedv(LT_Component/Name, replace('BeginStatus/Wko/Oi_Aansl/@W@ + ObjectResults/@W@/PR/Oi_Aansl', '@W@', LT_Component/Name), PlanRegio, Eur);
			container		Oj_Vastrecht	:=	for_each_nedv(LT_Component/Name, replace('BeginStatus/Wko/Oj_Vastrecht/@W@ + ObjectResults/@W@/PR/Oj_Vastrecht', '@W@', LT_Component/Name), PlanRegio, Eur_yr);
			container		Oj_Verbruik		:=	for_each_nedv(LT_Component/Name, replace('ObjectResults/@W@/PR/Oj_Verbruik', '@W@', LT_Component/Name), PlanRegio, Eur_yr);
			container		Om_comfort		:=	for_each_nedv(LT_Component/Name, replace('ObjectResults/@W@/PR/Om_comfort' , '@W@', LT_Component/Name), PlanRegio, Eur_yr);
			
			// recalculated stock
			attribute<Eur>		Ki_ge_pm	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Ki_ge_pm	')+')';
			attribute<Eur>		Ki_ge_ov	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Ki_ge_ov	')+')';
			
			
			// recalculated Flow
			attribute<Eur_yr>	Kj_wd_pr	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Kj_wd_pr	')+')';
			attribute<Eur_yr>	Km_ow_e		(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Km_ow_e	')+')';
			attribute<Eur_yr>	Kj_ow_e		(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Kj_ow_e	')+')';
			attribute<Eur_yr>	KEH_ow_e	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KEH_ow_e	')+')';
			attribute<Eur_yr>	Kj_ge		(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Kj_ge		')+')';

			//onderhoudskosten
			attribute<Eur_yr>	Kj_ow_oh	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/OenM/Kj_ow_oh		')+')';
			attribute<Eur_yr>	Kj_id_oh	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/OenM/Kj_id_oh		')+')';
			attribute<Eur_yr>	Kj_wd_oh	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/OenM/Kj_wd_oh		')+')';
			//administratiekosten
			attribute<Eur_yr>	Kj_ow_adm	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/OenM/Kj_ow_adm	')+')';
			attribute<Eur_yr>	Kj_id_adm	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/OenM/Kj_id_adm	')+')';
			attribute<Eur_yr>	Kj_wd_adm	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/OenM/Kj_wd_adm	')+')';
			
			attribute<Eur_yr>	Kj_ow_o		(PlanRegio)		:= Kj_ow_oh + Kj_id_oh + Kj_wd_oh + Kj_ow_adm + Kj_id_adm + Kj_wd_adm;
			
			//cumulatieve investering in opwekking en wijkdistributie
			attribute<Eur>		Ki_ow		(PlanRegio)		:= ='PrevLtWarmtenet/Ki_ow + add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Ki_ow		')+')', Descr = "investering opwekker, gebouwzijde en brongerelateerd";
			attribute<Eur>		Ki_wd		(PlanRegio)		:= ='PrevLtWarmtenet/Ki_wd + add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Ki_wd		')+')', Descr = "investering wijkdistributeur, gebouwzijde en brongerelateerd";
			attribute<Eur>		Ki_id		(PlanRegio)		:= ='PrevLtWarmtenet/Ki_id + add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Ki_id		')+')';
			attribute<Eur>		Ki_ge		(PlanRegio)		:= ='PrevLtWarmtenet/Ki_ge + add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Ki_ge		')+')';
			//kapitaallasten op investeringen
			attribute<Eur_yr>	Kj_ge_Bruto	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KL_ge')+')';
			attribute<Eur_yr>	Kj_id_Bruto	(PlanRegio)		:= ='Kj_id_oh + Kj_id_adm + add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KL_id	')+')';
			attribute<Eur_yr>	Kj_wd_Bruto	(PlanRegio)		:= ='Kj_wd_oh + Kj_wd_adm + add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KL_ge	')+')';
			attribute<Eur_yr>	Kj_ow_Bruto	(PlanRegio)		:= ='Kj_ow_oh + Kj_ow_adm + add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KL_ow	')+')';
			//subsidies op investeringen
			attribute<Eur>		Si_ow		(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Oi_ow_EIA		')+')';
			attribute<Eur>		Si_wd		(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Oi_wd_EIA		')+')';
			attribute<Eur>		Si_id		(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Oi_id_EIA		')+')';
			attribute<Eur>		Si_ge		(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/Oi_ge_EIA		')+')';
			attribute<Eur>		Si_T		(PlanRegio)		:= Si_ow + Si_wd + Si_id + Si_ge,	Descr = "totale initiele subsidie";
								
			attribute<Eur>		Ki_Totaal	(PlanRegio)		:= Ki_id + Ki_ge + Ki_ow + Ki_wd,	Descr = "totale initiele investering";
			attribute<Eur_yr>	Km_Totaal	(PlanRegio)		:= Km_ow_e + Kj_ow_o + NCW/mr28/AnnualisationFactor * Ki_Totaal - Om_ComfortT;

			//netto investeringskosten
			attribute<Eur>		Ki_ow_Netto	(PlanRegio)		:= Ki_ow - Si_ow,	Descr = "netto investering opwekking na aftrek investeringssubsidie";
			attribute<Eur>		Ki_wd_Netto	(PlanRegio)		:= Ki_wd - Si_wd,	Descr = "netto investering wijkdistributie na aftrek investeringssubsidie";
			attribute<Eur>		Ki_id_Netto	(PlanRegio)		:= Ki_id - Si_id,	Descr = "netto investering inpandig na aftrek investeringssubsidie";
			attribute<Eur>		Ki_ge_Netto	(PlanRegio)		:= Ki_ge - Si_ge,	Descr = "netto investering eigenaarvergoedingen na aftrek investeringssubsidie";

			attribute<Eur_yr>	Sj			(PlanRegio)		:= Si_ow * NCW/ow28/AnnualisationFactor + Si_wd * NCW/wd28/AnnualisationFactor + Si_id * NCW/id28/AnnualisationFactor + Si_ge * NCW/bw28/AnnualisationFactor;
			attribute<Eur_yr>	Sm			(PlanRegio)		:= Si_T * NCW/mr28/AnnualisationFactor;

			//exploitatiesubsidies
			attribute<Eur_yr>	SDE			(PlanRegio)		:= GJw_Totaal * SpecifiekeInstellingen/Beleid/EEA/SDE_LT;
			attribute<Eur_yr>	Se_ow		(PlanRegio)		:= Ki_ow_Netto * NCW/ow28/AnnualisationFactor * SpecifiekeInstellingen/Beleid/EEA/LT + SDE;
			attribute<Eur_yr>	Se_wd		(PlanRegio)		:= Ki_wd_Netto * NCW/wd28/AnnualisationFactor * SpecifiekeInstellingen/Beleid/EEA/wd;
			attribute<Eur_yr>	Se_id		(PlanRegio)		:= Ki_id_Netto * NCW/id28/AnnualisationFactor * SpecifiekeInstellingen/Beleid/EEA/id;
			attribute<Eur_yr>	Se_ge		(PlanRegio)		:= Ki_ge_Netto * NCW/bw28/AnnualisationFactor * SpecifiekeInstellingen/Beleid/EEA/ge;
			attribute<Eur_yr>	Se			(PlanRegio)		:= Sj + Se_ow + Se_wd + Se_id + Se_ge;
			attribute<Eur_yr>	Sme			(PlanRegio)		:= Sm + Se_ow + Se_wd + Se_id + Se_ge;

			//netto kapitaallasten na aftrek subsidies
			attribute<Eur_yr>	Kj_ge_netto	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KL_ge		')+')',		Descr = "";
			attribute<Eur_yr>	Kj_id_netto	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KL_id		')+')',		Descr = "";
			attribute<Eur_yr>	Kj_wd_netto	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KL_wd		')+')',		Descr = "";
			attribute<Eur_yr>	Kj_ow_netto	(PlanRegio)		:= ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/KL_ow		')+')',		Descr = "";
			attribute<Eur_yr>	Kj_netto	(PlanRegio)		:= Kj_ge_netto + Kj_id_netto + Kj_wd_netto + Kj_ow_netto;
			
			attribute<Eur>		Oi_AanslT	(PlanRegio)		:= ='add('+AsItemList('Oi_Aansl/'+LT_Component/Name)+')';
			attribute<Eur_yr>	Oj_VerbrT	(PlanRegio)		:= ='add('+AsItemList('Oj_Verbruik/'+LT_Component/Name)+')';
			attribute<Eur_yr>	Oj_VastrT	(PlanRegio)		:= ='add('+AsItemList('Oj_Vastrecht/'+LT_Component/Name)+')';
			attribute<Eur_yr>	Om_ComfortT	(PlanRegio)		:= ='add('+AsItemList('Om_Comfort/'+LT_Component/Name)+')';
			attribute<Eur_yr>	Oj_totaal	(PlanRegio)		:= Oj_VerbrT + Oj_VastrT + Oi_AanslT * (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);

			// CO2: geen bijstook nodig, want verwarming per eWP met LTAS; wel CO2 voor elektriciteit voor collectieve warmtepomp
			attribute<Eur_yr> KCO2_ow_e   (PlanRegio) := ='add('+AsItemList('ObjectResults/'+LT_Component/Name+'/PR/KCO2_ow_e')+')';
			attribute<KG_yr>  CO2         (PlanRegio) := GJe_Totaal * prijzen/Elektriciteit/CO2_GJ;

			attribute<GJ_yr>  GJe_Totaal  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/GJe')+')';
			attribute<GJ_yr>  GJw_Totaal  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + LT_Component/Name + '/PR/GJw')+')';
		}
		container KostenBaten := CalculationSchemes/KostenBaten(Bebouwing, Energieprijzen);
	}
}
