//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template RestWarmte
{
	container BeginStatus;
	container AanbodKentallen;
	container EnergiePrijzen;
	parameter<units/yr_uint16> Jaar;

	// end of case param

	unit<uint32> PlanRegio := SpecifiekeInstellingen/PlanRegio;
	container KostenBaten  := BeginStatus/KostenBaten;

	unit<uint32> Bronnen := ='/Model/BronData/WarmteBronnen/RestWarmte/BronSelecties/J'+String(Jaar)+'/Bronnen'
	{
		attribute<Eur_kW   > Ki_kW_Org:= (Ki_kW_min * Schuiven/KostenMin + Ki_kW_max * Schuiven/KostenMax);
		attribute<Eur_kW   > Ki_kW    := Ki_kW_org  * LeerCurves/Curve2;
		attribute<Eur_kW_yr> Kj_kW    := Ki_kW * Rj_Onderhoud;
	}

	container RestWarmteStartingState := BeginStatus/AanbodOpties/RestWarmte
	{
		unit<uint32> BronConnections := ../Bronnen;
		
		attribute<BronConnections>  CurrBron        (PlanRegio)       := rlookup(CumulatedArcSet/BronPoint, BronConnections/Point)[invert(CumulatedArcSet/PlanRegio_rel)];
		attribute<BronConnections>  CurrConnection  (PlanRegio)       := CurrBron;

		attribute<MW>               MWth_used       (BronConnections) := sum(KostenBaten/CapaciteitsVraagD * float64(GebruikRestwarmte) , CurrBron);
		attribute<MW>               MWth_capaciteit (BronConnections) := Bronnen/MWth_max  - MWth_used;
	}
	attribute<Bool> HasWarmteVraag (PlanRegio) := not(IsDefined(BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie));
	
	template IteratieTempl
	{
		container PrevState := RestWarmteStartingState;

		unit<uint32> BronConnections := PrevState/BronConnections;

		attribute<MW> MWth_capaciteit(Bronnen) := PrevState/MWth_capaciteit;

		attribute<BronConnections> NewAssignment (PlanRegio) :=
			capacitated_connect(BronConnections/Point, MWth_capaciteit[BronConnections/Bronnen_rel], PlanRegio/Point, KostenBaten/CapaciteitsVraagD);

		attribute<BronConnections> Assignment (PlanRegio) := MakeDefined(PrevState/CurrConnection, NewAssignment)
		{
			attribute<Bronnen> Bronnen_rel(PlanRegio):= BronConnections/Bronnen_rel[Assignment];
			attribute<BronData/WarmteBronnen/MetaData/TypeInfoList> TypeInfoList_rel (PlanRegio) :=  Bronnen/TypeInfoList_rel[Bronnen_rel];

			attribute<m>   dist      (PlanRegio):= value(dist(PlanRegio/Point, BronConnections/Point[Assignment]), m);
			attribute<m>   cumulDist (PlanRegio):= dist + BronConnections/cumulDist[Assignment];
			attribute<MW>  P         (PlanRegio):= KostenBaten/CapaciteitsVraagD;

			attribute<MW>  orgP      (PlanRegio):= BronConnections/CumulP[Assignment]; // re-assess
			attribute<MW>  cumulP    (PlanRegio):= P + orgP;

			container OrgLeidingKosten := BuisKosten(PlanRegio, orgP);
			container NewLeidingKosten := BuisKosten(PlanRegio, cumulP);

			attribute<Eur> aK_buis   (PlanRegio) := dist * KostenBaten/KostenD/PrimairNet/LeidingKosten/aK_m + cumulDist * (NewLeidingKosten/aK_m - OrgLeidingKosten/aK_m);
			attribute<Eur> Ki_pt     (PlanRegio) := aK_Buis;
			attribute<Eur> Ki_ow     (PlanRegio) := Bronnen/Ki_kW[Assignment/Bronnen_rel] * LeerCurves/Curve2 * Assignment/P * value(1000, kW / MW);

			// TODO: ordenen, controleer of alle Kj zijn opgenomen, precario op pt, admin op pt en ow.

			attribute<Eur_yr> Kj_KL_ptow(PlanRegio) :=
				Ki_pt * NCW/pt28/AnnualisationFactor * ((1.0 - SpecifiekeInstellingen/BeleidsOpties/EIA/pt)*(1.0 - SpecifiekeInstellingen/BeleidsOpties/EEA/pt))+
				Ki_ow * NCW/ow28/AnnualisationFactor * MakeDefined(((1.0 - SpecifiekeInstellingen/BeleidsOpties/EIA/ow)*(1.0 - SpecifiekeInstellingen/BeleidsOpties/EEA/ow))[TypeInfoList_rel], 1.0);

			attribute<Eur_yr> Kj_pt_onderhoud (PlanRegio) := aK_Buis * VestaRunData/Onderhoud/Rj_PrimairNet * VestaRunData/Onderhoud/R_Onderhoud;
			attribute<Eur_yr> Kj_pt_admin     (PlanRegio) := aK_Buis * VestaRunData/Onderhoud/Rj_PrimairNet * VestaRunData/Onderhoud/R_Admin;
			attribute<Eur_yr> Kj_pt_precario  (PlanRegio) := KostenBaten/KostenD/PrimairNet/LeidingKosten/a * dist * VestaRunData/Onderhoud/Rj_Precario_m;

			attribute<Eur_yr> Kj_pt           (PlanRegio) := Kj_pt_onderhoud + Kj_pt_admin + Kj_pt_precario;

			attribute<Eur_GJ> Kj_GJ           (PlanRegio) := Bronnen/K_GJ [Assignment/Bronnen_rel];
			attribute<Eur_GJ> Km_GJ           (PlanRegio) := Kj_GJ;

			attribute<Eur_yr> Kj_WarmteWaarde (PlanRegio) := Kj_GJ * KostenBaten/Vj_WarmtePrimairD;
			attribute<Eur_yr> Km_WarmteWaarde (PlanRegio) := Km_GJ * KostenBaten/Vj_WarmtePrimairD;
			attribute<Eur_yr> Kj_ow_base      (PlanRegio) := Bronnen/Kj_kW[Assignment/Bronnen_rel] * Assignment/P * value(1000, kW / MW);
			attribute<Eur_yr> Kj_ow_admin     (PlanRegio) := Kj_ow_base * VestaRunData/Onderhoud/R_Admin;
			attribute<Eur_yr> Kj_ow_onderhoud (PlanRegio) := Kj_ow_base - Kj_ow_admin;

			attribute<Eur_yr> Kj_ow           (PlanRegio) := Kj_WarmteWaarde + Kj_ow_onderhoud + Kj_ow_admin;
			attribute<Eur_yr> Km_ow           (PlanRegio) := Km_WarmteWaarde + Kj_ow_onderhoud + Kj_ow_admin;

			attribute<Eur_yr> Kj_owpt         (PlanRegio) := Kj_ow + Kj_pt;
			attribute<Eur_yr> Oj_Netto        (PlanRegio) := KostenBaten/Oj_NettoD- Kj_owpt;

			attribute<Eur_yr> Oj_SDE          (PlanRegio) := KostenBaten/Vj_WarmtePrimairD * MakeDefined(SpecifiekeInstellingen/BeleidsOpties/EEA/SDE[TypeInfoList_rel], 0[Eur_GJ]);
			attribute<Eur_MW_yr> Mr           (PlanRegio) := (Oj_Netto + Oj_SDE - Kj_KL_ptow) / KostenBaten/CapaciteitsVraagD; // contribution  margin per consumed MW capacity
		}
		attribute<Eur_MW_yr>  Ranking         (PlanRegio) := Assignment/Mr// ranking niet op prijs per GJ maar op opbrengsten per MW capaciteit, itt FO v7a $7.
			* float64(KostenBaten/CapaciteitsVraagD <= MWth_capaciteit[Assignment/Bronnen_rel]) // itt FO v7a $7.: te grote gebieden worden overgeslagen zodat kleinere gebieden toch aan de bEurt kunnen komen.
			* float64(Not(PrevState/GebruikRestwarmte))  // Only select once
			* float64(HasWarmteVraag); // don't selecte already allocated planregio

		attribute<Eur_MW_yr>  Threshold_RAW(Bronnen):= -nth_element_weighted(-Ranking, MWth_capaciteit, KostenBaten/CapaciteitsVraagD, Assignment/Bronnen_rel);
		attribute<Eur_MW_yr>  Threshold    (Bronnen):= MakeDefined(threshold_RAW, 0[Eur_MW_yr]);
		attribute<MW>         MWth_above   (Bronnen):= sum(float64(Ranking > Threshold[Assignment/Bronnen_rel])*KostenBaten/CapaciteitsVraagD, Assignment/Bronnen_rel);
		attribute<MW>         MWth_at      (Bronnen):= sum(float64(Ranking = Threshold[Assignment/Bronnen_rel])*KostenBaten/CapaciteitsVraagD, Assignment/Bronnen_rel);
		attribute<MW>         MWth_below   (Bronnen):= sum(float64(Ranking < Threshold[Assignment/Bronnen_rel])*KostenBaten/CapaciteitsVraagD, Assignment/Bronnen_rel);

		attribute<Bool> AanlegAfweging         (PlanRegio) := Ranking > max_elem(Threshold[Assignment/Bronnen_rel], 0.0[Eur_MW_yr]);
		attribute<Bool> ExtraGebruikRestWarmte (PlanRegio) := =Voorkeuren/NewRestWarmte ? 'AanlegAfweging' : 'const(false, PlanRegio)';

		attribute<MW >  MWth_ExtraGebruik  (Bronnen) := sum(KostenBaten/CapaciteitsVraagD * float64(ExtraGebruikRestWarmte) , Assignment/Bronnen_rel);

		container NextState
		{
			attribute<MW> MWth_capaciteit(Bronnen) := PrevState/MWth_capaciteit - MWth_ExtraGebruik;

			attribute<Bool> GebruikRestWarmte(PlanRegio) := ExtraGebruikRestWarmte || PrevState/GebruikRestWarmte,
				IntegrityCheck = "not(any(ExtraGebruikRestWarmte && PrevState/GebruikRestWarmte))"
			{
				attribute<uint32> BrushColor(Bool) :  DialogType = "BrushColor", [ rgb(255,255,255), rgb(255,0,0) ];
				parameter<uint32> PenColor         := rgb(167,167,167), DialogType = "PenColor";
				parameter<int16>  PenWidth         := 1s              , DialogType = "PenWidth";
			}
			attribute<Bronnen> CurrBron(PlanRegio) := ExtraGebruikRestWarmte ? Assignment/Bronnen_rel : PrevState/CurrBron;
			unit<uint32> ConnectedPlanRegio := Subset(ExtraGebruikRestWarmte)
			{
				// the following is merely for display only
				unit<uint32> ExtraPoints := union_unit(ConnectedPlanRegio, ConnectedPlanRegio)
				{
					attribute<rdc_meter>          Point      := union_data(., PrevState/BronConnections/point[Assignment[ConnectedPlanRegio/nr_OrgEntity]],PlanRegio/Point[ConnectedPlanRegio/nr_OrgEntity]);
					attribute<ConnectedPlanRegio> SequenceNr := union_data(., id(ConnectedPlanRegio), id(ConnectedPlanRegio));
					attribute<uint32>             Ordinal    := union_data(., const(0, ConnectedPlanRegio), const(1, ConnectedPlanRegio));
				}
				attribute<rdc_meter> ExtraArcs (arc) := points2sequence(ExtraPoints/Point, ExtraPoints/SequenceNr, ExtraPoints/Ordinal);
			}
			unit<uint32> BronConnections := union_unit(PrevState/BronConnections, ConnectedPlanRegio)
			{
				attribute<Bronnen>   Bronnen_rel:= union_data(., PrevState/BronConnections/Bronnen_rel, Assignment/Bronnen_rel[ConnectedPlanRegio/nr_OrgEntity]);
				attribute<m>         CumulDist  := union_data(., PrevState/BronConnections/CumulDist,   Assignment/CumulDist  [ConnectedPlanRegio/nr_OrgEntity]);
				attribute<MW>        CumulP     := union_data(., PrevState/BronConnections/CumulP+sum(ExtraGebruikRestWarmte ? Assignment/P : 0[MW],  Assignment), Assignment/P[ConnectedPlanRegio/nr_OrgEntity]);
				attribute<rdc_meter> Point      := union_data(., PrevState/BronConnections/Point,       PlanRegio/Point[ConnectedPlanRegio/nr_OrgEntity]);
			}
			attribute<BronConnections> CurrConnection (PlanRegio) := convert(ExtraGebruikRestWarmte ? Assignment : PrevState/CurrConnection, BronConnections);

			unit<uint32> CumulatedArcSet := union_unit(PrevState/CumulatedArcSet, ConnectedPlanRegio), DialogType = "Map", DialogData = "CumulatedArcs"
			{
				attribute<rdc_meter> BronPoint     := union_data(., PrevState/CumulatedArcSet/BronPoint, Bronnen/Point[Assignment/Bronnen_rel[ConnectedPlanRegio/nr_OrgEntity]]);
				attribute<float64>   BronPointX    := PointCol(BronPoint);
				attribute<float64>   BronPointY    := PointRow(BronPoint);
				attribute<PlanRegio> PlanRegio_rel := union_data(., PrevState/CumulatedArcSet/PlanRegio_rel, ConnectedPlanRegio/nr_OrgEntity);
			}

			attribute<rdc_meter> CumulatedArcs (CumulatedArcSet, arc) := union_data(CumulatedArcSet, PrevState/CumulatedArcs, ConnectedPlanRegio/ExtraArcs)
			{
				parameter<uint32> PenColor := rgb(0,0,0), DialogType = "PenColor";
				parameter<int16>  PenWidth := 2s  , DialogType = "PenWidth";
			}
		}
	}
	parameter<uint32> NrIterations := Voorkeuren/NewRestWarmte ? 25 : 1;
	unit<uint32> Iteration := Range(uint32, 0, NrIterations)
	{
		attribute<String> Name          := 'I'+String(id(.));
		attribute<String> PrevStateName := MakeDefined(Iteration/Name[id(Iteration)-1]+'/NextState', 'RestWarmteStartingState');
	}
	
	container Iterations := for_each_ne(Iteration/Name, 'IteratieTempl('+Iteration/PrevStateName+')');

	container LastIter  := ='Iterations/'+last(Iteration/Name);
	container LastState := LastIter/NextState;

	attribute<MW>       P_Bron (Bronnen) := sum(KostenBaten/CapaciteitsVraagD * float64(LastState/GebruikRestWarmte) , LastState/CurrBron);
	attribute<float64>  R_Bron (Bronnen) := P_Bron / Bronnen/MWTh_Max;

	attribute<Bool> GebruikBron(Bronnen) := P_Bron >= Bronnen/MWth_min;

	attribute<Bool> RentabiliteitsAfweging(PlanRegio) :=
		GebruikBron[LastState/CurrBron] && LastState/GebruikRestWarmte
	,	IntegrityCheck = "not(any(LastIter/ExtraGebruikRestWarmte))"; // @@@ Increase NrIterations is this fails.
	
	attribute<Bool> OldGebruik           (PlanRegio) := IsDefined(BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie); // een optie (deze of andere) was al in gebruik
	attribute<Bool> GebruiktOptie        (PlanRegio) := BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/Restwarmte;   // deze optie was al in gebruik;
	attribute<Bool> NewGebruik           (PlanRegio) := RentabiliteitsAfweging && not(OldGebruik);
	attribute<Bool> GebruikOptieAfweging (PlanRegio) := NewGebruik || GebruiktOptie;
	attribute<Bool> GebruikOptie         (PlanRegio) := 
		=Voorkeuren/OldRestwarmte
			?	'GebruiktOptie'
			:	(Jaar == 2010[units/yr_uint16])
				?	'bool(PlanRegio/RW)' 
				:	'GebruikOptieAfweging'
		;

	attribute<Eur   > Oi_Totaal          (PlanRegio) := KostenBaten/Oi_Aansluitbijdrage;
	attribute<KG_GJ>  CO2_GJb            (PlanRegio) := Bronnen/CO2_GJ[LastIter/NextState/CurrBron];
	attribute<G_GJ>   NOx_GJb            (PlanRegio) := Bronnen/NOx_GJ[LastIter/NextState/CurrBron];
	attribute<G_GJ>   SO2_GJb            (PlanRegio) := Bronnen/SO2_GJ[LastIter/NextState/CurrBron];
	attribute<G_GJ>   VOS_GJb            (PlanRegio) := Bronnen/VOS_GJ[LastIter/NextState/CurrBron];
	attribute<G_GJ>   TS_GJb             (PlanRegio) := Bronnen/TS_GJ [LastIter/NextState/CurrBron];
	attribute<KG_yr>  CO2_Primair        (PlanRegio) := KostenBaten/Vj_WarmtePrimairD * MakeDefined(CO2_GJb, 0[KG_GJ]);
	attribute<KG_yr>  CO2                (PlanRegio) := KostenBaten/CO2_BijstookD + CO2_Primair;
	attribute<Eur_yr> Ke_Totaal          (PlanRegio) := const(0[Eur_yr], PlanRegio);
	attribute<GJ_yr>  GJe_Totaal         (PlanRegio) := const(0[GJ_yr], PlanRegio);
	attribute<KG_yr>  CO2_e              (PlanRegio) := const(0[KG_yr], PlanRegio);

	container Results := BeginStatus, IntegrityCheck = "P_Bron <= Bronnen/MWTh_Max * float64(3.00)"
	{
		container Factoren {
			parameter<float64> Aardgas_factor       := 0.0; // TODO
			parameter<float64> Biogas_factor        := 0.0; // TODO
			parameter<float64> Biovast_factor       := 0.0; // TODO
			parameter<float64> Ondergrond_factor    := 0.0;
			parameter<float64> Opwekking_Factor     := 1.0;
			parameter<float64> Elektriciteit_factor := 0.0; // TODO
		}

		container Flow := BeginStatus/Flow {
			attribute<Eur_yr> Kj_ow_verbruik  (PlanRegio) := BeginStatus/Flow/Kj_ow_verbruik  + iif(GebruikOptie, lastiter/Assignment/Kj_warmtewaarde, 0[Eur_yr]);
			attribute<Eur_yr> Km_ow_verbruik  (PlanRegio) := BeginStatus/Flow/Km_ow_verbruik  + iif(GebruikOptie, lastiter/Assignment/Km_warmtewaarde, 0[Eur_yr]);
			attribute<Eur_yr> Kj_ow_onderhoud (PlanRegio) := BeginStatus/Flow/Kj_ow_onderhoud + iif(GebruikOptie, lastiter/Assignment/Kj_ow_onderhoud, 0[Eur_yr]);
			attribute<Eur_yr> Kj_ow_admin     (PlanRegio) := BeginStatus/Flow/Kj_ow_admin     + iif(GebruikOptie, lastiter/Assignment/Kj_ow_admin    , 0[Eur_yr]);

			attribute<Eur_yr> Kj_pt_onderhoud (PlanRegio) := BeginStatus/Flow/Kj_pt_onderhoud + iif(GebruikOptie, lastiter/Assignment/Kj_pt_onderhoud, 0[Eur_yr]);
			attribute<Eur_yr> Kj_pt_admin     (PlanRegio) := BeginStatus/Flow/Kj_pt_admin     + iif(GebruikOptie, lastiter/Assignment/Kj_pt_admin    , 0[Eur_yr]);
			attribute<Eur_yr> Kj_pt_precario  (PlanRegio) := BeginStatus/Flow/Kj_pt_precario  + iif(GebruikOptie, lastiter/Assignment/Kj_pt_precario , 0[Eur_yr]);
			attribute<Eur_yr> Oj_SDE          (PlanRegio) := BeginStatus/Flow/Oj_SDE          + iif(GebruikOptie, lastiter/Assignment/Oj_SDE         , 0[Eur_yr]);
		}

		container Stock := BeginStatus/Stock
		{
			attribute<Eur> Ki_ow          (PlanRegio) := BeginStatus/Stock/Ki_ow          + iif(NewGebruik, lastiter/Assignment/ki_ow, 0[Eur]);
			attribute<Eur> Oi_ow_subsidie (PlanRegio) := BeginStatus/Stock/Oi_ow_subsidie + iif(NewGebruik, MakeDefined(lastiter/Assignment/ki_ow * SpecifiekeInstellingen/BeleidsOpties/EIA/ow[Bronnen/TypeInfoList_rel[lastState/CurrBron]], 0[Eur]), 0[Eur]);
			attribute<Eur> Oe_ow_subsidie (PlanRegio) := BeginStatus/Stock/Oe_ow_subsidie + iif(NewGebruik, 
				(Ki_ow - Oi_ow_subsidie) * MakeDefined(SpecifiekeInstellingen/BeleidsOpties/EEA/ow[Bronnen/TypeInfoList_rel[lastState/CurrBron]], 0.0), 0[Eur]);

			attribute<Eur> Ki_pt          (PlanRegio) := BeginStatus/Stock/Ki_pt          + iif(NewGebruik, lastiter/Assignment/ki_pt, 0[Eur]);
			attribute<Eur> Oi_pt_subsidie (PlanRegio) := BeginStatus/Stock/Oi_pt_subsidie + iif(NewGebruik, lastiter/Assignment/ki_pt * SpecifiekeInstellingen/BeleidsOpties/EIA/pt, 0[Eur]);
		}

		container AanbodOpties := BeginStatus/AanbodOpties
		{
			attribute<bool> GebruikRestWarmteMetBron (PlanRegio) := GebruikOptie;
			
			container RestWarmte: FreeData = "False"
			{
				attribute<bool> GebruikRestWarmte      (PlanRegio) := GebruikRestWarmteMetBron;
				attribute<bool> ExtraGebruikRestWarmte (PlanRegio) := GebruikOptie && !RestWarmteStartingState/GebruikRestWarmte;

				unit<uint32> StartArcSet         := RestWarmteStartingState/CumulatedArcSet;
				unit<uint32> LastCumulatedArcSet := LastState/CumulatedArcSet;
				unit<uint32> ExtraArcSet := SubSet(ExtraGebruikRestWarmte)
				{
					attribute<PlanRegio>           PlanRegio_rel           := nr_OrgEntity;
					attribute<LastCumulatedArcSet> LastCumulatedArcSet_rel := rlookup(PlanRegio_rel, LastCumulatedArcSet/PlanRegio_rel);
				}
				unit<uint32> CumulatedArcSet := union_unit(StartArcSet, ExtraArcSet), StorageName = "=OutputFolder+'/RestWarmte.dbf'", DialogType = "Map", DialogData = "CumulatedArcs"
				{
					attribute<rdc_meter> BronPoint     := union_data(., StartArcSet/BronPoint, LastCumulatedArcSet/BronPoint[ExtraArcSet/LastCumulatedArcSet_rel]), DisableStorage = "True";
					attribute<float64>   BronPointX    := MakeDefined(PointCol(BronPoint), 280000.0 / 2.0);
					attribute<float64>   BronPointY    := MakeDefined(PointRow(BronPoint), (300000.0 + 325000.0) / 2.0);
					attribute<PlanRegio> PlanRegio_rel := union_data(., StartArcSet/PlanRegio_rel, ExtraArcSet/PlanRegio_rel);

					parameter<bool> HasArcs := true, DisableStorage = "True";
				}

				attribute<rdc_meter> CumulatedArcs (CumulatedArcSet, arc) := union_data(CumulatedArcSet, RestWarmteStartingState/CumulatedArcs, LastState/CumulatedArcs[ExtraArcSet/LastCumulatedArcSet_rel])
				{
					parameter<uint32> PenColor := rgb(0,0,0), DialogType = "PenColor";
					parameter<int16>  PenWidth := 2s        , DialogType = "PenWidth";
				}
			}
			attribute<bool>                        WasAllocated             (PlanRegio) := BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie == Classifications/AanbodOptie/V/RestWarmte;
			attribute<bool>                        Alloc_OK                 (PlanRegio) := GebruikRestWarmteMetBron || !WasAllocated; // it never stops.
			attribute<Classifications/AanbodOptie> PlanRegioWarmteAllocatie (PlanRegio) := 
				GebruikRestWarmteMetBron
				?	Classifications/AanbodOptie/V/RestWarmte
				:	BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie
			,	IntegrityCheck = "Alloc_OK";
		}
	}
}
