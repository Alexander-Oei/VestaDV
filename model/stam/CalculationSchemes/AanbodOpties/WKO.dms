//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template WKO
{
	// begin case parameters
	container BeginStatus;
	container AanbodKentallen;
	container EnergiePrijzen;
	parameter<units/yr_uint16> RunJaar;
	// end case parameters

	container KostenBaten           := BeginStatus/KostenBaten;
	container BebouwingsComponenten := KostenBaten/BebouwingsComponenten;

	unit<uint8>  WkoComponent       := Classifications/WkoComponent;
	unit<uint32> PlanRegio          := Invoer/SpecifiekeInstellingen/PlanRegio;
	unit<uint8>  Prijzen_elec       := Prijzen/Elektriciteit/Staffel;

	container constanten {
	
		parameter<bool> KoudeBeschikbaar := true; // centraal opgewekte koude is beschikbaar (en moet worden afgenomen) bij WKO.
		
		//Seasonal Performance Factor
		parameter<Ratio>   SPF_ind_k := 1.0; // Wordt niet gebruikt; bij WKO is AEO_ind_k toch 0
		parameter<Ratio>   SPF_coll_w: [3.5]; // @@@ LET OP: Bij LT15_50 nemen we aan: COP = 4.2, dd 28/03/2019 
		parameter<Ratio>   SPF_coll_k := SPF_coll_w - 1.0;
		parameter<Celsius> T_sec:   [50];
		
		parameter<Float64> SPF_ind_A_rv  := SPF_coll_w; // irrelevant, AEO is toch 0
		parameter<Float64> SPF_ind_B_rv  := SPF_coll_w; // TODO: CHECK, relevant indien T_sec <= 35[Celsius]
		parameter<Float64> SPF_ind_CE_rv := SPF_coll_w; // TODO: CHECK
		parameter<Float64> SPF_ind_ww    := SPF_coll_w; // TODO: CHECK

		//Aandeel eigen opwekking
		parameter<Float64> AEO_ind_A_rv  := 0.0;
		parameter<Float64> AEO_ind_B_rv  := T_sec <= 35[Celsius] ? 0.3 : 0.0;
		parameter<Float64> AEO_ind_CE_rv := T_sec <= 35[Celsius] ? 0.6 : T_sec <= 55[Celsius] ? 0.3 : 0.0;
		
		parameter<Float64> AEO_ind_ww := T_sec <= 35[Celsius] ? 0.5 : T_sec <= 55[Celsius] ? 0.2 : 0.0;
		parameter<Float64> AEO_ind_k  : [0.0], Descr = "Aandeel eigen opwekking koude, relevant indien koude geleverd kan worden, TODO: Checken; vooralsnog op 0 wegens vooralsnog alleen centrale koude bij WKO";
		parameter<Ratio> 		Leidingverlies		: [0.20],										Descr = "aandeel op volume dat verloren gaat tussen bron en afnemer";

		//gelijktijdigheidsfactoren
		parameter<float64>		GTF_woning_w		:=						0.50, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag warmte woningen";
		parameter<float64>		GTF_woning_k		:=						0.50, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag koude woningen";
		parameter<float64>		GTF_util_w			:=						0.95, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag warmte utiliteit";
		parameter<float64>		GTF_util_k			:=						0.95, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag koude utiliteit";
		
		//aansluitwaardes
		parameter<float64> 		ASW_wc 				:= 						6		[kW_Woning], 	Descr = "aansluitwaarde warmte eengezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_kc 				:= 						2		[kW_Woning], 	Descr = "aansluitwaarde koude eengezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_wa 				:= 						5		[kW_Woning], 	Descr = "aansluitwaarde warmte meergezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_ka 				:= 						2		[kW_Woning], 	Descr = "aansluitwaarde koude meergezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_wu 				:= 						0.05	[kW_m2], 		Descr = "aansluitwaarde warmte utiliteit per m2 (gevraagde capaciteit)";
		parameter<float64> 		ASW_ku 				:= 						0.06	[kW_m2], 		Descr = "aansluitwaarde koude utiliteit per m2 (gevraagde capaciteit)";
		
		//investeringskosten technische componenten
		parameter<Eur_Woning> 	Ki_inpandig 		:= Leercurves/Curve2 * 	2000	[Eur_Woning], 	Descr = "Investeringskosten extra inpandige buizen (alleen bij meergezinswoningen)";
		parameter<Eur_Woning> 	Ki_afleverset 		:= Leercurves/Curve2 * 	2000	[Eur_Woning], 	Descr = "Investeringskosten afleverset (warmtewisselaar + meter)";
		parameter<EUR> 			Ki_booster 			:= Leercurves/Curve2 * 	2000	[EUR], 			Descr = "Investeringskosten booster-warmtepomp voor warm tapwater";
		parameter<Eur_kW>		Ki_Doublet			:= Leercurves/Curve2 * 	1133	[Eur_kW], 		Descr = "bron zonder distributiekosten";
		parameter<Eur_m2>		Ki_distr			:= Leercurves/Curve2 * 	6000	[Eur_Woning] * 187[NrWoningen] / 15741[m2] , Descr = "Distributiekosten per proxy-m2 obv proxy-area voorbeeldproject in Zutphen, zie %projdir%/data/adres_Zutphen.ods";

		parameter<Eur_m2> 		Ki_id_ugroot     	:= Leercurves/Curve2 * 	0		[Eur_m2],		Descr = "Investeringskosten extra inpandige buizen bij utiliteit groter dan 7500 m2";
		parameter<Eur_m2> 		Ki_id_uklein     	:= Leercurves/Curve2 * 	20		[Eur_m2],		Descr = "Investeringskosten extra inpandige buizen bij utiliteit kleiner dan 100 m2";
		
		//		parameter<Eur_Woning> K_wvwc := Leercurves/Curve2 * 2000[Eur_Woning], Descr = "kosten warmtevoorziening collectieve woning (warmte en koude) Notitie Issue 442";
//		parameter<Eur_Woning> K_wvwa := Leercurves/Curve2 * 4000[Eur_Woning], Descr = "kosten warmtevoorziening appartement        (warmte en koude) Notitie Issue 442, issue 503.";
	}
	parameter<Celsius> T_sec := constanten/T_sec;
	
	container BestaandeWoningData :=
		WKOWoningData(
			BebouwingsComponenten/BestaandeWoning, 
			BeginStatus/KostenBaten/PlanRegioKaarten/BestaandeWoning/WarmtePrijs, 
			BebouwingsComponenten/BestaandeWoning/BebouwingsTypeDomein,
			BeginStatus/KostenBaten/KostenD/Wonen/bw,
			constanten/KoudeBeschikbaar
		);

	container NieuwbouwWoningData :=
		WKOWoningData(
			BebouwingsComponenten/NieuwbouwWoning, 
			BeginStatus/KostenBaten/PlanRegioKaarten/NieuwbouwWoning/WarmtePrijs, 
			BebouwingsComponenten/NieuwbouwWoning/BebouwingsTypeDomein,
			BeginStatus/KostenBaten/KostenD/Wonen/nw,
			constanten/KoudeBeschikbaar
		);

	container BestaandeUtilData :=
		WKOUtilData(
			BebouwingsComponenten/BestaandeUtil, 
			BeginStatus/KostenBaten/PlanRegioKaarten/BestaandeUtil/WarmtePrijs,
			constanten/KoudeBeschikbaar
		);
	
	container NieuwbouwUtilData :=
		WKOUtilData(
			BebouwingsComponenten/NieuwbouwUtil, 
			BeginStatus/KostenBaten/PlanRegioKaarten/NieuwbouwUtil/WarmtePrijs,
			constanten/KoudeBeschikbaar
		);
	

	container CandidateSets := for_each_ne(WkoComponent/Name, 'WKOData('+WkoComponent/Name+'Data, '+Quote(WkoComponent/Name)+', constanten/T_sec)');

	unit <uint32> UnitedCandidates := ='union_unit('+AsItemList('CandidateSets/'+WkoComponent/Name+'/AllowedObjects')+')'
	,	DialogType = "Map"
	,	DialogData = "Point"
	{
		attribute<string>    Label        := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/AllowedObjects/Label') + ')', DialogType = "LabelText";
		attribute<.>         Partitioning := id(.);
		attribute<rdc_meter> Point        := Point(MEAN_Y, MEAN_X, rdc_meter);

		attribute<Eur_yr>    Oj_verbruik  := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Oj_verbruik[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<Eur_yr>    AC_Netto     := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/AC_Netto  [CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<kW    >    P_Warmte     := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/WkoDataComponent/P_Warmte[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<kW    >    P_Koude      := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/WkoDataComponent/P_Koude [CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';

		attribute<float64>   n            := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/n     [CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   MEAN_x       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/MEAN_x[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   MEAN_y       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/MEAN_y[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   SSD_xx       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/SSD_xx[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   SSD_xy       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/SSD_xy[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   SSD_yy       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/SSD_yy[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
	}

	parameter<uint32> NrIterations: [ 25 ];
	unit<uint32> Iteration := Range(uint32, 0, NrIterations) 
	{
		attribute<string> Name := 'I'+string(id(.));
		attribute<string> Prev := MakeDefined(Name[id(.)-1] + '/SelectedClusters', 'UnitedCandidates');
		
		attribute<.> NrSelectedObjects          := ='union_data(Iteration, '+AsItemList('#Iterations/'+Iteration/Name+'/Selected')+')';
		attribute<.> CumulNrPrevSelectedObjects := #(BeginStatus/AanbodOpties/WkoCluster) + cumulate(NrSelectedObjects) - NrSelectedObjects;
	}

	container Iterations := for_each_ne(Iteration/Name, 'WKOIter(' + Iteration/Prev + ', UnitedCandidates)');
	container IterationTest := WKOIter(UnitedCandidates,UnitedCandidates);
	
	// decouple the cluster to the individual object level to support reporting of the allocation result
	unit<uint32> Selected := ='union_unit('+asItemList('Iterations/'+Iteration/Name+'/Selected')+')', DialogType = "Map", DialogData = "Point"
	{

		attribute<rdc_meter> point := ='union_data(., '+asItemList('Iterations/'+Iteration/Name+'/Selected/point')+')';
		attribute<string>    Label := ='union_data(., '+asItemList('Iterations/'+Iteration/Name+'/Selected/Label')+')';
		attribute<Eur>       Ki_A  := ='union_data(., '+AsItemList('Iterations/'+Iteration/Name+'/Selected/Ki_A')+')';
		attribute<Eur>       Ki_B  := ='union_data(., '+AsItemList('Iterations/'+Iteration/Name+'/Selected/Ki_B')+')';
		attribute<.>         Partitioning (UnitedCandidates) := ='value(MakeDefined('+asItemList('Iterations/'+Iteration/Name+'/Selected/Partitioning+Iteration/CumulNrPrevSelectedObjects['+string(id(Iteration))+']')+'),.)';
	}

	attribute<uint32> NrAllowedObjects          (WkoComponent) := ='union_data(WkoComponent, '+AsItemList('#CandidateSets/'+WkoComponent/Name+'/AllowedObjects')+')';
	attribute<uint32> NrAllObjects              (WkoComponent) := ='union_data(WkoComponent, '+AsItemList('#CandidateSets/'+WkoComponent/Name+'/BebouwingsObject')+')';
	attribute<uint32> CumulNrPrevAllowedObjects (WkoComponent) := cumulate(NrAllowedObjects)-NrAllowedObjects;
	attribute<uint32> CumulNrPrevAllObjects     (WkoComponent) := cumulate(NrAllObjects)-NrAllObjects;

	container ObjectResults :=
		for_each_ne(WkoComponent/Name, 
			'WkoResults('
				'UnitedCandidates, Selected, CandidateSets/'+WkoComponent/Name+','
				'CumulNrPrevAllowedObjects['+string(id(WkoComponent))+'[WkoComponent]],'
				'CumulNrPrevAllObjects['+string(id(WkoComponent))+'[WkoComponent]]'
			')'
		);

	unit<uint32> AllObjects := ='union_unit('+AsItemList('ObjectResults/'+WkoComponent/Name+'/BebouwingsObject')+')'
	{
		attribute<string>   Label       := ='union_data(., ' + asItemList('BebouwingsComponenten/' + WkoComponent/Name + '/BebouwingsObject/Label') + ')', DialogType = "LabelText";
		attribute<Selected> Cluster_rel := ='union_data(., ' + AsItemList('ObjectResults/'+WkoComponent/Name+'/Cluster_rel')+')';
		attribute<Eur>      Ki_C        := ='union_data(., ' + AsItemList('ObjectResults/'+WkoComponent/Name+'/WkoData/Ki_C')+')';
		attribute<Eur>      Ki_A_Part   := scalesum(max_elem(Ki_C, 1[Eur]), Cluster_rel, Selected/Ki_A);
		attribute<Eur>      Ki_B_Part   := scalesum(max_elem(Ki_C, 1[Eur]), Cluster_rel, Selected/Ki_B);
	}

	container Results := BeginStatus
	{
		container Bebouwing :=
			for_each_ne(Classifications/BebouwingsComponent/Name
				, Classifications/BebouwingsComponent/KanWKO 
					? 'ObjectResults/'+Classifications/BebouwingsComponent/Name+'/Result' 
					: 'BeginStatus/Bebouwing/'+Classifications/BebouwingsComponent/Name
			);
			
		container AanbodOpties : = BeginStatus/AanbodOpties
		{
			unit<uint32> WkoCluster := Selected;
		}

		container Stock := BeginStatus/Stock;
		container Flow  := BeginStatus/Flow;

		container Wko
		{
			// accumulated capital
			container Oi_Aansl := for_each_nedv(WkoComponent/Name, replace('BeginStatus/Wko/Oi_Aansl/@W@ + ObjectResults/@W@/PR/Oi_Aansl', '@W@', WkoComponent/Name), PlanRegio, Eur);

			// recalculated stock
			attribute<Eur>    Ki_id       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Ki_id')+')';
			attribute<Eur>    Ki_ge_pm    (PlanRegio) := ObjectResults/BestaandeWoning/PR/Ki_ge_pm;
			attribute<Eur>    Ki_ge_ov    (PlanRegio) := ObjectResults/BestaandeWoning/PR/Ki_ge_ov;

			// recalculated Flow
			container Oj_Verbruik := for_each_nedv(WkoComponent/Name, replace('ObjectResults/@W@/PR/Oj_Verbruik', '@W@', WkoComponent/Name), PlanRegio, Eur_yr);
			container Om_comfort  := for_each_nedv(WkoComponent/Name, replace('ObjectResults/@W@/PR/Om_comfort' , '@W@', WkoComponent/Name), PlanRegio, Eur_yr);

			attribute<Eur_yr> Kj_wd_pr    (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_wd_pr')+')';
			attribute<Eur_yr> Km_ow_e     (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Km_ow_e')+')';
			attribute<Eur_yr> Kj_ow_e     (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_ow_e')+')';
			attribute<Eur_yr> Kj_ow_o     (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_ow_o')+')';
//			attribute<Eur_yr> Oj_verbruik (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oj_verbruik')+')';
//			attribute<Eur_yr> Om_comfort  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Om_comfort')+')';
			attribute<Eur_yr> KEH_ow_e    (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/KEH_ow_e')+')';
			attribute<Eur_yr> Kj_ge       (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_ge')+')';

			// accumulated stock
			attribute<Eur>    Ki_ow       (PlanRegio) := ='BeginStatus/Wko/Ki_ow + add('+AsItemList('ObjectResults/'+WkoComponent/Name+'/PR/Ki_ow')+')';
			attribute<Eur>    Ki_wd       (PlanRegio) := ='BeginStatus/Wko/Ki_wd + add('+AsItemList('ObjectResults/'+WkoComponent/Name+'/PR/Ki_wd')+')';
//			attribute<Eur_yr> Kj_ge_hv    (PlanRegio) := BeginStatus/Wko/Kj_ge_hv + ObjectResults/Woning/PR/Kj_ge_hv;
//			attribute<Eur>    Oi_Aansl    (PlanRegio) := ='add('+AsItemList('ObjectResults/'+WkoComponent/Name+'/PR/Oi_Aansl')+')';

			attribute<Eur_yr> Kj_ge_Bruto (PlanRegio) :=                     Ki_ge * NCW/bw28/AnnualisationFactor;
			attribute<Eur_yr> Kj_id_Bruto (PlanRegio) :=                     Ki_id * NCW/id28/AnnualisationFactor;
			attribute<Eur_yr> Kj_wd_Bruto (PlanRegio) := Kj_wd_pr          + Ki_wd * NCW/wd28/AnnualisationFactor;
			attribute<Eur_yr> Kj_ow_Bruto (PlanRegio) := Kj_ow_o + Kj_ow_e + Ki_ow * NCW/ow28/AnnualisationFactor;

			attribute<Eur>    Ki_ge       (PlanRegio) := Ki_ge_pm + Ki_ge_ov;
			attribute<Eur>    Ki_Totaal   (PlanRegio) := Ki_ow + Ki_wd + Ki_id + Ki_ge;

			attribute<Eur_yr> Km_Totaal   (PlanRegio) := Km_ow_e + Kj_ow_o;

			attribute<Eur>    Si_ow       (PlanRegio) := Ki_ow * SpecifiekeInstellingen/Beleid/EIA/wko;
			attribute<Eur>    Si_wd       (PlanRegio) := Ki_wd * SpecifiekeInstellingen/Beleid/EIA/wd;
			attribute<Eur>    Si_id       (PlanRegio) := Ki_id * SpecifiekeInstellingen/Beleid/EIA/id;
			attribute<Eur>    Si_ge       (PlanRegio) := Ki_ge_pm * SpecifiekeInstellingen/Beleid/EIA/E_bw/Rs_ProjectManagement + Ki_ge_ov * SpecifiekeInstellingen/Beleid/EIA/E_bw/Rs_OngeriefsVergoeding;
			attribute<Eur>    Si_T        (PlanRegio) := Si_ow + Si_wd + Si_id + Si_ge;

			attribute<Eur>    Ki_ow_Netto (PlanRegio) := Ki_ow - Si_ow;
			attribute<Eur>    Ki_wd_Netto (PlanRegio) := Ki_wd - Si_wd;
			attribute<Eur>    Ki_id_Netto (PlanRegio) := Ki_id - Si_id;
			attribute<Eur>    Ki_ge_Netto (PlanRegio) := Ki_ge - Si_ge;

			attribute<Eur_yr> Sj          (PlanRegio) := Si_ow * NCW/ow28/AnnualisationFactor + Si_wd * NCW/wd28/AnnualisationFactor + Si_id * NCW/id28/AnnualisationFactor + Si_ge * NCW/bw28/AnnualisationFactor;
			attribute<Eur_yr> Sm          (PlanRegio) := Si_T * NCW/mr28/AnnualisationFactor;

			attribute<Eur_yr> SDE         (PlanRegio) := GJw_Totaal * SpecifiekeInstellingen/Beleid/EEA/SDE_WKO;
			attribute<Eur_yr> Se_ow       (PlanRegio) := Ki_ow_Netto * NCW/ow28/AnnualisationFactor * SpecifiekeInstellingen/Beleid/EEA/wko + SDE;
			attribute<Eur_yr> Se_wd       (PlanRegio) := Ki_wd_Netto * NCW/wd28/AnnualisationFactor * SpecifiekeInstellingen/Beleid/EEA/wd;
			attribute<Eur_yr> Se_id       (PlanRegio) := Ki_id_Netto * NCW/id28/AnnualisationFactor * SpecifiekeInstellingen/Beleid/EEA/id;
			attribute<Eur_yr> Se_ge       (PlanRegio) := Ki_ge_Netto * NCW/bw28/AnnualisationFactor * SpecifiekeInstellingen/Beleid/EEA/ge;
			attribute<Eur_yr> Se          (PlanRegio) := Sj + Se_ow + Se_wd + Se_id + Se_ge;
			attribute<Eur_yr> Sme         (PlanRegio) := Sm + Se_ow + Se_wd + Se_id + Se_ge;

			attribute<Eur_yr> Kj_ge_netto (PlanRegio) := Ki_ge_Netto * NCW/bw28/AnnualisationFactor - Se_ge;
			attribute<Eur_yr> Kj_id_netto (PlanRegio) := Ki_id_Netto * NCW/id28/AnnualisationFactor - Se_id;
			attribute<Eur_yr> Kj_wd_netto (PlanRegio) := Kj_wd_pr + Ki_wd_Netto * NCW/wd28/AnnualisationFactor - Se_wd;
			attribute<Eur_yr> Kj_ow_netto (PlanRegio) := Kj_ow_o + Kj_ow_e + Ki_ow_Netto * NCW/ow28/AnnualisationFactor - Se_ow;
			attribute<Eur_yr> Kj_netto    (PlanRegio) := Kj_ge_netto + Kj_id_netto + Kj_wd_netto + Kj_ow_netto;
			attribute<Eur   > Oi_AanslT   (PlanRegio) := ='add('+AsItemList('Oi_Aansl/'+WkoComponent/Name)+')';
			attribute<Eur_yr> Oj_VerbrT   (PlanRegio) := ='add('+AsItemList('Oj_Verbruik/'+WkoComponent/Name)+')';
			attribute<Eur_yr> Oj_totaal   (PlanRegio) := Oj_VerbrT + Oi_AanslT * (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);

			// CO2: geen bijstook nodig, want verwarming per eWP met LTAS; wel CO2 voor elektriciteit voor collectieve warmtepomp
			attribute<Eur_yr> KCO2_ow_e   (PlanRegio) := ='add('+AsItemList('ObjectResults/'+WkoComponent/Name+'/PR/KCO2_ow_e')+')';
			attribute<KG_yr>  CO2         (PlanRegio) := GJe_Totaal * prijzen/Elektriciteit/CO2_GJ;

			attribute<GJ_yr>  GJe_Totaal  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/GJe')+')';
			attribute<GJ_yr>  GJw_Totaal  (PlanRegio) := ='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/GJw')+')';
		}
		container KostenBaten := CalculationSchemes/KostenBaten(Bebouwing, Energieprijzen, RunJaar);
	}
}
