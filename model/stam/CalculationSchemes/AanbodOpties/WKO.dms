//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template WKO
{
	// begin case parameters
	container BeginStatus;
	container AanbodKentallen;
	container EnergiePrijzen;
	parameter<units/yr_uint16> ZichtJaar;
	// end case parameters
	
	container BebouwingsComponenten := BeginStatus/Bebouwing;
	container KostenBaten := CalculationSchemes/KostenBaten(BebouwingsComponenten, Energieprijzen);

	unit<uint8>  WkoComponent       := Classifications/WkoComponent;
	unit<uint32> PlanRegio          := Invoer/SpecifiekeInstellingen/PlanRegio;
	unit<uint8>  Prijzen_elec       := Prijzen/Elektriciteit/Staffel;

	container constanten {
	
		parameter<bool> KoudeBeschikbaar := true; // centraal opgewekte koude is beschikbaar (en moet worden afgenomen) bij WKO.
		
		//Aandelen primair en hulp in het secundaire net
		parameter<Float64> 		AandeelPrimairVermogen 		:= 				0.30, 					Descr = "Aandeel van het gevraagde vermogen dat door de primaire bron wordt geleverd";
		parameter<Float64> 		AandeelHulpVermogen 		:= 				1.00, 					Descr = "Aandeel van het gevraagde vermogen dat door de hulpvoorziening wordt geleverd";
		parameter<Float64> 		AandeelPrimairVolume   		:= 				0.70, 					Descr = "Aandeel van het gevraagde volume dat door de primaire bron wordt geleverd";
		parameter<Float64> 		AandeelHulpVolume 			:= 				0.30, 					Descr = "Aandeel van het gevraagde volume dat door de hulpvoorziening wordt geleverd";
		
		//Seasonal Performance Factor
		parameter<Ratio>   SPF_ind_k := 1.0; // Wordt niet gebruikt; bij WKO is AEO_ind_k toch 0
		parameter<Ratio>   SPF_coll_w: [3.5]; // @@@ LET OP: Bij LT15_50 nemen we aan: COP = 4.2, dd 28/03/2019 
		parameter<Ratio>   SPF_coll_k := SPF_coll_w - 1.0;
		
		parameter<Celsius> T_ow:   [20];
		parameter<Celsius> T_sec:   [50];
		parameter<bool> CollectieveWP := (T_ow < T_sec);
		
		parameter<Float64> SPF_ind_A_rv  := SPF_coll_w; // irrelevant, AEO is toch 0
		parameter<Float64> SPF_ind_B_rv  := SPF_coll_w; // TODO: CHECK, relevant indien T_sec <= 35[Celsius]
		parameter<Float64> SPF_ind_CE_rv := SPF_coll_w; // TODO: CHECK
		parameter<Float64> SPF_ind_ww    := SPF_coll_w; // TODO: CHECK

		//Aandeel eigen opwekking
		parameter<Float64> 		AEO_ind_A_rv		:= T_sec <= 55[Celsius] ? 0.1 : 0.0,				Descr = "Aandeel eigen opwekking, ruimteverwarming, label A+";
		parameter<Float64> 		AEO_ind_B_rv  := T_sec <= 35[Celsius] ? 0.3 : 0.0;
		parameter<Float64> 		AEO_ind_CE_rv := T_sec <= 35[Celsius] ? 0.6 : T_sec <= 55[Celsius] ? 0.3 : 0.0;
		
		parameter<Float64> 		AEO_ind_ww := T_sec <= 35[Celsius] ? 0.5 : T_sec <= 55[Celsius] ? 0.2 : 0.0;
		parameter<Float64> 		AEO_ind_k  : [0.0], Descr = "Aandeel eigen opwekking koude, relevant indien koude geleverd kan worden, TODO: Checken; vooralsnog op 0 wegens vooralsnog alleen centrale koude bij WKO";
		parameter<Ratio> 		Leidingverlies		: [0.20],										Descr = "aandeel op volume dat verloren gaat tussen bron en afnemer";
		parameter<Ratio> 		Vermogenverlies		: [0.05],										Descr = "aandeel op capaciteit dat verloren gaat tussen bron en afnemer";
		parameter<Ratio>		Pompenergie			: [0.009],										Descr = "elektriciteitsverbruik distributiepompen";

		//gelijktijdigheidsfactoren
		parameter<float64>		GTF_woning_w		:=						0.50, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag warmte woningen";
		parameter<float64>		GTF_woning_k		:=						0.50, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag koude woningen";
		parameter<float64>		GTF_util_w			:=						0.95, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag warmte utiliteit";
		parameter<float64>		GTF_util_k			:=						0.95, 					Descr = "Gelijktijdigheidsfactor capaciteitsvraag koude utiliteit";
		
		//aansluitwaardes
		parameter<float64> 		ASW_wc 				:= 						6		[kW_Woning], 	Descr = "aansluitwaarde warmte eengezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_kc 				:= 						2		[kW_Woning], 	Descr = "aansluitwaarde koude eengezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_wa 				:= 						5		[kW_Woning], 	Descr = "aansluitwaarde warmte meergezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_ka 				:= 						2		[kW_Woning], 	Descr = "aansluitwaarde koude meergezinswoning (gevraagde capaciteit)";
		parameter<float64> 		ASW_wu 				:= 						0.05	[kW_m2], 		Descr = "aansluitwaarde warmte utiliteit per m2 (gevraagde capaciteit)";
		parameter<float64> 		ASW_ku 				:= 						0.06	[kW_m2], 		Descr = "aansluitwaarde koude utiliteit per m2 (gevraagde capaciteit)";
		
		//investeringskosten technische componenten
		parameter<Eur_Woning> 	Ki_inpandig 		:= Leercurves/Curve2 * 	2000	[Eur_Woning], 	Descr = "Investeringskosten extra inpandige buizen (alleen bij meergezinswoningen)";
		parameter<Eur_Woning> 	Ki_afleverset 		:= Leercurves/Curve2 * 	2000	[Eur_Woning], 	Descr = "Investeringskosten afleverset (warmtewisselaar + meter)";
		parameter<EUR> 			Ki_booster 			:= Leercurves/Curve2 * 	3500	[EUR], 			Descr = "Investeringskosten booster-warmtepomp voor warm tapwater, inclusief buffervat , verzwaarde aansluiting, montage en installatie";
		parameter<Eur_kW>		Ki_Doublet			:= Leercurves/Curve2 * 	1133	[Eur_kW], 		Descr = "bron zonder distributiekosten";
		parameter<Eur_m2>		Ki_distr			:= Leercurves/Curve2 * 	6000	[Eur_Woning] * 187[NrWoningen] / 15741[m2] , Descr = "Distributiekosten per proxy-m2 obv proxy-area voorbeeldproject in Zutphen, zie %projdir%/data/adres_Zutphen.ods";
		parameter<EUR_KW> 		Ki_onderstation		:= Leercurves/Curve2 * 	120 	[EUR / KW],		Descr = "Investeringskosten onderstations in wijkdistributie";
		parameter<EUR_KW> 		Ki_eWP_coll			:= Leercurves/Curve2 * 	680 	[EUR / KW],		Descr = "Investeringskosten warmtepomp collectief als hulpvoorziening";
		parameter<Eur_Woning>	Ki_aansl_meergezins	:= Leercurves/Curve2 * 	(5558 	[Eur_Woning] * Schuiven/VerketelingMin) + (2073 [Eur_Woning] * Schuiven/VerketelingMax), Descr = "Investeringskosten aansluitleiding bij meergezinswoningen";
		parameter<Eur_Woning>	Ki_aansl_grondgeb	:= Leercurves/Curve2 * 	10000	[Eur_Woning],	Descr = "Investeringskosten aansluitleiding bij grondgebonden woning";
		parameter<Eur>			Ki_aansl_util		:= Leercurves/Curve2 * 	10000	[Eur],			Descr = "Investeringskosten aansluitleiding bij utiliteitsbouw";
		parameter<Eur_m2> 		Ki_id_ugroot     	:= Leercurves/Curve2 * 	0		[Eur_m2],		Descr = "Investeringskosten extra inpandige buizen bij utiliteit groter dan 7500 m2";
		parameter<Eur_m2> 		Ki_id_uklein     	:= Leercurves/Curve2 * 	20		[Eur_m2],		Descr = "Investeringskosten extra inpandige buizen bij utiliteit kleiner dan 100 m2";
		parameter<Eur_kW>		Ki_eWP_util			:= Leercurves/Curve2 * 	700		[Eur_kW],		Descr = "Investeringskosten elektrische warmtepomp bij utiliteit";
		parameter<Eur>			Ki_eWP_B			:= Leercurves/Curve2 * 	4500	[Eur],			Descr = "Investeringskosten elektrische warmtepomp bij woningen label B, inclusief buffervat , verzwaarde aansluiting, montage en installatie";
		parameter<Eur>			Ki_eWP_CDE			:= Leercurves/Curve2 * 	7000	[Eur],			Descr = "Investeringskosten elektrische warmtepomp bij woningen label C, D of E, inclusief buffervat , verzwaarde aansluiting, montage en installatie";

		// percentage van de initiele investerings welke jaarlijks aan onderhoud en administratiekosten wordt gerekend
		container OenM  {
			Parameter<_yr> 		R_id_onderhoud      := 						0.025 	[_yr], 			Descr = "jaarlijkse onderhoudskosten inpandige distributie als percentage van de initiele investering";
			Parameter<_yr> 		R_id_admin		    := 						0.000 	[_yr], 			Descr = "jaarlijkse administratiekosten inpandige distributie als percentage van de initiele investering";
			Parameter<_yr> 		R_ow_onderhoud	    := 						0.050 	[_yr], 			Descr = "jaarlijkse onderhoudskosten opwekking aan de bron als percentage van de initiele investering";
			Parameter<_yr> 		R_ow_admin		    := 						0.025 	[_yr], 			Descr = "jaarlijkse administratiekosten opwekking aan de bron als percentage van de initiele investering";
			Parameter<_yr> 		R_wd_onderhoud	    := 						0.025 	[_yr], 			Descr = "jaarlijkse onderhoudskosten wijkdistributie als percentage van de initiele investering";
			Parameter<_yr> 		R_wd_admin		    := 						0.025 	[_yr], 			Descr = "jaarlijkse administratiekosten wijkdistributie als percentage van de initiele investering";
			Parameter<_yr> 		R_wpColl_onderhoud	:= 						0.035 	[_yr], 			Descr = "jaarlijkse onderhoudskostencollectieve warmtepomp als percentage van de initiele investering";
			Parameter<_yr> 		R_wpColl_admin		:= 						0.025 	[_yr], 			Descr = "jaarlijkse administratiekosten collectieve warmtepomp als percentage van de initiele investering";
			Parameter<_yr> 		R_buffer_onderhoud	:= 						0.025 	[_yr], 			Descr = "jaarlijkse onderhoudskosten seizoensbuffer als percentage van de initiele investering";
			Parameter<_yr> 		R_buffer_admin		:= 						0.025 	[_yr], 			Descr = "jaarlijkse administratiekosten seizoensbuffer als percentage van de initiele investering";
			}
	}
	parameter<Celsius> T_sec := constanten/T_sec;
	
	container BestaandeWoningData :=
		WKOWoningData(
			BebouwingsComponenten/BestaandeWoning, 
			KostenBaten/PlanRegioKaarten/BestaandeWoning/WarmtePrijs, 
			BebouwingsComponenten/BestaandeWoning/BebouwingsTypeDomein,
			KostenBaten/KostenD/Wonen/bw,
			constanten/KoudeBeschikbaar
		);

	container NieuwbouwWoningData :=
		WKOWoningData(
			BebouwingsComponenten/NieuwbouwWoning, 
			KostenBaten/PlanRegioKaarten/NieuwbouwWoning/WarmtePrijs, 
			BebouwingsComponenten/NieuwbouwWoning/BebouwingsTypeDomein,
			KostenBaten/KostenD/Wonen/nw,
			constanten/KoudeBeschikbaar
		);

	container BestaandeUtilData :=
		WKOUtilData(
			BebouwingsComponenten/BestaandeUtil, 
			KostenBaten/PlanRegioKaarten/BestaandeUtil/WarmtePrijs,
			constanten/KoudeBeschikbaar
		);
	
	container NieuwbouwUtilData :=
		WKOUtilData(
			BebouwingsComponenten/NieuwbouwUtil, 
			KostenBaten/PlanRegioKaarten/NieuwbouwUtil/WarmtePrijs,
			constanten/KoudeBeschikbaar
		);
	

	container CandidateSets := for_each_ne(WkoComponent/Name, 'WKOData('+WkoComponent/Name+'Data, '+Quote(WkoComponent/Name)+', constanten/T_sec)');

	unit <uint32> UnitedCandidates := ='union_unit('+AsItemList('CandidateSets/'+WkoComponent/Name+'/AllowedObjects')+')'
	,	DialogType = "Map"
	,	DialogData = "Point"
	{
		attribute<string>    Label        := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/AllowedObjects/Label') + ')', DialogType = "LabelText";
		attribute<.>         Partitioning := id(.);
		attribute<rdc_meter> Point        := Point(MEAN_Y, MEAN_X, rdc_meter);

		attribute<Eur_yr>    Oj_verbruik  := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Oj_verbruik[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<Eur_yr>    Contributiemarge     := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Contributiemarge  [CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<kW    >    P_Warmte     := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/WkoDataComponent/P_Wsec_netto[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<kW    >    P_Koude      := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/WkoDataComponent/P_Ksec_netto[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';

		attribute<float64>   n            := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/n     [CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   MEAN_x       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/MEAN_x[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   MEAN_y       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/MEAN_y[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   SSD_xx       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/SSD_xx[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   SSD_xy       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/SSD_xy[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
		attribute<float64>   SSD_yy       := ='union_data(., ' + asItemList('CandidateSets/' + WkoComponent/Name + '/Gebied/SSD_yy[CandidateSets/' + WkoComponent/Name + '/AllowedObjects/nr_OrgEntity]') + ')';
	}

	parameter<uint32> NrIterations: [ 25 ];
	unit<uint32> Iteration := Range(uint32, 0, NrIterations) 
	{
		attribute<string> Name := 'I'+string(id(.));
		attribute<string> Prev := MakeDefined(Name[id(.)-1] + '/SelectedClusters', 'UnitedCandidates');
		
		attribute<.> NrSelectedObjects          := ='union_data(Iteration, '+AsItemList('#Iterations/'+Iteration/Name+'/Selected')+')';
		attribute<.> CumulNrPrevSelectedObjects := #(BeginStatus/Wko/Cluster) + cumulate(NrSelectedObjects) - NrSelectedObjects;
	}

	container Iterations := for_each_ne(Iteration/Name, 'WKOIter(' + Iteration/Prev + ', UnitedCandidates)');
	container IterationTest := WKOIter(UnitedCandidates,UnitedCandidates);
	
	// decouple the cluster to the individual object level to support reporting of the allocation result
	unit<uint32> Selected := ='union_unit('+asItemList('Iterations/'+Iteration/Name+'/Selected')+')', DialogType = "Map", DialogData = "Point"
	{

		attribute<rdc_meter> point := ='union_data(., '+asItemList('Iterations/'+Iteration/Name+'/Selected/point')+')';
		attribute<string>    Label := ='union_data(., '+asItemList('Iterations/'+Iteration/Name+'/Selected/Label')+')';
		attribute<Eur>       Ki_ow  := ='union_data(., '+AsItemList('Iterations/'+Iteration/Name+'/Selected/Ki_ow')+')';
		attribute<Eur>       Ki_wd  := ='union_data(., '+AsItemList('Iterations/'+Iteration/Name+'/Selected/Ki_wd')+')';
		attribute<.>         Partitioning (UnitedCandidates) := ='value(MakeDefined('+asItemList('Iterations/'+Iteration/Name+'/Selected/Partitioning+Iteration/CumulNrPrevSelectedObjects['+string(id(Iteration))+']')+'),.)';
	}

	attribute<uint32> NrAllowedObjects          (WkoComponent) := ='union_data(WkoComponent, '+AsItemList('#CandidateSets/'+WkoComponent/Name+'/AllowedObjects')+')';
	attribute<uint32> NrAllObjects              (WkoComponent) := ='union_data(WkoComponent, '+AsItemList('#CandidateSets/'+WkoComponent/Name+'/BebouwingsObject')+')';
	attribute<uint32> CumulNrPrevAllowedObjects (WkoComponent) := cumulate(NrAllowedObjects)-NrAllowedObjects;
	attribute<uint32> CumulNrPrevAllObjects     (WkoComponent) := cumulate(NrAllObjects)-NrAllObjects;

	container ObjectResults :=
		for_each_ne(WkoComponent/Name, 
			'WkoResults('
				'UnitedCandidates, Selected, CandidateSets/'+WkoComponent/Name+',Classifications/WarmteOptie/V/WKO,'
				'CumulNrPrevAllowedObjects['+string(id(WkoComponent))+'[WkoComponent]],'
				'CumulNrPrevAllObjects['+string(id(WkoComponent))+'[WkoComponent]]'
			')'
		);

	unit<uint32> AllObjects := ='union_unit('+AsItemList('ObjectResults/'+WkoComponent/Name+'/BebouwingsObject')+')'
	{
		attribute<string>   Label       := ='union_data(., ' + asItemList('BebouwingsComponenten/' + WkoComponent/Name + '/BebouwingsObject/Label') + ')', DialogType = "LabelText";
		attribute<Selected> Cluster_rel := ='union_data(., ' + AsItemList('ObjectResults/'+WkoComponent/Name+'/Cluster_rel')+')';
		attribute<Eur>      Ki_id        := ='union_data(., ' + AsItemList('ObjectResults/'+WkoComponent/Name+'/WkoData/Ki_id')+')';
		attribute<Eur>      Ki_ow_Part   := scalesum(max_elem(Ki_id, 1[Eur]), Cluster_rel, Selected/Ki_ow);
		attribute<Eur>      Ki_wd_Part   := scalesum(max_elem(Ki_id, 1[Eur]), Cluster_rel, Selected/Ki_wd);
	}

	container Results := BeginStatus
	{
		container Bebouwing :=
			for_each_ne(Classifications/BebouwingsComponent/Name
				, Classifications/BebouwingsComponent/KanWKO 
					? 'ObjectResults/'+Classifications/BebouwingsComponent/Name+'/Result' 
					: 'BeginStatus/Bebouwing/'+Classifications/BebouwingsComponent/Name
			);
			
		container Wko
		{
			unit<uint32> Cluster := Selected;
			container Oi_Aansl		:= for_each_nedv(WkoComponent/Name, replace('BeginStatus/Wko/Oi_Aansl/@W@ + ObjectResults/@W@/PR/Oi_Aansl', '@W@', WkoComponent/Name), PlanRegio, Eur);
			container Oj_Vastrecht	:= for_each_nedv(WkoComponent/Name, replace('ObjectResults/@W@/PR/Oj_Vastrecht', '@W@', WkoComponent/Name), PlanRegio, Eur_yr);
			container Oj_Verbruik	:= for_each_nedv(WkoComponent/Name, replace('ObjectResults/@W@/PR/Oj_Verbruik', '@W@', WkoComponent/Name), PlanRegio, Eur_yr);
			container Om_comfort	:= for_each_nedv(WkoComponent/Name, replace('ObjectResults/@W@/PR/Om_comfort' , '@W@', WkoComponent/Name), PlanRegio, Eur_yr);

			container stock
			{
				attribute<Eur>		Ki_ge_pm		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Ki_ge_pm	')+')';
				attribute<Eur>		Ki_ge_ov		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Ki_ge_ov	')+')';		
				attribute<Eur>		Ki_ow			(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Ki_ow	')+')', Descr = "investering opwekker, gebouwzijde en brongerelateerd";
				attribute<Eur>		Ki_wd			(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Ki_wd	')+')', Descr = "investering wijkdistributeur, gebouwzijde en brongerelateerd";
				attribute<Eur>		Ki_id			(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Ki_id	')+')';
				attribute<Eur>		Ki_pt			(PlanRegio)		:=	const(0[EUR], PlanRegio); // geen primair transport bij WKO
				
				attribute<Eur>		Oi_lv_aansl		(PlanRegio)		:=	='add('+AsItemList('Oi_Aansl/'+WkoComponent/Name)+')';
				
				attribute<Eur>		Oi_ow_EIA		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oi_ow_EIA		')+')';
				attribute<Eur>		Oi_wd_EIA		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oi_wd_EIA		')+')';
				attribute<Eur>		Oi_id_EIA		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oi_id_EIA		')+')';
				attribute<Eur>		Oi_ge_EIA		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oi_ge_EIA		')+')';
				attribute<Eur>		Oi_pt_EIA		(PlanRegio)		:=	const(0[EUR], PlanRegio); // geen primair transport bij WKO
			}
			
			container flow
			{
				container ge
				{
					attribute<Eur_yr> Kj_ge_hv     (PlanRegio) :=	const(0[Eur_yr], PlanRegio); // geen huurverlaging bij LT netten
					attribute<Eur_yr> Kji_ge_ov    (PlanRegio) :=	stock/ki_ge_ov	 	* (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);
					attribute<Eur_yr> Kji_ge_pm    (PlanRegio) :=	stock/ki_ge_pm 		* (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);
					attribute<Eur_yr> Kmi_ge_ov    (PlanRegio) :=	NCW/mr28/AnnualisationFactor * stock/ki_ge_ov;
					attribute<Eur_yr> Kmi_ge_pm    (PlanRegio) :=	NCW/mr28/AnnualisationFactor * stock/ki_ge_pm;
					attribute<Eur_yr> Om_ge_comfort(PlanRegio) :=	='add('+AsItemList('.../Om_Comfort/'+WkoComponent/Name)+')';
					
					attribute<Eur_yr> Kji_ge_Aansl (PlanRegio) := Stock/Oi_lv_Aansl * NCW/bw28/AnnualisationFactor;
					attribute<Eur_yr> Oji_ge_EIA   (PlanRegio) :=	stock/Oi_ge_EIA * (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);
					attribute<Eur_yr> Omi_ge_EIA   (PlanRegio) :=	NCW/mr28/AnnualisationFactor * stock/Oi_ge_EIA;
				}
				
				container id
				{
					attribute<Eur_yr>	Kj_id_adm		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_id_adm	')+')';
					attribute<Eur_yr>	Kj_id_gas		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij WKO
					attribute<Eur_yr>	Kj_id_elek		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_id_elek	')+')';
					attribute<Eur_yr>	Kj_id_oh		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_id_oh		')+')';
					attribute<Eur_yr>	Kji_id			(PlanRegio)		:=	stock/ki_id			* (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);
					attribute<Eur_yr>	Kmi_id			(PlanRegio)		:=	NCW/mr28/AnnualisationFactor * stock/ki_id;
					attribute<Eur_yr>	Km_id_elek		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Km_id_elek		')+')';
					attribute<Eur_yr>	Km_id_gas		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Kj_id_gas_EH	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Kj_id_gas_CO2	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Kj_id_elek_EH	(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_id_elek_EH	')+')';
					attribute<Eur_yr>	Kj_id_elek_CO2	(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_id_elek_CO2	')+')';
					attribute<Eur_yr>	Omi_id_EIA		(PlanRegio)		:=	NCW/mr28/AnnualisationFactor * stock/Oi_id_EIA;
					attribute<Eur_yr>	Oji_id_EIA		(PlanRegio)		:=	stock/Oi_id_EIA * (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);
					attribute<Eur_yr>	Oj_id_EEA		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oj_id_EEA	')+')';
					attribute<Eur_yr>	Oj_id_SDE		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen aparte SDE voor inpandig distributeur
				}		
					
				container wd
				{					
					attribute<Eur_yr>	Kji_wd			(PlanRegio)		:=	stock/ki_wd			* (NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor);
					attribute<Eur_yr>	Kj_wd_gas		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij WKO
					attribute<Eur_yr>	Kj_wd_elek		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_wd_elek	')+')';
					attribute<Eur_yr>	Km_wd_elek		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Km_wd_elek		')+')';
					attribute<Eur_yr>	Km_wd_gas		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Kj_wd_gas_EH	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Kj_wd_gas_CO2	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Kj_wd_elek_EH	(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_wd_elek_EH	')+')';
					attribute<Eur_yr>	Kj_wd_elek_CO2	(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_wd_elek_CO2	')+')';
					attribute<Eur_yr>	Oj_wd_SDE		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen aparte SDE voor wijkdistributeur
					attribute<Eur_yr>	Oji_wd_EIA		(PlanRegio)		:=	stock/Oi_wd_EIA * (NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor);
					attribute<Eur_yr>	Kj_wd_adm		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_wd_adm	')+')';
					attribute<Eur_yr>	Kj_wd_oh		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_wd_oh		')+')';
					attribute<Eur_yr>	Kmi_wd			(PlanRegio)		:=	NCW/mr28/AnnualisationFactor * stock/ki_wd;
					attribute<Eur_yr>	Omi_wd_EIA		(PlanRegio)		:=	NCW/mr28/AnnualisationFactor * stock/Oi_wd_EIA;
					attribute<Eur_yr>	Oj_wd_EEA		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oj_wd_EEA	')+')';
				}

				container pt
				{
					attribute<Eur_yr>	Oj_pt_EEA		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr>	Omi_pt_EIA		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr>	Kj_pt_oh		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen primair transport bij WKO
					attribute<Eur_yr>	Kj_pt_adm		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr>	Kji_pt			(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr>	Kmi_pt			(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
					attribute<Eur_yr>	Oji_pt_EIA		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen primair transport bij LT netten
				}
				
				container ow
				{
					attribute<Eur_yr>	Kj_ow_gas_EH	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Km_ow_gas		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Km_ow_elek		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen elektriciteitsverbruik bij opwekker
					attribute<Eur_yr>	Kj_ow_gas_CO2	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij LT netten
					attribute<Eur_yr>	Kj_ow_elek_EH	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen elektriciteitsverbruik bij opwekker
					attribute<Eur_yr>	Kj_ow_elek_CO2	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio);  // geen elektriciteitsverbruik bij opwekker
					attribute<Eur_yr>	Oji_ow_EIA		(PlanRegio)		:=	stock/Oi_ow_EIA * (NCW/ow28/StartDiscountFactor * NCW/ow28/AnnualisationFactor);
					attribute<Eur_yr>	Kj_ow_adm		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_ow_adm	')+')';
					attribute<Eur_yr>	Kj_ow_productie	(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen productiekosten bij WKO
					attribute<Eur_yr>	Kj_ow_elek		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen extra elektriciteitsverbruik bij WKO
					attribute<Eur_yr>	Kj_ow_gas		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen gasverbruik bij WKO
					attribute<Eur_yr>	Kj_ow_oh		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Kj_ow_oh		')+')';
					attribute<Eur_yr>	Kji_ow			(PlanRegio)		:=	stock/ki_ow			* (NCW/ow28/StartDiscountFactor * NCW/ow28/AnnualisationFactor);
					attribute<Eur_yr>	Kmi_ow			(PlanRegio)		:=	NCW/mr28/AnnualisationFactor * stock/ki_ow;
					attribute<Eur_yr>	Omi_ow_EIA		(PlanRegio)		:=	NCW/mr28/AnnualisationFactor * stock/Oi_ow_EIA;
					attribute<Eur_yr>	Oj_ow_EEA		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oj_ow_EEA	')+')';
					attribute<Eur_yr>	Oj_ow_SDE		(PlanRegio)		:=	const(0[Eur_yr], PlanRegio); // geen aparte SDE voor opwekker
				}
				
				container lv
				{
					attribute<Eur_yr>	Oj_lv_SDE		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/Oj_SDE		')+')';
					attribute<Eur_yr>	Oji_lv_aansl	(PlanRegio)		:=	stock/Oi_lv_aansl * (NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);
					attribute<Eur_yr>	Omi_lv_aansl	(PlanRegio)		:=	stock/Oi_lv_aansl * (NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor);	
					attribute<Eur_yr>	Oj_lv_vastrecht	(PlanRegio)		:=	='add('+AsItemList('Oj_Vastrecht/'+WkoComponent/Name)+')';
					attribute<Eur_yr>	Oj_lv_verbruik	(PlanRegio)		:=	='add('+AsItemList('Oj_Verbruik/'+WkoComponent/Name)+')';
				}
			}
			
			container Verbruik
			{
				attribute<Gj_yr>	V_id_gas		(PlanRegio)		:=	const(0[Gj_yr], PlanRegio); // geen gasverbruik bij LT netten
				attribute<Gj_yr>	V_wd_gas		(PlanRegio)		:=	const(0[Gj_yr], PlanRegio); // geen gasverbruik bij LT netten
				attribute<Gj_yr>	V_ow_gas		(PlanRegio)		:=	const(0[Gj_yr], PlanRegio); // geen gasverbruik bij LT netten
				
				attribute<Gj_yr>	V_id_elek		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/V_id_elek	')+')';
				attribute<Gj_yr>	V_wd_elek		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/V_wd_elek	')+')';
				attribute<Gj_yr>	V_ow_elek		(PlanRegio)		:=	const(0[Gj_yr], PlanRegio); // geen elektriciteitsverbruik bij LT bronnen TODO: controle met FO
				
				attribute<Gj_yr>	V_id_verlies	(PlanRegio)		:=	const(0[Gj_yr], PlanRegio); // niet specifiek benoemd, alles in WD, TODO: specifiek maken
				attribute<Gj_yr>	V_wd_verlies	(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/V_wd_verlies	')+')';
				attribute<Gj_yr>	V_pt_verlies	(PlanRegio)		:=	const(0[Gj_yr], PlanRegio); // geen primair transport bij LT netten
				
				attribute<Gj_yr>	V_warmte		(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/V_warmte	')+')';
				attribute<Gj_yr>	V_koude			(PlanRegio)		:=	='add('+AsItemList('ObjectResults/' + WkoComponent/Name + '/PR/V_koude	')+')';
				attribute<Gj_yr>	V_WKO			(PlanRegio)		:=	V_warmte - V_koude;	
			}
			
			container Uitstoot
			{
				attribute<KG_yr>	CO2_id_gas		(PlanRegio)		:=	const(0[KG_yr], PlanRegio); // geen gasverbruik bij WKO
				attribute<KG_yr>	CO2_wd_gas		(PlanRegio)		:=	const(0[KG_yr], PlanRegio); // geen gasverbruik bij WKO
				attribute<KG_yr>	CO2_ow_gas		(PlanRegio)		:=	const(0[KG_yr], PlanRegio); // geen gasverbruik bij WKO
				
				attribute<KG_yr>	CO2_id_elek		(PlanRegio)		:=	verbruik/V_id_elek * prijzen/Elektriciteit/CO2_GJ;
				attribute<KG_yr>	CO2_wd_elek		(PlanRegio)		:=	verbruik/V_wd_elek * prijzen/Elektriciteit/CO2_GJ;
				attribute<KG_yr>	CO2_ow_elek		(PlanRegio)		:=	verbruik/V_ow_elek * prijzen/Elektriciteit/CO2_GJ;
			}
		}
	}
}
