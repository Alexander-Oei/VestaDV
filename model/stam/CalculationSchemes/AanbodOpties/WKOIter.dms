//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template WKOIter
{
	// begin case parameters
	unit <uint32> Candidates;
	unit <uint32> UnitedCandidates;
	// end case parameters

	unit <uint32> UniqueUnitedCandidates := Unique(Candidates/Point) // dit moet omdat connect_points anders weigert.
	,	DialogType = "Map"
	,	DialogData = "Point"
	{
		attribute<.> RelPartitioning (Candidates)       := rlookup(Candidates/Point, Values);
		attribute<.> Partitioning    (UnitedCandidates) := RelPartitioning[Candidates/Partitioning];

		attribute<rdc_meter> Point       := Values;
		attribute<string>    Label       := AsItemList(Candidates/Label, RelPartitioning), DialogType = "LabelText";

		attribute<Eur_yr>    Contributiemarge    := sum(Candidates/Contributiemarge    , RelPartitioning);
		attribute<Eur_yr>    Oj_verbruik := sum(Candidates/Oj_verbruik , RelPartitioning);
		attribute<kW>        P_Warmte    := sum(Candidates/P_Warmte    , RelPartitioning);
		attribute<kW>        P_Koude     := sum(Candidates/P_Koude     , RelPartitioning);

		attribute<float64>   n           := sum(Candidates/n, RelPartitioning);
		attribute<float64>   MEAN_x      := sum(Candidates/n * Candidates/MEAN_x, RelPartitioning) / n;
		attribute<float64>   MEAN_y      := sum(Candidates/n * Candidates/MEAN_y, RelPartitioning) / n;
		attribute<float64>   SSD_xx      := sum(Candidates/SSD_xx, RelPartitioning);
		attribute<float64>   SSD_xy      := sum(Candidates/SSD_xy, RelPartitioning);
		attribute<float64>   SSD_yy      := sum(Candidates/SSD_yy, RelPartitioning);
		
		attribute<float64>   SqrtDetSSD  := MakeDefined(Sqrt(SSD_xx*SSD_yy-SSD_xy*SSD_xy), 0.0);
		attribute<m2>        AreaProxy   := (PI() * SqrtDetSSD / n)[m2];

		attribute<Eur>       Ki_ow        := constanten/Ki_Doublet * max_elem(P_Warmte, P_Koude);
		attribute<Eur>       Ki_wd        := AreaProxy * constanten/Ki_distr;

		//attribute<Eur_yr> Oj_ABC:= Oj_totaal;

		// Rentabiliteitsafweging:
		// max(Ki_ABC, 400000) <= Oj_Netto * DurationFactor
		// samenvoegen verhoogt rhs additief, lhs minder dan additief als Ki_ABC onder de 400.000 ligt en Ki_Distr niet te veel stijgt, anders ligt het aan de ontwikkeling van Ki_Distr
		// het door samenvoegen behalen van een positieve afweging wordt verondersteld alleen mogelijk te zijn als  de onderdelen nog onder de 400000 opleveren, maar meer dan de ongerestricteerde Ki_ABC.

		attribute<bool> MarginaleAfweging := Ki_wd * (NCW/wd28/AnnualisationFactor * (1.0 - SpecifiekeInstellingen/Beleid/EIA/wd ) * (1.0 - SpecifiekeInstellingen/Beleid/EEA/wd )) < Contributiemarge;
		attribute<bool> ClusterAfweging   := Oj_verbruik < 400000[Eur] * NCW/ow28/AnnualisationFactor;
		attribute<bool> SelectAfweging    := MarginaleAfweging && !ClusterAfweging; // cluster is klaar
		attribute<bool> CombiAfweging     := MarginaleAfweging &&  ClusterAfweging; // er moet verder geclusterd worden om aan het minimum te gaan voldoen.
	}

	unit<uint32> Selected := Subset(UniqueUnitedCandidates/SelectAfweging), DialogType = "Map", DialogData = "Point"
	{
		attribute<rdc_meter> Point                                := UniqueUnitedCandidates/Point[nr_OrgEntity];
		attribute<string>    Label                                := UniqueUnitedCandidates/Label[nr_OrgEntity], DialogType = "LabelText";
		attribute<.>         Partitioning (UnitedCandidates) := invert(nr_OrgEntity)[UniqueUnitedCandidates/Partitioning];
		attribute<Eur>       Ki_ow                                 := UniqueUnitedCandidates/Ki_ow[nr_OrgEntity];
		attribute<Eur>       Ki_wd                                 := UniqueUnitedCandidates/Ki_wd[nr_OrgEntity];
	}

	unit<uint32> ClusterSet := Subset(UniqueUnitedCandidates/CombiAfweging), DialogType = "Map", DialogData = "Point"
	{
		attribute<rdc_meter>  Point        := UniqueUnitedCandidates/Point[nr_OrgEntity];
		attribute<ClusterSet> Neighbour    := connect_neighbour(Point);
		attribute<bool>       InCluster    := ClusterSet/Neighbour[ClusterSet/Neighbour] == id(ClusterSet);
		attribute<bool>       CanCluster   := ClusterSet/Neighbour > id(ClusterSet) && InCluster;
		attribute<bool>       NotInCluster := Not(InCluster);
	}

	unit <uint32> JoinedClusters := Subset(ClusterSet/CanCluster), DialogType = "Map", DialogData = "Point"
	{
		unit<uint32> Candidates := UniqueUnitedCandidates;

		attribute<Candidates> src1    := ClusterSet/nr_OrgEntity[nr_OrgEntity];
		attribute<Candidates> src2    := ClusterSet/nr_OrgEntity[ClusterSet/Neighbour[nr_OrgEntity]];

		attribute<.> Partitioning (UnitedCandidates) := MakeDefined(invert(src1)[Candidates/Partitioning], invert(src2)[Candidates/Partitioning]);

		attribute<string> Label       := '['+Candidates/Label  [src1] + ';' + Candidates/Label[src2]+']', DialogType = "LabelText";
		attribute<Eur_yr> Oj_verbruik := Candidates/Oj_verbruik[src1] + Candidates/Oj_verbruik[src2];
		attribute<Eur_yr> Contributiemarge    := Candidates/Contributiemarge   [src1] + Candidates/Contributiemarge   [src2];
		attribute<kW>     P_Warmte    := Candidates/P_Warmte   [src1] + Candidates/P_Warmte   [src2];
		attribute<kW>     P_Koude     := Candidates/P_Koude    [src1] + Candidates/P_Koude    [src2];

		attribute<float64> n1         := Candidates/n[src1];
		attribute<float64> n2         := Candidates/n[src2];
		attribute<float64> n          := n1 + n2;
		attribute<float64> MEAN_x     := (n1*Candidates/MEAN_x[src1] + n2*Candidates/MEAN_x[src2]) / n;
		attribute<float64> MEAN_y     := (n1*Candidates/MEAN_y[src1] + n2*Candidates/MEAN_y[src2]) / n;
		attribute<float64> DIFF_x     := Candidates/MEAN_x[src1] - Candidates/MEAN_x[src2];
		attribute<float64> DIFF_y     := Candidates/MEAN_y[src1] - Candidates/MEAN_y[src2];
		attribute<float64> SSD_xx     := Candidates/SSD_xx[src1] + Candidates/SSD_xx[src2] + (n1*n2 / n) * DIFF_x * DIFF_x;
		attribute<float64> SSD_xy     := Candidates/SSD_xy[src1] + Candidates/SSD_xy[src2] + (n1*n2 / n) * DIFF_x * DIFF_y;
		attribute<float64> SSD_yy     := Candidates/SSD_yy[src1] + Candidates/SSD_yy[src2] + (n1*n2 / n) * DIFF_y * DIFF_y;

		attribute<rdc_meter> point    := point(MEAN_y, MEAN_x, rdc_meter);
	}

	unit <uint32> InheritedClusters := Subset(ClusterSet/NotInCluster), DialogType = "Map", DialogData = "Point"
	{
		unit<uint32>          Candidates                           := UniqueUnitedCandidates;
		attribute<Candidates> src1                                 := ClusterSet/nr_OrgEntity[nr_OrgEntity];
		attribute<.>          Partitioning (UnitedCandidates) := invert(src1)[Candidates/Partitioning];
		
		attribute<string>  Label       := Candidates/Label    [src1], DialogType = "LabelText";
		attribute<Eur_yr>  Oj_verbruik := Candidates/Oj_verbruik[src1];
		attribute<Eur_yr>  Contributiemarge    := Candidates/Contributiemarge[src1];
		attribute<kW>      P_Warmte    := Candidates/P_Warmte [src1];
		attribute<kW>      P_Koude     := Candidates/P_Koude  [src1];

		attribute<float64> n           := Candidates/n     [src1];
		attribute<float64> MEAN_x      := Candidates/MEAN_x[src1];
		attribute<float64> MEAN_y      := Candidates/MEAN_y[src1];
		attribute<float64> SSD_xx      := Candidates/SSD_xx[src1];
		attribute<float64> SSD_xy      := Candidates/SSD_xy[src1];
		attribute<float64> SSD_yy      := Candidates/SSD_yy[src1];

		attribute<rdc_meter> point     := Candidates/point[src1];
	}

	unit <uint32> SelectedClusters := union_unit(InheritedClusters, JoinedClusters), DialogType = "Map", DialogData = "Point"
	{
		attribute<.>      Partitioning (UnitedCandidates) := MakeDefined(InheritedClusters/Partitioning, JoinedClusters/Partitioning + #InheritedClusters)[.];

		attribute<string>  Label       := union_data(., InheritedClusters/Label      , JoinedClusters/Label), DialogType = "LabelText";
		attribute<Eur_yr>  Oj_verbruik := union_data(., InheritedClusters/Oj_verbruik, JoinedClusters/Oj_verbruik);
		attribute<Eur_yr>  Contributiemarge    := union_data(., InheritedClusters/Contributiemarge   , JoinedClusters/Contributiemarge);
		attribute<kW>      P_Warmte    := union_data(., InheritedClusters/P_Warmte   , JoinedClusters/P_Warmte);
		attribute<kW>      P_Koude     := union_data(., InheritedClusters/P_Koude    , JoinedClusters/P_Koude);

		attribute<float64> n           := union_data(., InheritedClusters/n          , JoinedClusters/n);
		attribute<float64> MEAN_x      := union_data(., InheritedClusters/MEAN_x     , JoinedClusters/MEAN_x);
		attribute<float64> MEAN_y      := union_data(., InheritedClusters/MEAN_y     , JoinedClusters/MEAN_y);
		attribute<float64> SSD_xx      := union_data(., InheritedClusters/SSD_xx     , JoinedClusters/SSD_xx);
		attribute<float64> SSD_xy      := union_data(., InheritedClusters/SSD_xy     , JoinedClusters/SSD_xy);
		attribute<float64> SSD_yy      := union_data(., InheritedClusters/SSD_yy     , JoinedClusters/SSD_yy);

		attribute<rdc_meter> point     := union_data(., InheritedClusters/point      , JoinedClusters/point);
	}
}