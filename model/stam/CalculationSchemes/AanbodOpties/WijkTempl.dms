//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template WijkTempl
{
	container BeginStatus;
	container AanbodKentallen;
	container EnergiePrijzen;
	parameter<units/yr_uint16> Jaar;
	
	container TypeInfo;
	parameter<Classifications/AanbodOptie> Optie;
	parameter<String>  StartJaarAttr;
	parameter<PJ_yr>   MaxTotalDemand;
	
	// end of case param

	unit<uint32> PlanRegio := UserInput/PlanRegio
	{
		attribute<units/yr_uint16> StartJaar := =StartJaarAttr != '' ? StartJaarAttr : 'const(2000[units/yr_uint16], .)';
	}
	
	
	container KostenBaten := BeginStatus/KostenBaten;
	
	container Kosten
	{
		attribute<Eur> Ki_Totaal_nu(PlanRegio) := 
			(TypeInfo/K_kW_min * Schuiven/KostenMin + TypeInfo/K_kW_max * Schuiven/KostenMax) 
		*	max_elem(KostenBaten/CapaciteitsVraagD, TypeInfo/MWth_min) 
		*	1000[kW / MW]
		;
		
		attribute<Eur> Ki_Totaal(PlanRegio) := Ki_Totaal_nu * LeerCurves/Curve2;
		attribute<Eur> Oi_EIA   (PlanRegio) := Ki_Totaal * UserInput/BeleidsOpties/EIA/ow[TypeInfo/TypeInfoList_rel];
		attribute<Eur> Ki_Netto (PlanRegio) := Ki_Totaal - Oi_EIA;
		
		parameter<Eur_GJ> K_GJ := ='TypeInfo/K_GJ'+string(Jaar-2000w); 
			
		parameter<KG_GJ> CO2g_GJ := TypeInfo/RekenType/Aardgas_Factor       * VestaRunData/Prijzen/AardGas/CO2_GJ;
		parameter<KG_GJ> CO2e_GJ := TypeInfo/RekenType/Elektriciteit_Factor * VestaRunData/Prijzen/Elektriciteit/CO2_GJ;
		parameter<KG_GJ> CO2_GJ := CO2g_GJ + CO2e_GJ, Source = "FO v7a C.5 WijkWKK";
			
		parameter<Eur_GJ> Km_GJ := K_GJ;
				
		attribute<Eur_yr> Kj_Base        (PlanRegio):= Ki_Totaal * TypeInfo/Rj_Onderhoud;
		attribute<Eur_yr> Kj_Admin       (PlanRegio):= Kj_Base * VestaRunData/Onderhoud/R_Admin;
		attribute<Eur_yr> Kj_Onderhoud   (PlanRegio):= Kj_Base - Kj_Admin;
		attribute<Eur_yr> Kj_WarmteWaarde(PlanRegio):= K_GJ  * KostenBaten/Vj_WarmtePrimairD;
		attribute<Eur_yr> Km_WarmteWaarde(PlanRegio):= Km_GJ * KostenBaten/Vj_WarmtePrimairD;
		
		attribute<Eur_yr> Ke_Totaal(PlanRegio) := TypeInfo/RekenType/Elektriciteit_Factor * KostenBaten/Vj_WarmtePrimairD * last(VestaRunData/prijzen/Elektriciteit/Staffel/KGJ_Commodity);

		attribute<Eur_yr> Kj_Totaal(PlanRegio) := Kj_Base + Kj_WarmteWaarde;
		attribute<Eur_yr> Km_Totaal(PlanRegio) := Kj_Base + Km_WarmteWaarde; // Let op: de warmtewaarde is momemteel incl belasting etc.
	}

	attribute<Eur   > Oi_Totaal(PlanRegio) := KostenBaten/Oi_Aansluitbijdrage ;
	attribute<Eur   > Ki_Totaal(PlanRegio) := KostenBaten/Ki_wd_bruto + Kosten/Ki_Totaal;
	attribute<Eur_yr> Ke_Totaal(PlanRegio) := Kosten/Ke_Totaal;
	
	attribute<Eur_yr> Km_Totaal  (PlanRegio):= KostenBaten/Km_TotaalD + Kosten/Km_Totaal;
	attribute<Eur_yr> Oj_Netto   (PlanRegio):= KostenBaten/Oj_NettoD  - Kosten/Kj_Totaal;
	attribute<kg_yr>  CO2_Primair(PlanRegio):= KostenBaten/Vj_WarmtePrimairD * Kosten/CO2_GJ;
	attribute<GJ_yr>  GJe_Totaal (PlanRegio):= KostenBaten/Vj_WarmtePrimairD * TypeInfo/RekenType/Elektriciteit_Factor;
	attribute<kg_yr>  CO2_e      (PlanRegio):= KostenBaten/Vj_WarmtePrimairD * Kosten/CO2e_GJ;
	attribute<kg_yr>  CO2        (PlanRegio):= KostenBaten/CO2_BijstookD + CO2_Primair;
	
	attribute<Eur_yr> Oj_Yield   (PlanRegio) :=  Oj_Netto - Kosten/Ki_Netto * NCW/ow28/AnnualisationFactor * (1.0 - UserInput/BeleidsOpties/EEA/ow[TypeInfo/TypeInfoList_rel]);
	
	
	attribute<GJ_yr>  Vj_Warmte  (PlanRegio) := max_elem(KostenBaten/Vj_WarmtePrimairD, 0.001[GJ_yr]);
	attribute<Eur_GJ> YieldPerGJ (PlanRegio) := Oj_Yield / Vj_Warmte + UserInput/BeleidsOpties/EEA/SDE[TypeInfo/TypeInfoList_rel];
	parameter<Eur_GJ> Threshold := -nth_element_weighted( -YieldPerGJ  * Float64(not(OldGebruik)), MaxTotalDemand * 1000000[GJ / PJ], Vj_Warmte);
	
	attribute<Bool> RentabiliteitsAfweging(PlanRegio) := YieldPerGJ > max_elem(Threshold, 0[Eur_GJ]);
	attribute<Bool> Afweging2    (PlanRegio) := PlanRegio/StartJaar >= Jaar;
		
	attribute<Bool> OldGebruik   (PlanRegio) := IsDefined(BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie); // een optie (deze of andere) was al in gebruik
	attribute<Bool> GebruiktOptie(PlanRegio) := BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie == Optie;   // deze optie was al in gebruik;
	attribute<Bool> NewGebruik   (PlanRegio) := RentabiliteitsAfweging && Afweging2 && not(OldGebruik);
	attribute<Bool> GebruikOptie (PlanRegio) := NewGebruik || GebruiktOptie;
	
	container Results := BeginStatus
	{
		container Factoren := TypeInfo/RekenType;
		
		container AanbodOpties := BeginStatus/AanbodOpties
		{
			attribute<Classifications/AanbodOptie> PlanRegioWarmteAllocatie(PlanRegio) := 
				GebruikOptie
					? MakeDefined(BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie, Optie)
					: BeginStatus/AanbodOpties/PlanRegioWarmteAllocatie;
		}
		container Stock := BeginStatus/Stock
		{
			attribute<Eur> Ki_ow         (PlanRegio) := BeginStatus/Stock/Ki_ow          + iif(NewGebruik, Kosten/Ki_Totaal, 0[Eur]);
			attribute<Eur> Oi_ow_subsidie(PlanRegio) := BeginStatus/Stock/Oi_ow_subsidie + iif(NewGebruik, Kosten/Oi_EIA   , 0[Eur]);
			attribute<Eur> Oe_ow_subsidie(PlanRegio) := BeginStatus/Stock/Oe_ow_subsidie + iif(NewGebruik, Kosten/Ki_Netto * UserInput/BeleidsOpties/EEA/ow[TypeInfo/TypeInfoList_rel], 0[Eur]);
		}
		container Flow := BeginStatus/Flow
		{
			attribute<Eur_yr> Kj_ow_Onderhoud(PlanRegio) := BeginStatus/Flow/Kj_ow_Onderhoud + iif(GebruikOptie, Kosten/Kj_Onderhoud, 0[Eur_yr]);
			attribute<Eur_yr> Kj_ow_admin    (PlanRegio) := BeginStatus/Flow/Kj_ow_Admin     + iif(GebruikOptie, Kosten/Kj_admin, 0[Eur_yr]);
			attribute<Eur_yr> Kj_ow_verbruik (PlanRegio) := BeginStatus/Flow/Kj_ow_verbruik  + iif(GebruikOptie, Kosten/Kj_WarmteWaarde, 0[Eur_yr]);
			attribute<Eur_yr> Km_ow_verbruik (PlanRegio) := BeginStatus/Flow/Km_ow_verbruik  + iif(GebruikOptie, Kosten/Km_WarmteWaarde, 0[Eur_yr]);
			attribute<Eur_yr> Oj_SDE         (PlanRegio) := BeginStatus/Flow/Oj_SDE          + iif(GebruikOptie, Vj_Warmte * UserInput/BeleidsOpties/EEA/SDE[TypeInfo/TypeInfoList_rel], 0[Eur_yr]);
		}
	}
}
