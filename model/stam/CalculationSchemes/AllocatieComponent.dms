//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template AllocatieComponent
{
	// begin case parameters
	container BCdata;
	attribute<Classifications/AanbodOptie> PlanRegioWarmteAllocatie (Invoer/SpecifiekeInstellingen/PlanRegio);

	attribute<Classifications/AanbodOptie> WarmteAllocatie (BebouwingsObject);
	attribute<Eur_yr>                      KoudeAllocatie  (BebouwingsObject);
	attribute<Eur_yr>                      Om_Comfort      (BebouwingsObject);
	// end case parameters

	container    RuimtelijkeVraagComponent := BCdata/RuimtelijkeVraagComponent;
	container    VraagKentallen            := BCdata/VraagKentallen;
	unit<uint32> BebouwingsObject          := BCdata/BebouwingsObject;
	unit<uint32> PlanRegio                 := Invoer/SpecifiekeInstellingen/PlanRegio;

	attribute<Classifications/AanbodOptie> WarmteAllocatieComponent (BebouwingsObject) := MakeDefined(WarmteAllocatie, PlanRegioWarmteAllocatie[BCdata/PlanRegio_rel]);

	container Aandelen
	{
		attribute<float64> eWP          (BebouwingsObject) := BCdata/Opwekking/eWP;
		attribute<float64> mWKK         (BebouwingsObject) := BCdata/Opwekking/mWKK;
		attribute<float64> EWV          (BebouwingsObject) := BCdata/Opwekking/EWV; // @RUUD: meenemen in energiekosten als elektriciteitsvraag
		attribute<float64> hWP          (BebouwingsObject) := BCdata/Opwekking/hWP;

		attribute<float64> GebiedsOptie (BebouwingsObject) := BCdata/Aandeel/WarmteVraag * float64(IsDefined(WarmteAllocatieComponent));
		attribute<float64> RestWarmte   (BebouwingsObject) := BCdata/Aandeel/WarmteVraag * float64(WarmteAllocatieComponent == Classifications/AanbodOptie/V/RestWarmte);
		attribute<float64> GeoThermie   (BebouwingsObject) := BCdata/Aandeel/WarmteVraag * float64(WarmteAllocatieComponent == Classifications/AanbodOptie/V/GeoThermie);
		attribute<float64> WKO          (BebouwingsObject) := BCdata/Aandeel/WarmteVraag * float64(WarmteAllocatieComponent == Classifications/AanbodOptie/V/WKO);
		attribute<float64> WijkWKK      (BebouwingsObject) := BCdata/Aandeel/WarmteVraag * float64(WarmteAllocatieComponent == Classifications/AanbodOptie/V/WijkWKK);
		attribute<float64> BioWKK       (BebouwingsObject) := BCdata/Aandeel/WarmteVraag * float64(WarmteAllocatieComponent == Classifications/AanbodOptie/V/BioWKK);

		attribute<float64> AardGasExclMicroWKK (BebouwingsObject) :=
			  BCdata/Aandeel/WarmteVraag * float64(not(IsDefined(WarmteAllocatieComponent)))
			+ BCdata/Aandeel/NietDeelnemers
			- BCdata/Aandeel/Electric_mWKK;

		attribute<float64> AardGasInclMicroWKK (BebouwingsObject) := AardGasExclMicroWKK  + mWKK;
		attribute<float64> AllElectric         (BebouwingsObject) := eWP + EWV + WKO;
	}

	container MeterVraag
	{
		attribute<GJ_yr> RestWarmte    (BebouwingsObject) := Aandelen/RestWarmte * BCdata/DragerOpties/Warmte/Warmte;
		attribute<GJ_yr> GeoThermie    (BebouwingsObject) := Aandelen/GeoThermie * BCdata/DragerOpties/Warmte/Warmte;
		attribute<GJ_yr> WKO           (BebouwingsObject) := Aandelen/WKO        * BCdata/DragerOpties/Warmte/Warmte;
		attribute<GJ_yr> WijkWKK       (BebouwingsObject) := Aandelen/WijkWKK    * BCdata/DragerOpties/Warmte/Warmte;
		attribute<GJ_yr> BioWKK        (BebouwingsObject) := Aandelen/BioWKK     * BCdata/DragerOpties/Warmte/Warmte;

		attribute<GJ_yr> GebiedsOptie  (BebouwingsObject) := RestWarmte+GeoThermie+WKO+WijkWKK+BioWKK;

		attribute<GJ_yr> AardGas_RV    (BebouwingsObject) := Aandelen/AardGasExclMicroWKK * BCdata/DragerOpties/Ruimteverwarming/AardGas * (1.0 - Aandelen/hWP  *VraagKentallen/hWP/DekkingsGraad); // F85
		attribute<GJ_yr> AardGas_WW    (BebouwingsObject) := Aandelen/AardGasExclMicroWKK * BCdata/DragerOpties/WarmWater/AardGas;
		attribute<GJ_yr> AardGas_mWKK  (BebouwingsObject) := Aandelen/mWKK                * BCdata/DragerOpties/Warmte/Warmte / (0.8 * 0.5); // rendement: 80% waarvan 50% voor warmte en 50% voor Elektriciteit
		attribute<GJ_yr> AardGas       (BebouwingsObject) := AardGas_RV + AardGas_WW + AardGas_mWKK, Descr = "incl gas voor Micro WKK, excl gas voor WijkWKK en bijstook in WOS";

		attribute<GJ_yr> eWP           (BebouwingsObject) := Aandelen/eWP  * BCdata/DragerOpties/Warmte/eWP; // COP is al toegepast in de DragerOptie
		attribute<GJ_yr> EWV           (BebouwingsObject) := Aandelen/EWV  * BCdata/DragerOpties/Warmte/EWV; // COP is al toegepast in de DragerOptie
		attribute<GJ_yr> hWP           (BebouwingsObject) := Aandelen/hWP  * BCdata/DragerOpties/RuimteVerwarming/Warmte * (VraagKentallen/hWP/DekkingsGraad / VraagKentallen/hWP/COP); // F85
		attribute<GJ_yr> mWKK          (BebouwingsObject) := Aandelen/mWKK * BCdata/DragerOpties/Warmte/Warmte; // op basis van 50/50 productie   
		attribute<GJ_yr> CvPomp        (BebouwingsObject) := BCdata/Functioneel/PompEnergie * (Aandelen/AardGasExclMicroWKK - VraagKentallen/hWP/DekkingsGraad * Aandelen/hWP);
		attribute<GJ_yr> Koude         (BebouwingsObject) := BCdata/DragerOpties/Koude/Elektriciteit * (1.0 - Aandelen/WKO); // Efficiency/Koude/Elektriciteit is al toegepast in de DragerOptie; WKO en Koude alleen beiden aan bij NieuwbouwUtil

		attribute<GJ_yr>	WarmteMT		(BebouwingsObject)	:= RestWarmte+GeoThermie+WijkWKK+BioWKK,		Descr = "totale volumevraag naar warmte uit gebiedsopties 70 graden of hoger";
		attribute<GJ_yr>	Warmtetotaal	(BebouwingsObject)	:= eWP + hWP + Aardgas + GebiedsOptie,			Descr = "totale volumevraag warmte uit gebiedsopties en individuele opwek";
		
		attribute<GJ_yr> Elektriciteit (BebouwingsObject) :=
			  BCdata/DragerOpties/Apparatuur/Elektriciteit // incl aftrek Zon_PV
			+ CvPomp + Koude + eWP + EWV + hWP 
			- mWKK
		,	Descr = "excl elektra voor WKO warmtepomp";

//DEBUG		attribute<GJ_yr> Wko_Koude(BebouwingsObject) := BCdata/DragerOpties/Koude/Elektriciteit * Aandelen/WKO;

		attribute<GJ_yr> Totaal       (BebouwingsObject) := RestWarmte + GeoThermie + WKO + WijkWKK + BioWKK + AardGas + Elektriciteit
		,	Descr = "Totale Metervraag na verwerking lokale opwekking";
	}

	container AardGas 
	{
		attribute<Eur>    AansluitBijdrage (BebouwingsObject) := BCdata/Opbrengsten/AansluitBijdrageG   * Aandelen/AardGasInclMicroWKK * float64(Metervraag/Aardgas > 0.0[GJ_yr]);
		attribute<Eur_yr> VastRecht        (BebouwingsObject) := BCdata/Opbrengsten/VastRechtBijdrageG  * Aandelen/AardGasInclMicroWKK * float64(Metervraag/Aardgas > 0.0[GJ_yr]);

		unit<uint8> ggk := BCdata/PrijzenAardgas; // gebruiksgrootte klasse
		attribute<ggk>    ggk_rel          (BebouwingsObject) := classify(MeterVraag/AardGas, ggk/ClassBreak);
		attribute<Eur_yr> eindgebruik_excl (BebouwingsObject) := MeterVraag/AardGas * ggk/KGJ_eindgebruik_excl[ggk_rel];
		attribute<Eur_yr> maatschappelijk  (BebouwingsObject) := MeterVraag/AardGas * ggk/KGJ_maatschappelijk [ggk_rel];
		attribute<Eur_yr> netwerk          (BebouwingsObject) := MeterVraag/AardGas * ggk/KGJ_netwerk         [ggk_rel];
		attribute<Eur_yr> EnergieHeffing   (BebouwingsObject) := MeterVraag/AardGas * ggk/KGJ_EnergieHeffing  [ggk_rel];
		attribute<Eur_yr> CO2Heffing       (BebouwingsObject) := MeterVraag/AardGas * ggk/KGJ_CO2Heffing      [ggk_rel];
	}
	container Elektriciteit
	{
		attribute<Eur>    AansluitBijdrage (BebouwingsObject) := BCdata/Opbrengsten/AansluitBijdrageE;
		attribute<Eur_yr> VastRecht        (BebouwingsObject) := BCdata/Opbrengsten/VastRechtBijdrageE;
		attribute<Eur_yr> Heffingskorting  (BebouwingsObject) := BCdata/Opbrengsten/HeffingskortingE;

		unit<uint8> ggk := BCdata/PrijzenElektriciteit; // gebruiksgrootte klasse
		attribute<ggk>    ggk_rel          (BebouwingsObject) := classify(MeterVraag/Elektriciteit, ggk/ClassBreak);
		attribute<Eur_yr> eindgebruik_excl (BebouwingsObject) := MeterVraag/Elektriciteit * ggk/KGJ_eindgebruik_excl[ggk_rel];
		attribute<Eur_yr> maatschappelijk  (BebouwingsObject) := MeterVraag/Elektriciteit * ggk/KGJ_maatschappelijk [ggk_rel];
		attribute<Eur_yr> netwerk          (BebouwingsObject) := MeterVraag/Elektriciteit * ggk/KGJ_netwerk         [ggk_rel];
		attribute<Eur_yr> EnergieHeffing   (BebouwingsObject) := MeterVraag/Elektriciteit * ggk/KGJ_EnergieHeffing  [ggk_rel] - Heffingskorting;
		attribute<Eur_yr> CO2Heffing       (BebouwingsObject) := MeterVraag/Elektriciteit * ggk/KGJ_CO2Heffing      [ggk_rel];
	}
	container CO2
	{
		attribute<KG_yr> AardGas           (BebouwingsObject) := MeterVraag/AardGas       * prijzen/AardGas/CO2_GJ;
		attribute<KG_yr> Elektriciteit     (BebouwingsObject) := MeterVraag/Elektriciteit * prijzen/Elektriciteit/CO2_GJ;
	}
}

