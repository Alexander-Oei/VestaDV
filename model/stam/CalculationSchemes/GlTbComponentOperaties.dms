//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op UtiliteitsComponenten  //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container GlTbComponentOperaties
{
	template MaakMutatieUitleg
	{
		// begin case parameters
		attribute<bool>            bij(Geography/rdc_grids/m100);
		attribute<bool>            af (Geography/rdc_grids/m100);
		parameter<units/yr_uint16> zichtjaar;
		
		Unit<UInt32> bron: Expr = "BronData/bebouwing/glastuinbouw";
		
		// einde case parameters
		
		container impl
		{
			unit<uint32> lokatiesBij := Subset(bij)
			{
				attribute<Geography/rdc_meter>                point:        Expr = "Geography/rdc_grids/m100/point[nr_OrgEntity]";
				attribute<Geography/RegioIndelingen/PC4>      PC4_rel:      Expr = "Geography/rdc_grids/m100/PC4_rel[nr_OrgEntity]";
				attribute<Geography/RegioIndelingen/grid500m> grid500m_rel: Expr = "Geography/rdc_grids/m100/grid500m_rel[nr_OrgEntity]";
				attribute<Geography/RegioIndelingen/grid1km>  grid1km_rel:  Expr = "Geography/rdc_grids/m100/grid1km_rel[nr_OrgEntity]";
				attribute<Geography/RegioIndelingen/grid2km>  grid2km_rel:  Expr = "Geography/rdc_grids/m100/grid2km_rel[nr_OrgEntity]";
			}
			
			unit<UInt32> AggrReg := Geography/RegioIndelingen/PC4
			{
				attribute<AggrReg> rel(Geography/rdc_grids/m100): Expr = "Geography/rdc_grids/m100/PC4_rel";
				attribute<Units/m2>    Oppervlakte_bij     := sum(bij ? 10000[units/m2] : 0[units/m2],rel);
				attribute<Units/m2>    Oppervlakte_af_max  := sum(af  ? 10000[units/m2] : 0[units/m2],rel);
				attribute<Units/m2>    Oppervlakte_huidig  : 
					Expr = "sum(BronData/bebouwing/glastuinbouw/Opp_M2, BronData/bebouwing/glastuinbouw/PC4_rel)";
				attribute<Units/ratio> behoudfactor        : Expr = "value(1, Units/Ratio) - min_elem(Oppervlakte_af_max / Oppervlakte_huidig, value(1, Units/ratio))";
			}
		}
		unit<uint32>  results := combine(impl/lokatiesBij, Classifications/GLTB)
			,	DialogType ="Map"
			,	DialogData ="Point"
		{
			// units en attributen van BebouwingsComponent
			unit<uint32>  BebouwingsObject := .;
			attribute<Geography/rdc_meter> PointCopy(BebouwingsObject): Expr = "point";
			attribute<String> Code := String(SubType)+ String(Bouwjaar) + String(Point);
			attribute<string> Label := Code, DialogType = "LabelText";

			unit<uint8>   KengetalTypeDomein: Expr = "Classifications/GLTB";
			
			attribute<Geography/rdc_meter>           point          (BebouwingsObject): Expr = "impl/lokatiesBij/point[BebouwingsObject/nr_1]";
			attribute<Geography/RegioIndelingen/PC4>      PC4_rel      (BebouwingsObject): Expr = "impl/lokatiesBij/PC4_rel     [BebouwingsObject/nr_1]";
			attribute<Geography/RegioIndelingen/grid500m> grid500m_rel (BebouwingsObject): Expr = "impl/lokatiesBij/grid500m_rel[BebouwingsObject/nr_1]";
			attribute<Geography/RegioIndelingen/grid1km>  grid1km_rel  (BebouwingsObject): Expr = "impl/lokatiesBij/grid1km_rel [BebouwingsObject/nr_1]";
			attribute<Geography/RegioIndelingen/grid2km>  grid2km_rel  (BebouwingsObject): Expr = "impl/lokatiesBij/grid2km_rel [BebouwingsObject/nr_1]";
			attribute<KengetalTypeDomein>            KengetalType   (BebouwingsObject): Expr = "GLTB_Code";
			attribute<Classifications/bouwjaar>      bouwjaarOrg    (BebouwingsObject): Expr = "const(classify(value(zichtjaar, Units/Yr)-value(0.5, Units/Yr),  classifications/bouwjaar/ClassBreak), BebouwingsObject)";
			attribute<Classifications/bouwjaar>      bouwjaar       (BebouwingsObject): Expr = "(bouwjaarOrg < Classifications/BouwJaar/n2020) ? Classifications/BouwJaar/Onbekend : bouwjaarOrg";
			attribute<UInt8>                         SubType        (BebouwingsObject): Expr = "KengetalType * UInt8(NrOfRows(Classifications/BouwJaar)) + BouwJaar";
			attribute<m2>                            NrJoinedUnits  (BebouwingsObject): Expr = "Oppervlakte";
			attribute<nrAansl>                       nrAansluitingen(BebouwingsObject) := const(1[nrAansl   ], BebouwingsObject), FreeData = "True";
			attribute<nrWoningen>                    nrWoonUnits    (BebouwingsObject) := const(0[nrWoningen], BebouwingsObject), FreeData = "True";
			
			// overige attributen 
			attribute<Classifications/GLTB> GLTB_code  (BebouwingsObject): Expr = "BebouwingsObject/nr_2";
			attribute<Units/ratio>          Verdeling  (BebouwingsObject): Expr = "BronData/GLTBverdeling/nl/GLTB[GLTB_code]";
			attribute<m2>                   Oppervlakte(BebouwingsObject): Expr = "Verdeling * 10000[units/m2]";
			attribute<Float64>       AandeelWarmteVraag(BebouwingsObject): Expr = "const(Float64(1.0), BebouwingsObject)"; // geen AandeelWarmteVraag in de nieuwe glastuinbouw
			
			container Criteria;
			container Gebied: FreeData = "True" // noodzakelijk voor Bebouwingscomponent interfact, hoewel gtb niet gebruikt wordt voor WKO.
			{
				attribute<Float64> n     (BebouwingsObject) := const(0.0, BebouwingsObject);
				attribute<Float64> MEAN_x(BebouwingsObject) := const(0.0, BebouwingsObject);
				attribute<Float64> MEAN_y(BebouwingsObject) := const(0.0, BebouwingsObject);
				attribute<Float64> SSD_xx(BebouwingsObject) := const(0.0, BebouwingsObject);
				attribute<Float64> SSD_xy(BebouwingsObject) := const(0.0, BebouwingsObject);
				attribute<Float64> SSD_yy(BebouwingsObject) := const(0.0, BebouwingsObject);
			}
		}
	}

}