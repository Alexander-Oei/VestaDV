//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container NieuwbouwWoningOperaties
{
	template Select
	{
		// begin case parameters
		attribute<Units/nrWoningen>                    NrWoningenGrid (Geography/rdc_grids/m100);
		parameter<Classifications/WoningtypeNieuwbouw> type;
		parameter<units/yr_uint16>                     zichtjaar;
		// einde case parameters

		unit<uint32> BebouwingsObject := Subset(NrWoningenGrid > 0[Units/nrWoningen]),
			DialogType = "Map",
			DialogData = "Point"
		{
			attribute<Units/nrWoningen>                    NrWoningen         (BebouwingsObject) := NrWoningenGrid[BebouwingsObject/nr_OrgEntity];

			attribute<Geography/RegioIndelingen/blok500m>  blok500m_rel       (BebouwingsObject) := Geography/rdc_grids/m100/blok500m_rel[BebouwingsObject/nr_OrgEntity];
			attribute<Geography/RegioIndelingen/blok1km>   blok1km_rel        (BebouwingsObject) := Geography/rdc_grids/m100/blok1km_rel [BebouwingsObject/nr_OrgEntity];
			attribute<Geography/RegioIndelingen/blok2km>   blok2km_rel        (BebouwingsObject) := Geography/rdc_grids/m100/blok2km_rel [BebouwingsObject/nr_OrgEntity];

			attribute<Geography/rdc_meter>                 Point              (BebouwingsObject) := Geography/rdc_grids/m100/Point  [BebouwingsObject/nr_OrgEntity];
			attribute<Classifications/WoningtypeNieuwbouw> BebouwingsType     (BebouwingsObject) := const(type, BebouwingsObject, Classifications/WoningtypeNieuwbouw);
			attribute<Classifications/BouwJaar>            Bouwjaar           (BebouwingsObject) := const(classify(value(zichtjaar, Units/Yr)-value(0.5, Units/Yr),  classifications/bouwjaar/ClassBreak),BebouwingsObject);
			attribute<bool>                                KanBesparen        (BebouwingsObject) := const(true, BebouwingsObject); // woning Nieuwbouw wordt al optimaal gebouwd
			attribute<float64>                             AandeelWarmteVraag (BebouwingsObject) := const(1.0, BebouwingsObject); // alle woning Nieuwbouw is geschikt voor WarmteOpties

			container Gebied
			{
				attribute<float64> n      (BebouwingsObject) := float64(NrWoningen);
				attribute<float64> MEAN_x (BebouwingsObject) := float64(PointCol(Point));
				attribute<float64> MEAN_y (BebouwingsObject) := float64(PointRow(Point));
				attribute<float64> SSD_xx (BebouwingsObject) := const(10000.0 / 12.0, BebouwingsObject);
				attribute<float64> SSD_xy (BebouwingsObject) := const(    0.0 / 12.0, BebouwingsObject);
				attribute<float64> SSD_yy (BebouwingsObject) := const(10000.0 / 12.0, BebouwingsObject);
			}
		}
	}
	template Unite
	{
		// begin case parameters
		container bron;
		// einde case parameters

		unit<uint8> WoningType := Classifications/WoningtypeNieuwbouw;
		
		unit<uint32> results := ='Union_Unit(' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject') + ')'
			,	DialogType = "Map"
			,	DialogData = "Point"
		{

			attribute<string> Code     := Label;
			attribute<String> TypeName := ='union_data(., ' + asItemList('const(' + Quote(WoningType/Name) + ',bron/' + WoningType/Name + '/BebouwingsObject)') + ')';
			attribute<String> Label    := TypeName+String(BouwJaar)+String(Point), DialogType = "LabelText";
			parameter<m>      SymbolWorldSize: [ 50 ], DialogType = "SymbolWorldSize";

			unit<uint8> BebouwingsTypeDomein := WoningType;

			attribute<Units/nrWoningen>                   NrJoinedUnits      := ='union_data(., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/NrWoningen') + ')';
			attribute<Geography/RegioIndelingen/blok500m> blok500m_rel       := ='union_data(., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/blok500m_rel') + ')';
			attribute<Geography/RegioIndelingen/blok1km>  blok1km_rel        := ='union_data(., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/blok1km_rel') + ')';
			attribute<Geography/RegioIndelingen/blok2km>  blok2km_rel        := ='union_data(., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/blok2km_rel') + ')';
			attribute<Geography/rdc_meter>                Point              := ='union_data(., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/Point') + ')';
			attribute<BebouwingsTypeDomein>               BebouwingsType     := ='union_data(., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/BebouwingsType') + ')';
			attribute<Classifications/BouwJaar>           Bouwjaar           := ='union_data(., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/Bouwjaar') + ')';
			attribute<Classifications/BouwJaar>           ModelObjectKey     := BebouwingsType * uint8(#Classifications/BouwJaar) + BouwJaar;
			attribute<nrAansl>                            nrAansluitingen_i  := NrJoinedUnits * 1.0[nrAansl / NrWoningen];
			attribute<nrWoningen>                         nrWoonUnits_i      := nrJoinedUnits;

			attribute<float64>                            AandeelWarmteVraag := ='union_data(., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/AandeelWarmteVraag') + ')';

			container Gebied
			{
				attribute<float64> n      (..) := ='union_data(.., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/Gebied/n'     ) + ')';
				attribute<float64> MEAN_x (..) := ='union_data(.., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/Gebied/MEAN_X') + ')';
				attribute<float64> MEAN_y (..) := ='union_data(.., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/Gebied/MEAN_y') + ')';
				attribute<float64> SSD_xx (..) := ='union_data(.., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/Gebied/SSD_xx') + ')';
				attribute<float64> SSD_xy (..) := ='union_data(.., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/Gebied/SSD_xy') + ')';
				attribute<float64> SSD_yy (..) := ='union_data(.., ' + asItemList('bron/' + WoningType/Name + '/BebouwingsObject/Gebied/SSD_yy') + ')';
			}
			container Criteria;
		}
	}
}