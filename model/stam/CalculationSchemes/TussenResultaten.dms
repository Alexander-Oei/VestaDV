//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template TussenResultaten
{
	// begin case parameters
	parameter<String> RekenstapName;
	parameter<String> ZichtjaarName;
	container StateVoorAllocatie;
	// end case parameters
	
	parameter<Classifications/Zichtjaar> ZichtJaar_rel := rlookup(ZichtjaarName, Classifications/zichtjaar/name);
	parameter<units/yr_uint16>           ZichtJaar_jaar := Classifications/zichtjaar/jaar[Zichtjaar_rel];
	unit<uint32> PlanRegio           := Invoer/SpecifiekeInstellingen/PlanRegio;

	container SpecifiekeInstellingen := ='Invoer/SpecifiekeInstellingen/' + RekenStapName;
	container VraagKentallen         := SpecifiekeInstellingen/VraagKentallen;
	container AanbodKentallen        := SpecifiekeInstellingen/AanbodKentallen;

	container Bebouwing              := ='RuimtelijkeData/Bebouwing/' + ZichtjaarName;

	unit<uint32> WarmteBronnen       := RuimtelijkeData/WarmteBronnen/RestWarmte/bron;

	attribute<Units/Ratio> KlimaatFactorMap (Geography/rdc_grids/m100) := = 'Invoer/RuimtelijkeData/klimaat/'+ ZichtjaarName +'[Units/Ratio]';

	container Voorkeuren := SpecifiekeInstellingen/Voorkeuren
	{
		unit<uint8> WarmteOpties_Org := range(uint8, 0b, uint8(AanbodOpties/Aantal)) // te kiezen keten van: { GeoTermie, RestWarmte, ... } LET OP: laatste cijfer moet gelijk zijn aan aantal regels onder 'union_data('
		{
			attribute<string> Name := SchemaName;

			attribute<Classifications/AanbodOptie> AanbodOptie := =AanbodOpties/Aantal > 0 
				? 'union_data(.'+AsList(',AanbodOpties/Optie'+string(id(.) + 1b), '')+')' 
				: 'const((0b / 0b)[Classifications/AanbodOptie], .)';
			attribute<string> SchemaName := Classifications/AanbodOptie/Name[AanbodOptie];
			attribute<string> code       := Classifications/AanbodOptie/Code[AanbodOptie];
		}
		unit<uint8> WarmteOpties_Ext: = union_unit_uint8(range(UInt8,0b, 1b), WarmteOpties_Org) // {  RestWarmte, ... } 
		{
			attribute<string> Name: = SchemaName;

			attribute<Classifications/AanbodOptie> AanbodOptie := union_data(., Classifications/AanbodOptie/V/RestWarmte, WarmteOpties_Org/AanbodOptie);
			attribute<string>                      SchemaName  := union_data(., 'RestWarmte', WarmteOpties_Org/SchemaName);
			attribute<string>                      code        := union_data(., '0', WarmteOpties_Org/code);
		}

		parameter<bool> NewRestWarmte := IsDefined(rlookup(Classifications/AanbodOptie/V/RestWarmte, WarmteOpties_Org/AanbodOptie)); // is nieuwe allocatie toegestaan
		parameter<bool> OldRestWarmte := =NewRestWarmte ? 'false':'StateVoorAllocatie/RestWarmte/CumulatedArcSet/HasArcs'; // moet er toch restwarmte aan?

		unit<uint8> WarmteOpties     := =OldRestWarmte ? 'WarmteOpties_Ext' : 'WarmteOpties_Org';
		unit<uint8> PlanRegioOptie   := subset(lookup(WarmteOpties/AanbodOptie, Classifications/AanbodOptie/IsPlanRegioOptie))
		{
			attribute<string> name := WarmteOpties/name[nr_OrgEntity];
			attribute<string> code := WarmteOpties/code[nr_OrgEntity];
		}
		unit<uint8> ClusterOptie := subset(not(lookup(WarmteOpties/AanbodOptie, Classifications/AanbodOptie/IsPlanRegioOptie)))
		{
			attribute<string> name := WarmteOpties/name[nr_OrgEntity];
			attribute<string> code := WarmteOpties/code[nr_OrgEntity];
		}
	}
	container Schuiven
	{
		parameter<Ratio> CurveMax       := SpecifiekeInstellingen/RuimtelijkeVraag/Lokaal/Generiek/Kosten/LeercurveMinMaxSchuif;
		parameter<Ratio> CurveMin       := 1.0 - CurveMax;

		parameter<Ratio> LerenAan       := SpecifiekeInstellingen/RuimtelijkeVraag/Lokaal/Generiek/Kosten/LeercurveGebruikSchuif;
		parameter<Ratio> LerE_nuit       := 1.0 - LerenAan;

		parameter<Ratio> KostenMax      : = SpecifiekeInstellingen/RuimtelijkeVraag/Lokaal/Generiek/Kosten/VerbeterMinMaxSchuif;
		parameter<Ratio> KostenMin      := 1.0 - KostenMax;

		parameter<Ratio> OpbrMax        := SpecifiekeInstellingen/RuimtelijkeVraag/Lokaal/Generiek/Opbrengsten/MinMaxSchuif;
		parameter<Ratio> OpbrMin        := 1.0 - OpbrMax;

		parameter<Ratio> VerketelingMax := SpecifiekeInstellingen/RuimtelijkeVraag/Lokaal/Generiek/Kosten/IndividueleVerwarmingSchuif;
		parameter<Ratio> VerketelingMin := 1.0 - VerketelingMax;

		parameter<Ratio> HuurVerlagingBijGebiedsOptie := SpecifiekeInstellingen/RuimtelijkeVraag/Lokaal/Generiek/Opbrengsten/HuurVerlagingBijGebiedsOptieSchuif;
	}

	container LeerCurves
	{
		attribute <Ratio> DataMin1 (Classifications/ZichtJaar) := Kengetallen/Leercurves/C1Min;
		attribute <Ratio> DataMax1 (Classifications/ZichtJaar) := Kengetallen/Leercurves/C1Max;
		attribute <Ratio> DataMin2 (Classifications/ZichtJaar) := Kengetallen/Leercurves/C2Min;
		attribute <Ratio> DataMax2 (Classifications/ZichtJaar) := Kengetallen/Leercurves/C2Max;

		parameter<Ratio> Curve1Min := interpolate_linear(ZichtJaar_jaar, Classifications/ZichtJaar/Jaar, DataMin1);
		parameter<Ratio> Curve1Max := interpolate_linear(ZichtJaar_jaar, Classifications/ZichtJaar/Jaar, DataMax1);
		parameter<Ratio> Curve2Min := interpolate_linear(ZichtJaar_jaar, Classifications/ZichtJaar/Jaar, DataMin2);
		parameter<Ratio> Curve2Max := interpolate_linear(ZichtJaar_jaar, Classifications/ZichtJaar/Jaar, DataMax2);

		parameter<Ratio> Base1     := Curve1Min * Schuiven/CurveMin + Curve1Max * Schuiven/CurveMax;
		parameter<Ratio> Base2     := Curve2Min * Schuiven/CurveMin + Curve2Max * Schuiven/CurveMax;

		parameter<Ratio> Curve1    := Base1 * Schuiven/LerenAan + Schuiven/LerE_nuit, descr = "overige onderdelen";
		parameter<Ratio> Curve2    := Base2 * Schuiven/LerenAan + Schuiven/LerE_nuit, descr = "warmteleidingen en uitkoppeling van warmte";
	}

	#include<Prijzen.dms>

	attribute<bool> HeeftResterendFactoren (Classifications/BebouwingsComponent) :=
		='union_data(
			Classifications/BebouwingsComponent
			,' + AsList(Classifications/BebouwingsComponent/IsNieuwbouw 
				? 'false' 
				: 'Bebouwing/Has' + Classifications/BebouwingsComponent/name + 'ResterendFactors',
			',')
		+')';

	#include<BebouwingsComponenten.dms>

	container NCW: isHidden = "True"
	{
		container DV := SpecifiekeInstellingen/DiscontoVoet;
		container IN := SpecifiekeInstellingen/investering;

		container ow28 := NettoContanteWaarde(DV/ow, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container id28 := NettoContanteWaarde(DV/id, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container wd28 := NettoContanteWaarde(DV/wd, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container pt28 := NettoContanteWaarde(DV/pt, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container mr28 := NettoContanteWaarde(DV/mr, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);

		container bw28 := NettoContanteWaarde(DV/E_bw, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container nw28 := NettoContanteWaarde(DV/E_nw, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container bu28 := NettoContanteWaarde(DV/E_bu, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container nu28 := NettoContanteWaarde(DV/E_nu, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container bt28 := NettoContanteWaarde(DV/E_bt, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);
		container nt28 := NettoContanteWaarde(DV/E_nt, IN/BeginOpbrengstJaar, IN/EindOpbrengstJaar);

		container mr50 := NettoContanteWaarde(DV/mr , 0[Yr], 50[Yr]);
		container bw50 := NettoContanteWaarde(DV/E_bw, 0[Yr], 50[Yr]);
		container nw50 := NettoContanteWaarde(DV/E_nw, 0[Yr], 50[Yr]);
		container bu50 := NettoContanteWaarde(DV/E_bu, 0[Yr], 50[Yr]);
		container nu50 := NettoContanteWaarde(DV/E_nu, 0[Yr], 50[Yr]);
		container bt50 := NettoContanteWaarde(DV/E_bt, 0[Yr], 50[Yr]);
		container nt50 := NettoContanteWaarde(DV/E_nt, 0[Yr], 50[Yr]);

		container mr30 := NettoContanteWaarde(DV/mr , 0[Yr], 30[Yr]);
		container bw30 := NettoContanteWaarde(DV/E_bw, 0[Yr], 30[Yr]);
		container nw30 := NettoContanteWaarde(DV/E_nw, 0[Yr], 30[Yr]);
		container bu30 := NettoContanteWaarde(DV/E_bu, 0[Yr], 30[Yr]);
		container nu30 := NettoContanteWaarde(DV/E_nu, 0[Yr], 30[Yr]);
		container bt30 := NettoContanteWaarde(DV/E_bt, 0[Yr], 30[Yr]);
		container nt30 := NettoContanteWaarde(DV/E_nt, 0[Yr], 30[Yr]);

		container mr15 := NettoContanteWaarde(DV/mr , 0[Yr], 15[Yr]);
		container bw15 := NettoContanteWaarde(DV/E_bw, 0[Yr], 15[Yr]);
		container nw15 := NettoContanteWaarde(DV/E_nw, 0[Yr], 15[Yr]);
		container bu15 := NettoContanteWaarde(DV/E_bu, 0[Yr], 15[Yr]);
		container nu15 := NettoContanteWaarde(DV/E_nu, 0[Yr], 15[Yr]);
		container bt15 := NettoContanteWaarde(DV/E_bt, 0[Yr], 15[Yr]);
		container nt15 := NettoContanteWaarde(DV/E_nt, 0[Yr], 15[Yr]);
	}

	container GebiedsAllocatie :=
		for_each_ne(
			Voorkeuren/WarmteOpties/Name,
			'CalculationSchemes/AanbodOpties/'+Voorkeuren/WarmteOpties/SchemaName+'(
				'+MakeDefined(Voorkeuren/WarmteOpties/Name[ID(Voorkeuren/WarmteOpties)-1b]+'/Results', 'Initieel')+',
				AanbodKentallen/'+Voorkeuren/WarmteOpties/SchemaName+', 
				EnergiePrijzen, ZichtJaar_jaar
			)'
		)
	{
		container Initieel := StateVoorAllocatie
		{
			container Bebouwing     := BebouwingsComponenten;
			
			container Flow
			{
				attribute<Eur_yr> Kj_id_oh        (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kj_id_adm       (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kj_id_precario  (PlanRegio) := const(0[Eur_yr], PlanRegio);
	
				attribute<Eur_yr> Kj_wd_oh        (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kj_wd_adm       (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kj_wd_precario  (PlanRegio) := const(0[Eur_yr], PlanRegio);
	
				attribute<Eur_yr> Kj_pt_oh        (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kj_pt_adm       (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kj_pt_precario  (PlanRegio) := const(0[Eur_yr], PlanRegio);
	
				attribute<Eur_yr> Kj_ow_oh        (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kj_ow_adm       (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kj_ow_verbruik  (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Km_ow_verbruik  (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Kc_ow_verbruik  (PlanRegio) := const(0[Eur_yr], PlanRegio); // CO2 emission right
				attribute<Eur_yr> Kj_ow_precario  (PlanRegio) := const(0[Eur_yr], PlanRegio);
				attribute<Eur_yr> Oj_SDE          (PlanRegio) := const(0[Eur_yr], PlanRegio); // allocated SDE
			}
	
			container KostenBaten := CalculationSchemes/KostenBaten(Bebouwing, invoer/Energieprijzen);
		}
		parameter<string> ResultStateName := MakeDefined(last(Voorkeuren/WarmteOpties/Name)+'/Results', 'Initieel');
		container ResultState := =ResultStateName;
	}

	#include<StateNaAllocatie.dms>

	container Allocatie :=
		for_each_ne(Classifications/BebouwingsComponent/Name,
			'AllocatieComponent(
				BebouwingsComponenten/'+Classifications/BebouwingsComponent/Name+'
				,StateNaAllocatie/PlanRegioWarmteAllocatie
				,StateNaAllocatie/Bebouwing/'+Classifications/BebouwingsComponent/Name+'/WarmteAllocatie
				,StateNaAllocatie/Bebouwing/'+Classifications/BebouwingsComponent/Name+'/KoudeAllocatie
				,StateNaAllocatie/Bebouwing/'+Classifications/BebouwingsComponent/Name+'/Om_Comfort
				,'+quote(Classifications/BebouwingsComponent/Name)+'
			)'
		), FreeData = "False"
	{
		attribute<bool>    heeft_gas                               (PlanRegio) := ='or('+AsItemList(replace('any(@BC@/MeterVraag/Aardgas > 0.0, BebouwingsComponenten/@BC@/PlanRegio_rel)','@BC@', Classifications/WkoComponent/Name))+')';
		attribute<nrAansl> aant_g_aansl_per_planregio              (PlanRegio) := aant_g_aansl_woning_per_planregio + aant_g_aansl_util_per_planregio + aant_g_aansl_GlTb_per_planregio;
		attribute<nrAansl> aant_g_aansl_woning_per_planregio       (PlanRegio) := BestaandeWoning/aant_g_aansl_per_planregio + NieuwbouwWoning/aant_g_aansl_per_planregio;
		attribute<nrAansl> aant_g_aansl_woning_hoogb_per_planregio (PlanRegio) := BestaandeWoning/aant_g_aansl_hoogb_per_planregio + NieuwbouwWoning/aant_g_aansl_hoogb_per_planregio;
		attribute<nrAansl> aant_g_aansl_woning_laagb_per_planregio (PlanRegio) := BestaandeWoning/aant_g_aansl_laagb_per_planregio + NieuwbouwWoning/aant_g_aansl_laagb_per_planregio;
		attribute<nrAansl> aant_g_aansl_util_per_planregio         (PlanRegio) := BestaandeUtil/aant_g_aansl_per_planregio + NieuwbouwUtil/aant_g_aansl_per_planregio;
		attribute<nrAansl> aant_g_aansl_GlTb_per_planregio         (PlanRegio) := BestaandeGlTb/aant_g_aansl_per_planregio + NieuwbouwGlTb/aant_g_aansl_per_planregio;
		
		attribute<bool>    GrondroeringInPlanRegio                 (PlanRegio) := ='or('+AsItemList(replace('Allocatie/@BC@/GrondroeringInPlanRegio','@BC@', Classifications/BebouwingsComponent/Name))+')';
	}
}