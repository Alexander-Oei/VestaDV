//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container AanbodOpties
{
	unit<uint32> PlanRegio := Invoer/SpecifiekeInstellingen/PlanRegio;
	attribute<Classifications/AanbodOptie> PlanRegioWarmteAllocatie (PlanRegio) := Restwarmte/GebruikRestWarmte ? Classifications/AanbodOptie/V/RestWarmte : value(0 / 0, Classifications/AanbodOptie);

	container RestWarmte
	{
		attribute<CumulatedArcSet> CumulatedArcSet_rel (PlanRegio) := invert(CumulatedArcSet/planregio_rel);
		attribute<bool>            GebruikRestWarmte   (PlanRegio) := IsDefined(CumulatedArcSet_rel);

		unit<uint32> WarmteBronnen := RuimtelijkeData/WarmteBronnen/RestWarmte/bron;
		
		// inlezen bestaande warmtenetten met indicatie van huidige bron en doorkoppelingen
		unit<uint32> linkset: StorageName = "%SourceDataProjDir%/infra/20190101_CBS_bestaande_warmtenetten_2019.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	url             = "%SourceDataProjDir%/infra/20190118_update_bestaande_warmtenetten_FvdM.txt"
		{
			attribute<string> BU_code;
			attribute<string> BU_code_dk;
			attribute<string> pntnr;

			// error when PlanRegio != Geography/RegioIndelingen/buurt
			attribute<PlanRegio>     BU_rel    := rlookup(BU_Code,    Geography/RegioIndelingen/buurt/BU_code);
			attribute<PlanRegio>     BU_DK_rel := rlookup(BU_Code_dk, Geography/RegioIndelingen/buurt/BU_code);
			attribute<.>             up_rel    := rlookup(BU_DK_rel, BU_rel);
			attribute<rdc_meter>     Point     := PlanRegio/Point[BU_rel];
			attribute<WarmteBronnen> bron_rel  := rlookup(pntnr, WarmteBronnen/naam);
			attribute<nodeset>       F1        := MakeDefined(value(bron_rel+#linkset, nodeset), value(up_rel, nodeset)); // source, a WarmteBronnen or alternatively the up_rel Planregio
			attribute<nodeset>       F2        := value(id(.), nodeset); // serviced Planregio
		}

		unit<uint32> nodeset := union_unit(linkset, WarmteBronnen)
		{
			attribute<rdc_meter> Point := union_data(., linkset/Point, WarmteBronnen/P);
			unit<uint32> e :=
				dijkstra_m(
					'directed;startPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
					,const(1.0f, linkset)
					,linkset/f1
					,linkset/f2
					,value(id(WarmteBronnen)+#linkset, nodeset)
					,1000.0f
				);
//			attribute<nodeset> d := dijkstra_s('directed;startPoint(Node_rel);node:TraceBack', const(1.0f, linkset), linkset/f1, linkset/f2, value(id(WarmteBronnen)+#linkset, nodeset) );
		}

		unit<uint32> GivenStartArcSet := linkset //: StorageName = "%projdir%/data/RestWarmteStart/CumulatedArcSet.dbf", StorageReadOnly = "True"
		{
			attribute<Geography/RegioIndelingen/buurt> PlanRegio_rel := linkset/BU_rel;
			attribute<rdc_meter>                       PrevPoint     := nodeset/Point[linkset/F1];
//					attribute<Eur>                             Ki_Netto;
			attribute<WarmteBronnen>                   Bron_rel      := value(rjoin(value(id(linkset), nodeset), nodeset/e/DstZone_rel, nodeset/e/OrgZone_rel), WarmteBronnen);
			attribute<rdc_meter>                       BronPoint     := WarmteBronnen/P[Bron_rel];

			parameter<bool> HasArcs := true; // avoid reading the dbf to find this out.
		}

		unit<uint32> EmptySequenceSetSource := Range(uint32, 0,0)
		{
			attribute<rdc_meter> Point      := const(Point(0.0, 0.0, rdc_meter), .);
			attribute<.>         SequenceNr := const(value(0, .), .);
			attribute<uint32>    Ordinal    := const(value(0, uint32), .);
		}

		unit<uint32> EmptyArcSet: = EmptySequenceSetSource
		{
			attribute<rdc_meter> PrevPoint     : = Point;
			attribute<rdc_meter> BronPoint     : = Point;
			attribute<PlanRegio> PlanRegio_rel : = const(0[PlanRegio], .);
			attribute<Eur>       Ki_Netto      : = const(value(0, Eur), .);
	
			parameter<bool> HasArcs := false; // avoid reading the dbf to find this out.
		}

		unit<uint32> CumulatedArcSet := = SpecifiekeInstellingen/HasStartingArcSet ? 'GivenStartArcSet' : 'EmptyArcSet';

		attribute<rdc_meter> CumulatedArcs(CumulatedArcSet, arc)
			:= points2sequence_ps(
				union_data(union_unit(CumulatedArcSet, CumulatedArcSet), CumulatedArcSet/PrevPoint, PlanRegio/Point[CumulatedArcSet/PlanRegio_rel]),
				union_data(union_unit(CumulatedArcSet, CumulatedArcSet), id(CumulatedArcSet), id(CumulatedArcSet))
			);
	}
	unit<uint32> WkoCluster: NrOfRows = 0
	{
		attribute<Eur>       Ki_A  := const(0[Eur], .);
		attribute<Eur>       Ki_B  := const(0[Eur], .);
		attribute<string>    Label := const('', .);
		attribute<rdc_meter> Point := const(Point(0.0, 0.0, rdc_meter), .);
	}
}
