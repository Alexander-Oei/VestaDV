//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op UtiliteitsComponenten  //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container UtilComponentOperaties
{
	template Select
	{
		// begin case parameters
		attribute<int32>           att (Geography/rdc_grids/m100);
		parameter<string>          utiliteit_lbl;
		parameter<units/yr_uint16> zichtjaar;
		// einde case parameters

		unit<uint32> results := Subset(att > int32(0) && IsDefined(Geography/rdc_grids/m100/PlanRegio_Rel))
			,	DialogType = "map"
			,	DialogData = "Point"
		{
			attribute<m2>                                 oppervlakte         : = value(att[nr_OrgEntity], m2);
			attribute<m2>                                 nrJoinedUnits       : = oppervlakte;

			attribute<Geography/rdc_meter>                Point               := Geography/rdc_grids/m100/Point       [nr_OrgEntity];
			attribute<Geography/RegioIndelingen/blok500m> blok500m_rel        := Geography/rdc_grids/m100/blok500m_rel[nr_OrgEntity];
			attribute<Geography/RegioIndelingen/blok1km>  blok1km_rel         := Geography/rdc_grids/m100/blok1km_rel [nr_OrgEntity];
			attribute<Geography/RegioIndelingen/blok2km>  blok2km_rel         := Geography/rdc_grids/m100/blok2km_rel [nr_OrgEntity];
			attribute<Classifications/UtilTypeNieuwbouw>  BebouwingsType      := const(rlookup(utiliteit_lbl, Classifications/UtilTypeNieuwbouw/label), .);
			attribute<Classifications/BouwJaar>           Bouwjaar            := const(classify(value(zichtjaar, Units/Yr) - value(0.5, units/yr),  classifications/bouwjaar/ClassBreak), .);
			attribute<float64>                            AandeelWarmteVraag  := const(1.0, .); // alle util Nieuwbouw is geschikt voor WarmteOpties
			
			container Gebied
			{
				attribute<float64> n      (..) := const(1.0, ..);
				attribute<float64> MEAN_x (..) := float64(PointCol(Point));
				attribute<float64> MEAN_y (..) := float64(PointRow(Point));
				attribute<float64> SSD_xx (..) := const(10000.0 / 12.0, ..);
				attribute<float64> SSD_xy (..) := const(    0.0 / 12.0, ..);
				attribute<float64> SSD_yy (..) := const(10000.0 / 12.0, ..);
			}

			container Criteria 
			{
			}
		}
	}

	template Unite
	{
		// begin case parameters
		container bron;
		// einde case parameters
		
		unit<uint32> results:= ='Union_Unit(' + asItemList('bron/' + Classifications/UtilTypeNieuwbouw/Name + '/results') + ')'
			,	DialogType ="Map"
			,	DialogData ="Point"
		{
			unit<uint8> BebouwingsTypeDomein := Classifications/UtilTypeNieuwbouw;
			
			attribute<string>              Code      := Label;
			attribute<string>              TypeName  := ='Union_Data(., ' + asItemList('const(' + Quote(BebouwingsTypeDomein/Name) + ',bron/' + BebouwingsTypeDomein/Label + '/results)') + ')';
			attribute<string>              Label     := TypeName+string(BouwJaar)+string(Point), DialogType = "LabelText";
			

			attribute<m2>                       nrJoinedUnits      := ='Union_Data(., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/nrJoinedUnits') + ')';
			attribute<Geography/rdc_meter>      Point              := ='Union_Data(., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/Point') + ')';
			attribute<RegioIndelingen/blok500m> blok500m_rel       := ='Union_Data(., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/blok500m_rel') + ')';
			attribute<RegioIndelingen/blok1km>  blok1km_rel        := ='Union_Data(., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/blok1km_rel') + ')';
			attribute<RegioIndelingen/blok2km>  blok2km_rel        := ='Union_Data(., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/blok2km_rel') + ')';

			attribute<BebouwingsTypeDomein>     BebouwingsType     := ='Union_Data(., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/BebouwingsType') + ')';
			attribute<Classifications/BouwJaar> BouwjaarOrg        := ='Union_Data(., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/Bouwjaar') + ')';
			attribute<Classifications/bouwjaar> bouwjaar           := max_elem(bouwjaarOrg, Classifications/BouwJaar/V/n2010);
			attribute<uint8>                    ModelObjectKey     := BebouwingsType * uint8(#Classifications/BouwJaar) + BouwJaar;
			attribute<nrAansl>                  nrAansluitingen_i  := const(1, ., nrAansl);
			attribute<nrWoningen>               nrWoonUnits_i      := nrJoinedUnits / 100[ m2 / nrWoningen];
			attribute<float64>                  AandeelWarmteVraag := ='Union_Data(., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/AandeelWarmteVraag') + ')';

			container Gebied
			{
				attribute<float64> n      (..) := ='Union_Data(.., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/Gebied/n'     ) + ')';
				attribute<float64> MEAN_x (..) := ='Union_Data(.., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/Gebied/MEAN_x') + ')';
				attribute<float64> MEAN_y (..) := ='Union_Data(.., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/Gebied/MEAN_y') + ')';
				attribute<float64> SSD_xx (..) := ='Union_Data(.., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/Gebied/SSD_xx') + ')';
				attribute<float64> SSD_xy (..) := ='Union_Data(.., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/Gebied/SSD_xy') + ')';
				attribute<float64> SSD_yy (..) := ='Union_Data(.., ' + asItemList('bron/' + BebouwingsTypeDomein/Name + '/results/Gebied/SSD_yy') + ')';
			}

			container Criteria
			{
			}
		}
	}
}