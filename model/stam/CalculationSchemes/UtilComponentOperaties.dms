//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op UtiliteitsComponenten  //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container UtilComponentOperaties
{
	template PerYear
	{
		// begin case parameters
		attribute<nrArbeidspl> BanenZichtjaar (Bebouwing/Utiliteit);
		// einde case parameters

		container results
		{
			unit<uint32> BebouwingsObject: 
				Expr       = "Bebouwing/Utiliteit",
				DialogType = "map",
				DialogData = "results/Point";

			unit<uint8>   KengetalTypeDomein := Classifications/NieuwbouwUtil;

			attribute<nrArbeidspl>                   NrJoinedUnits      (BebouwingsObject) :=BanenZichtjaar;

			attribute<nrAansl>                       nrAansluitingen    (BebouwingsObject) :=BebouwingsObject/nrAansluitingen;
			attribute<rdc_meter>                     point              (BebouwingsObject) :=BebouwingsObject/point;
			attribute<RegioIndelingen/PC4>           PC4_rel            (BebouwingsObject) :=BebouwingsObject/PC4_rel;
			attribute<RegioIndelingen/blok500m>      blok500m_rel       (BebouwingsObject) :=BebouwingsObject/blok500m_rel;
			attribute<RegioIndelingen/blok1km>       blok1km_rel        (BebouwingsObject) :=BebouwingsObject/blok1km_rel;
			attribute<RegioIndelingen/blok2km>       blok2km_rel        (BebouwingsObject) :=BebouwingsObject/blok2km_rel;

			attribute<Classifications/BouwJaar>      BouwJaar           (BebouwingsObject) :=BebouwingsObject/BouwJaar;
			attribute<KengetalTypeDomein>            KengetalType       (BebouwingsObject) :=BebouwingsObject/KengetalType;
			attribute<UInt8>                         SubType            (BebouwingsObject) :=BebouwingsObject/subtype;

			attribute<Float64>                       AandeelWarmteVraag (BebouwingsObject) :=BebouwingsObject/AandeelWarmteVraag;
			
			container Criteria := BebouwingsObject/Criteria;
		}
	}
	template Select
	{
		// begin case parameters
		attribute<int32>           att (Geography/rdc_grids/m100);
		parameter<String>          utiliteit_lbl;
		parameter<units/yr_uint16> zichtjaar;
		// einde case parameters

		container results
		{
			unit<uint32> BebouwingsObjectGeenPC4 := Subset(att > int32(0) && !IsDefined(Geography/rdc_grids/m100/PC4_rel) ),
				DialogType = "map",
				DialogData = "Point"
			{
				attribute<m2>                            oppervlakte  : Expr = "value(att[nr_OrgEntity], m2)";
				attribute<m2>                            nrJoinedUnits: Expr = "oppervlakte";
	
				attribute<Geography/rdc_meter>                Point := Geography/rdc_grids/m100/Point       [nr_OrgEntity];
//				attribute<Geography/RegioIndelingen/PC4>      PC4_rel: Expr = "Geography/rdc_grids/m100/PC4_rel     [BebouwingsObject/nr_OrgEntity]";
			}
			
			unit<uint32> BebouwingsObject := Subset(att > int32(0) && IsDefined(Geography/rdc_grids/m100/PC4_rel) ),
				DialogType = "map",
				DialogData = "results/Point";
			attribute<m2>                            oppervlakte  (BebouwingsObject): Expr = "value(att[BebouwingsObject/nr_OrgEntity], m2)";
			attribute<m2>                            nrJoinedUnits(BebouwingsObject): Expr = "oppervlakte";

			attribute<Geography/rdc_meter>                Point        (BebouwingsObject): Expr = "Geography/rdc_grids/m100/Point       [BebouwingsObject/nr_OrgEntity]";
			attribute<Geography/RegioIndelingen/PC4>      PC4_rel      (BebouwingsObject): Expr = "Geography/rdc_grids/m100/PC4_rel     [BebouwingsObject/nr_OrgEntity]";
			attribute<Geography/RegioIndelingen/blok500m> blok500m_rel (BebouwingsObject): Expr = "Geography/rdc_grids/m100/blok500m_rel[BebouwingsObject/nr_OrgEntity]";
			attribute<Geography/RegioIndelingen/blok1km>  blok1km_rel  (BebouwingsObject): Expr = "Geography/rdc_grids/m100/blok1km_rel [BebouwingsObject/nr_OrgEntity]";
			attribute<Geography/RegioIndelingen/blok2km>  blok2km_rel  (BebouwingsObject): Expr = "Geography/rdc_grids/m100/blok2km_rel [BebouwingsObject/nr_OrgEntity]";
			attribute<Classifications/NieuwbouwUtil>         KengetalType (BebouwingsObject): Expr = "const(rlookup(utiliteit_lbl, Classifications/NieuwbouwUtil/label), BebouwingsObject)";
			attribute<Classifications/BouwJaar>           Bouwjaar     (BebouwingsObject): Expr = "const(classify(value(zichtjaar, Units/Yr) - value(0.5, units/yr),  classifications/bouwjaar/ClassBreak), BebouwingsObject)";
			attribute<Float64>                       AandeelWarmteVraag(BebouwingsObject): Expr = "const(Float64(1.0), BebouwingsObject)"; // alle util Nieuwbouw is geschikt voor WarmteOpties
			
			container Gebied
			{
				attribute<Float64> n     (BebouwingsObject): Expr = "const(1.0, BebouwingsObject)";
				attribute<Float64> MEAN_x(BebouwingsObject): Expr = "Float64(PointCol(Point))";
				attribute<Float64> MEAN_y(BebouwingsObject): Expr = "Float64(PointRow(Point))";
				attribute<Float64> SSD_xx(BebouwingsObject): Expr = "const(10000.0 / 12.0, BebouwingsObject)";
				attribute<Float64> SSD_xy(BebouwingsObject): Expr = "const(    0.0 / 12.0, BebouwingsObject)";
				attribute<Float64> SSD_yy(BebouwingsObject): Expr = "const(10000.0 / 12.0, BebouwingsObject)";
			}
			
			container Criteria 
			{
			}
		}
	}
	template Unite
	{
		// begin case parameters
		container bron;
		// einde case parameters
		
		container results
		{
			unit<uint32> BebouwingsObject := ='Union_Unit(' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/BebouwingsObject') + ')'
				,	DialogType ="Map"
				,	DialogData ="PointCopy"
			{   // TODO, FIX HACK for local point by looking up DialogData from locus of reference
				attribute<Geography/rdc_meter> PointCopy(BebouwingsObject): Expr = "point";
				attribute<string> Code(BebouwingsObject) := Label;
				attribute<String> TypeName :Expr= "='Union_Data(., ' + asItemList('const(' + Quote(Classifications/NieuwbouwUtil/Name) + ',bron/' + Classifications/NieuwbouwUtil/Label + '/results/BebouwingsObject)') + ')'";
				attribute<String> Label := TypeName+String(BouwJaar)+String(Point), DialogType = "LabelText";
			}
			unit<uint8> KengetalTypeDomein := Classifications/NieuwbouwUtil;
			
			attribute<m2>                            nrJoinedUnits  (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/nrJoinedUnits') + ')'";
			attribute<Geography/rdc_meter>           Point          (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/Point') + ')'";
			attribute<RegioIndelingen/PC4>           PC4_rel        (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/PC4_rel') + ')'";
			attribute<RegioIndelingen/blok500m>      blok500m_rel   (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/blok500m_rel') + ')'";
			attribute<RegioIndelingen/blok1km>       blok1km_rel    (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/blok1km_rel') + ')'";
			attribute<RegioIndelingen/blok2km>       blok2km_rel    (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/blok2km_rel') + ')'";
			
			attribute<KengetalTypeDomein>            KengetalType   (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/KengetalType') + ')'";
			attribute<Classifications/BouwJaar>      BouwjaarOrg    (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/Bouwjaar') + ')'";
			attribute<Classifications/bouwjaar>      bouwjaar       (BebouwingsObject): Expr = "max_elem(bouwjaarOrg, Classifications/BouwJaar/n2010)";
			attribute<UInt8>                         SubType        (BebouwingsObject): Expr = "KengetalType * UInt8(#Classifications/BouwJaar) + BouwJaar";
			attribute<nrAansl>                       nrAansluitingen(BebouwingsObject): Expr = "const(1, BebouwingsObject, nrAansl)"; 
			attribute<nrWoningen>                    nrWoonUnits    (BebouwingsObject) := nrJoinedUnits / 100[ m2 / nrWoningen];
			attribute<Float64>                    AandeelWarmteVraag(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/AandeelWarmteVraag') + ')'";
			
			container Gebied
			{
				attribute<Float64 > n    (BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/Gebied/n'     ) + ')'";
				attribute<Float64> MEAN_x(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/Gebied/MEAN_x') + ')'";
				attribute<Float64> MEAN_y(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/Gebied/MEAN_y') + ')'";
				attribute<Float64> SSD_xx(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/Gebied/SSD_xx') + ')'";
				attribute<Float64> SSD_xy(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/Gebied/SSD_xy') + ')'";
				attribute<Float64> SSD_yy(BebouwingsObject): Expr = "='Union_Data(BebouwingsObject, ' + asItemList('bron/' + Classifications/NieuwbouwUtil/Name + '/results/Gebied/SSD_yy') + ')'";
			}
			
			container Criteria 
			{
			}
		}
	}
}