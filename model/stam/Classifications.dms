//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile worden de klassificaties geconfigureerd.              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Classifications: Using = "Units", KeepData = "True" 
{
	unit<uint8> WoningtypeGeo: nrofrows = 6 // zie ook: HouseTypeCombi, dat oook in RSL gebruikt wordt.
	{
		attribute<string> name : ['geen_woonpand','vrijstaand','twee_onder_1_kap','hoekwoning','tussenwoning','meergezinspand'];
		attribute<string> label := name, DialogType = "LabelText";

		attribute<uint32> BrushColor: DialogType = "BrushColor",
		[
			 rgb(255,255,255)
			,rgb( 26,152, 80)
			,rgb(166,217,106)
			,rgb(100,100,255)
			,rgb(255,255,  0)
			,rgb(255, 50, 50)
		];
		attribute<uint32> PenColor := rgb((bitand(BrushColor / 16384, 255) / 2), (bitand(BrushColor / 256, 255) / 2), (bitand(BrushColor, 255) / 2))
		,	DialogType = "PenColor";

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> WoningtypeGeoHoogte : nrofrows = 7
	{
		attribute<string> label:                ['geen woonpand','vrijstaand','2 onder 1 kap'   ,'rijwoning hoek','rijwoning tussen','meergezins: laag en midden','meergezins: hoog'] , DialogType = "LabelText";
		attribute<string> name :                ['geen_woonpand','vrijstaand','twee_onder_1_kap','hoekwoning'    ,'tussenwoning'    ,'meergezinspand_laag_midden','meergezinspand_hoog'];
		attribute<string> resterendFactorName:  [     'onbekend','vrijstaand', 'TweeOnderEenKap','Rijtjeshuis'   ,'Rijtjeshuis'     , 'FlatTot4'                 ,'Flat5'];

		attribute<bool>   IsMeergezins:         [ false, false, false, false, false, true, true ];
		attribute<Units/Bouwlaag> StapelFactor: [ 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 6.0 ];

		attribute<uint32> BrushColor: DialogType = "BrushColor",
		[
			 rgb(255,255,255)
			,rgb( 26,152, 80)
			,rgb(166,217,106)
			,rgb(100,100,255)
			,rgb(255,255,  0)
			,rgb(255, 50, 50)
			,rgb(255,  0,  0)
		];
		attribute<uint32> PenColor   := rgb((bitand(BrushColor / 16384, 255) / 2), (bitand(BrushColor / 256, 255) / 2), (bitand(BrushColor, 255) / 2))
		,	DialogType = "PenColor";
		attribute<string> excel_code := label;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> woningtype2006: nrofrows = 15
	{
		attribute<bool>  IsMeergezins: [ false, false, false, false, true, true, true, true, false, true, false, true, false, false, false ];
		attribute<string> Label := excel_code, DialogType = "LabelText";

		attribute<string> name: [ 
			'onbekend', 'vrijstaand', 'TweeOnderEenKap', 
			'rijtjeshuis', 'FlatTot4', 'Flat5',
			'EtageWoning', 'Appartement', 'Herenhuis',
			'BejaardenWoning', 'Boerderij', 'StudentenWoning',
			'Woonboot', 'Woonwagen', 'Divers'
		];
		attribute<Units/Bouwlaag> StapelFactor: [ 1.0, 1.0, 1.0, 1.0, 2.0, 6.0, 3.0, 3.0, 3.0, 2.0, 1.0, 6.0, 1.0, 1.0, 1.0 ];
		
		attribute<string> excel_code: [ 
			'onbekend', 'vrijstaand/bungalows', 'twee onder een kap', 
			'rijtjeshuizen/eengezins', 'flats 4 of minder verdiepingen', 'flats meer dan 4 verdiepingen',
			'etagewoning/maisonnette', 'etage/flats grachtenpand', 'herenhuis grachtenpand',
			'zelfstandige bejaardenwoning', 'boerderij/tuinderij', 'studentenwoning/flat',
			'woonboten', 'woonwagens', 'divers'
		];
		attribute<string> wlo_FileName: [
			'onbekend', 'vrijstaand_bungalows', 'twee_onder_een_kap',
			'rijtjeshuizen_eengezins','flats_tot_vijf', 'flats_vijf_of_meer',
			'etagewoning_maisonnette', 'etageflats_grachtenpand', 'herenhuis_grachtenpand',
			'bejaardenwoning', 'boerderij_tuinderij', 'studentenwoning_flat',
			'woonboten', 'woonwagens', 'divers'
		];
		attribute<string> resterendFactorName := name;

		attribute<int16>   fontcharacter: DialogType = "SymbolIndex",= WoningType2008/fontcharacter[wt2008_rel];
		parameter<Float64> SymbolSize:    DialogType = "SymbolSize" ,= 24.0;
		attribute<string>  fo_code_2008 := WoningType2008/fo_code[wt2008_rel];

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	unit<uint8> woningtype := WoningType2006;

	unit<uint8> HouseTypeCombi: NrOfRows = 9 // = woonpand type en tevens type vow (verblijfsobject met woonfunctie)
	{
		attribute<string> label: ['nill', 'SingleFam free','SingleFam semi attached','SingleFam corner','SingleFam terraced','MultiFam Low','MultiFam Med','MultiFam High','Else']
		,  DialogType = "LabelText";
		attribute<string> name: ['', 'Free','SemiAttached','Corner','Terraced','MF_Low','MF_Med','MF_High',''];
		attribute<string> allnames: ['nill', 'Free','SemiAttached','Corner','Terraced','MF_Low','MF_Med','MF_High','else'];
		attribute<uint32> BrushColor: [
			rgb(127,127,127), // nill
			rgb(128,255,128),rgb(128, 255,255),rgb(128,128,255),rgb(255,255,128), // HouseTypeSingleFam
			rgb(224,0,0),rgb(160,0,0),rgb(96,0,0), // MF_Low = avg(0..1,1..4); MF_Med = >4 light; MF_High = >4 dark.
			rgb(127,0,0)
		]
		,  DialogType = "BrushColor";
		
		attribute<bool> IsMultiFam: [ false, false, false, false, false, true, true, true, false ];
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)',  void, .);
	}

	unit<uint8> WoningtypeBouwjaar := combine_uint8(Woningtype, Bouwjaar)
	{
		attribute<string> LabelWoningtype := woningtype/Label[nr_1];
		attribute<string> LabelBouwjaar   := bouwjaar/Label[nr_2];
		attribute<string> Label           := LabelWoningtype + '_' + LabelBouwjaar;
	}

	unit<uint8> WoningtypeBouwjaarBAG := combine_uint8(WoningtypeGeoHoogte, BouwjaarBag)
	{
		attribute<string> LabelWoningtype := WoningtypeGeoHoogte/Label[nr_1];
		attribute<string> LabelBouwjaar   := BouwjaarBag/Label[nr_2];
		attribute<string> Label           := LabelWoningtype + '_' + LabelBouwjaar;
	}

	// let op: de set van mogelijke RapGroeperingen is afhankelijk van de gekozen BebouwingsComponenten.
	unit<uint8> BestaandeWoningRapGroep: nrofrows = 16 // Eigendom (4) en inkomensklasse (8) zijn nu niet beschikbaar voor woningBAG
	{
		attribute<string> Label: DialogType = "LabelText",
		[
			'0=geen onderverdeling',
			'1=woningtype',
			'2=bouwkjaarklasse',
			'3=woningtype & bouwjaarklasse',
			'4=Eigendom(koop/huur/onbekend)',
			'', '', '', 
			'8=inkomensklasse(obv: ???)',
			'', '', '', '', '', '', ''
		];
		attribute<string> ExportLabel: // GEEN SPATIES of SLASHES E.D. GEBRUIKEN
		[
			'geen_onderverdeling',
			'woningtype',
			'bouwkjaarklasse',
			'woningtype_bouwjaarklasse',
			'Eigendom',
			'', '', '', 
			'inkomensklasse',
			'', '', '', '', '', '', ''
		];
		attribute<string> ClassRef:
		[
			'Model/Classifications/GeenOnderverdeling',
			'AllocatieResultaat/BestaandeWoning/BebouwingsObject/BebouwingsTypeDomein',
			'AllocatieResultaat/BestaandeWoning/BebouwingsObject/BouwjaarDomein',
			'AllocatieResultaat/BestaandeWoning/BebouwingsObject/ModelObjectKeyDomein',
			'Model/Classifications/Eigendom_Woning',
			'', '', '', 
			'Model/Classifications/InkomensKlasse',
			'', '', '', '', '', '', ''
		];
		attribute<string> AttrRef:
		[
			'GeenOnderverdeling',
			'BebouwingsType',
			'Bouwjaar',
			'ModelObjectKey',
			'BebouwingsObject/Eigendom',
			'', '', '', 
			'BebouwingsObject/Inkomen',
			'', '', '', '', '', '', ''
		];
	}

	unit<uint8> UtilRapGroep: nrofrows = 4
	{
		attribute<string> Label: DialogType = "LabelText",
		[
			"undefined",
			"1: Ziekenhuis etc",
			"minder dan 11 werknememers en niet 1",
			"11 of meer werknemers en niet 1"
		];
	}

	unit<uint8> bouwjaar: nrofrows = 16
	{
		attribute<units/Yr> ClassBreak: [ null, -9998, 1800, 1900, 1920, 1940, 1960, 1970, 1980, 1990, 1995, 2000, 2010, 2020, 2030, 2040 ];
		
		parameter<.> onbekend: Expr = "value( 0,. )"; 
		parameter<.> v1800:    Expr = "value( 1,. )"; 
		parameter<.> v1900:    Expr = "value( 2,. )"; 
		parameter<.> v1920:    Expr = "value( 3,. )"; 
		parameter<.> v1940:    Expr = "value( 4,. )"; 
		parameter<.> v1960:    Expr = "value( 5,. )"; 
		parameter<.> v1970:    Expr = "value( 6,. )"; 
		parameter<.> v1980:    Expr = "value( 7,. )"; 
		parameter<.> v1990:    Expr = "value( 8,. )"; 
		parameter<.> v1995:    Expr = "value( 9,. )"; 
		parameter<.> v2000:    Expr = "value(10,. )"; 
		parameter<.> v2010:    Expr = "value(11,. )"; 
		parameter<.> divers:   Expr = "value(12,. )"; 
		parameter<.> n2010:    Expr = "value(12,. )"; 
		parameter<.> n2020:    Expr = "value(13,. )"; 
		parameter<.> n2030:    Expr = "value(14,. )"; 
		parameter<.> n2040:    Expr = "value(15,. )"; 

		attribute<string> Excel_code: 
		[
			"onbekend",
			"voor 1800",
			"1800<=1900",
			"1900<=1920",
			"1920<=1940",
			"1940<=1960",
			"1960<=1970",
			"1970<=1980",
			"1980<=1990",
			"1990<=1995",
			"1995<=2000",
			"2000<=2010",
			"2010<=2020",
			"2020<=2030",
			"2030<=2040",
			"2040<=2050"
		];
		attribute<string> Label:
		[
			  'onbekend',
			  'voor 1800 ',
			  'tussen 1800 en 1899 ',
			  'tussen 1900 en 1919 ',
			  'tussen 1920 en 1939 ',
			  'tussen 1940 en 1959 ',
			  'tussen 1960 en 1969 ',
			  'tussen 1970 en 1979 ',
			  'tussen 1980 en 1989 ',
			  'tussen 1990 en 1994 ',
			  'tussen 1995 en 1999 ',
			  'later dan 2000 ',
//			  'loopt erg uiteen',
			  'vanaf 2010 ',
			  'vanaf 2020 ',
			  'vanaf 2030 ',
			  'vanaf 2040 '
		];
		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
			[	rgb(128,128,128)
			,	rgb(255,  0,  0)
			,	rgb(255, 36,  0)
			,	rgb(255, 72,  0)
			,	rgb(255,109,  0)
			,	rgb(255,146,  0)
			,	rgb(255,182,  0)
			,	rgb(255,219,  0)
			,	rgb(255,255,  0)
			,	rgb(219,219, 15)
			,	rgb(182,182, 29)
			,	rgb(128,128,128)
			,	rgb(109,109, 58)
			,	rgb( 72, 72, 73)
			,	rgb( 36, 36, 87)
			,	rgb(  0,  0,100)
			];
	}
	unit<uint8> BouwjaarBag: nrofrows = 6
	{
		attribute<units/Yr> ClassBreak: [ -9998, 1946, 1965, 1975, 1992, 2006];
		
		parameter<.> v1946 := value( 0,. ); 
		parameter<.> v1965 := value( 1,. ); 
		parameter<.> v1974 := value( 2,. ); 
		parameter<.> v1991 := value( 3,. ); 
		parameter<.> v2005 := value( 4,. ); 
		parameter<.> v2014 := value( 5,. ); 
		parameter<.> onbekend := v1946;

		attribute<string> Excel_code: 
		[
			'voor 1946',
			'1946 - 1964',
			'1965 - 1974',
			'1975 - 1991',
			'1992 - 2005',
			'2006 - 2014'
		];
		attribute<string> Label:
		[
			'voor 1946 ',
			'tussen 1946 en 1965 ',
			'tussen 1965 en 1974 ',
			'tussen 1975 en 1991 ',
			'tussen 1992 en 2005 ',
			'tussen 2006 en 2014 '
		];
		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
			[	rgb(255,  0,  0)
			,	rgb(255,128,  0)
			,	rgb(255,255,  0)
			,	rgb(128,128,128)
			,	rgb( 72, 72, 73)
			,	rgb(  0,  0,100)
			];
	}
	unit<uint8> BouwjaarUtilBag: nrofrows = 6
	{
		attribute<units/Yr> ClassBreak: [0, 1920, 1975, 1990, 1995, null];
		
		parameter<.> v1920:    Expr = "value( 0,. )"; 
		parameter<.> v1975:    Expr = "value( 1,. )"; 
		parameter<.> v1990:    Expr = "value( 2,. )"; 
		parameter<.> v1995:    Expr = "value( 3,. )"; 
		parameter<.> n1995:    Expr = "value( 4,. )"; 
		parameter<.> onbekend: Expr = "value( 5,. )"; 

		attribute<string> Excel_code: 
		[
			'0<=1920',
			'1920<=1975',
			'1975<=1990',
			'1990<=1995',
			'1995<=2015',
			'onbekend'
		];
		attribute<string> Label:
		[
			'voor 1920',
			'tussen 1920 en 1975',
			'tussen 1975 en 1990',
			'tussen 1990 en 1995',
			'na 1995',
			'onbekend'

		];
		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
			[
				rgb(255,  0,  0)
			,	rgb(255,128,  0)
			,	rgb(255,255,  0)
			,	rgb(128,128,128)
			,	rgb(  0,  0,100)
			,	rgb(128,128,128)
			];
	}
	unit<uint8> eigendom_woning: nrofrows = 7
	{
		attribute<string> label: DialogType = "LabelText",
		[
				'onbekend'
			,	'allemaal huur'
			,	'grootste deel huur'
			,	'evenveel huur en koop'
			,	'grootste deel koop'
			,	'allemaal koop'
			,	'divers'
		];
		attribute<uint32> SymbolColor: DialogType = "SymbolColor",
		[
				rgb(128,128,128)
			,	rgb(255,  0,  0)
			,	rgb(192, 64,  0)
			,	rgb(128,128,  0)
			,	rgb( 64,182,  0)
			,	rgb(  0,255,  0)
			,	rgb(128,128,128)
		];

		parameter<eigendom_woning> AllemaalHuur:     [ 1 ];
		parameter<eigendom_woning> GrootsteDeelHuur: [ 2 ];
		parameter<eigendom_woning> EvenveelHuurKoop: [ 3 ];
		parameter<eigendom_woning> GrootsteDeelKoop: [ 4 ];
		parameter<eigendom_woning> AllemaalKoop:     [ 5 ];
	}
	unit<uint8> gebruiksvorm: nrofrows = 4
	{
		attribute<string> label:
		[
			'warm water',
			'koude',
			'elektrische apparatuur',
			'ruimte verwarming'
		];
		attribute<string> Name:
		[
			'WarmWater',
			'Koude',
			'ElektrischeApparatuur',
			'RuimteVerwarming'
		];
		parameter<gebruiksvorm> WarmWater:             [ 0 ];
		parameter<gebruiksvorm> Koude:                 [ 1 ];
		parameter<gebruiksvorm> ElektrischeApparatuur: [ 2 ];
		parameter<gebruiksvorm> RuimteVerwarming:      [ 3 ];
	}
	unit<uint8> gebruiksgrootteklasse: nrofrows = 5
	{
		attribute<string> code  : [ 'TL', 'KG', 'KMG', 'MMG', 'GG' ];
		attribute<string> label : [ 'Teruglevering', 'Klein Gebruik', 'Klein Middelgroot Gebruik', 'Midden Middelgroot Gebruik', 'Groot middelgroot en groot gebruik' ];
		attribute<string> name : [ 'Teruglevering', 'KleinGebruik', 'KleinMiddelGebruik', 'MiddelMiddelGebruik', 'GrootGebruik' ];
		attribute<m3_yr>   gas_break_m3 : [-1e+10, 0,  5000, 170000,  1000000 ];
		attribute<kwh_yr> elek_break_kwh: [-1e+10, 0, 10000,  50000, 10000000 ];
		
		attribute<GJ_yr> gas_break  := gas_break_m3  * UserInput/FysiekeConstanten/GasEnergie;
		attribute<GJ_yr> elek_break := elek_break_kwh [GJ_yr];
	}
	unit<uint8> InkomensKlasse: nrofrows = 7
	{
		attribute<string> Label: DialogType = "LabelText",
		[
			'0 Onbekend'
		,	'1 Hoog'
		,	'2 BovenModaal'
		,	'3 Modaal'
		,	'4 Laag'
		,	'5 Minimum'
		,	'6 Onbekend'
		];
		attribute<bool> KanBesparen: [ false, true, true, true, false, false, false ];
	}
	
	unit<uint8> BebouwingsComponent: nrofrows = 6
	{
		attribute<string> Name:
		[
			'BestaandeWoning'
		,	'NieuwbouwWoning'
		,	'BestaandeUtil'
		,	'NieuwbouwUtil'
		,	'BestaandeGlTb'
		,	'NieuwbouwGlTb'
		];
		attribute<string> Code := string(ID(.));

		attribute<string> Label: Expr = "Name", DialogType = "LabelText";
		
		attribute<string> ModelName: [
				'ModelBagWoning'
			,	'ModelWoningNieuwbouw'
			,	'ModelBagUtil'
			,	'ModelUtilNieuwbouw'
			,	'ModelGltb2010'
			,	'ModelGlTbNieuwbouw'
		];
		container V := for_each_nedv(name, string(ID(.))+'[..]', void, .);
		parameter<.> Woning      : [ 0 ];
		parameter<.> NieuwbouwWoning: [ 1 ];
		parameter<.> Utiliteit   : [ 2 ];
		parameter<.> NieuwbouwUtil  : [ 3 ];
		parameter<.> Glastuinbouw: [ 4 ];
		parameter<.> NieuwbouwGlTb  : [ 5 ];

		attribute<bool> IsBestaand:     [ true,  false,  true, false,  true, false ];
		attribute<bool> IsGlastuinbouw: [ false, false, false, false,  true,  true ];
		attribute<bool> IsNieuwbouw := !IsBestaand;
		attribute<bool> DraagtBTW:  [ true,  true, false, false, false, false ];
		attribute<bool> KanWKO   := not(IsGlastuinbouw);
		attribute<bool> Warmtewet:  [ true, false, false, false, false, false ]; // prijsberekening warmte volgens ACM berekening ?
		attribute<BebouwingsComponent> Warmtewet_BC_rel: [ 0, 0, 2, 2, 4, 4 ]; /// warmtewet prijs voor Nieuwbouw obv bestaande objecten

		attribute<string> BronExpr: [
				'Bebouwing/BagWoning',    'BebouwingsComponenten/Nieuwbouw/woning/@BRON@/@JAAR@/results',
				'Bebouwing/BagUtil',      'BebouwingsComponenten/Nieuwbouw/Utiliteit/@BRON@/@JAAR@/results',
				'Bebouwing/Glastuinbouw', 'BebouwingsComponenten/Glastuinbouw/@BRON@/@JAAR@/Nieuwbouw'
			];
		
		attribute<string> NcwRefBase: [
			'bw', 'nw', 
			'bu', 'nu',
			'bt', 'nt'
		];
		attribute<string>       NameBestaand:         Expr = "IsBestaand ? Name : ''";
		attribute<string>       NameNieuw:            Expr = "IsBestaand ? '' : Name";
	}
	unit<uint8> WkoComponent := Subset(BebouwingsComponent/KanWKO)
	{
		attribute<string> Name := BebouwingsComponent/Name[nr_OrgEntity];
		attribute<string> Code := BebouwingsComponent/Code[nr_OrgEntity];
	}
	unit<uint8> GasnetComponent := WkoComponent;

	unit<uint2> EnergieDrager // : nrofrows = 3
	{
		attribute<string> label:
		[
			'AardGas',
			'Warmte',
			'Elektriciteit',
			'onbekend'
		];
		attribute<string> Name: Expr = "Label";
		parameter<EnergieDrager> AardGas:       [ 0 ];
		parameter<EnergieDrager> Warmte:        [ 1 ]; // nog toe te delen aan alles behalve Elektriciteit
		parameter<EnergieDrager> Elektriciteit: [ 2 ];
	}

	unit<uint8> NieuwbouwUtil: nrofrows = 9
	{
//		attribute<utiliteit_EK> ExternalKey:     [1,2,3,4,5,6,7,8,9], isHidden = "True";
		attribute<string>       Label:           ['kantoor', 'winkel', 'groothandel', 'autohandel_reperatie','verzorging_verpleging', 'ziekenhuis', 'onderwijs', 'horeca' , 'overig'], DialogType = "LabelText";
		attribute<string>       Label_key:       ['kantoren', 'winkels', 'Groothandel', 'Autohandel en reparatie', 'Verpleging en verzorging', 'Ziekenhuizen', 'Onderwijs','Horeca','Overige dienstverlening'], isHidden = "True";
		attribute<string>       filename_Nieuwbouw: ['kantoren', 'winkels', 'groothandel', 'autohandel', 'verpleging', 'ziekenhuis', 'onderwijs','horeca','overig'], isHidden = "True";
		attribute<string>       wlo_filename_Nieuwbouw: ['kantoor', 'winkel', '', '', 'verpleging_verzorging', '', 'onderwijs','horeca','overig_dienstverlening'], isHidden = "True";
		attribute<string>       Excel_Code:      Expr = "Label_key", isHidden = "True";
		attribute<int16>        SymbolIndex:     [41,54,241,49,67,213,107,246,171], DialogType = "SymbolIndex", isHidden = "True";
		attribute<string>       Name:            Expr = "Label", isHidden = "True";
		attribute<string>       resterendFactorName := name;
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	unit<uint8> utiliteitBAG: nrofrows = 10
	{
		attribute<string>       Label            := Label_key == 'Overig' ? 'overige_gebruiks' : Label_key, DialogType = "LabelText";
		attribute<string>       Label_key:       ['Kantoor', 'Winkel', 'Gezondheidszorg', 'Logies', 'Onderwijs', 'Industrie','Bijeenkomst','Sport','Overig','Cel'];
		attribute<string>       Excel_Code := Label_key;
		attribute<int16>        SymbolIndex:     [41,54,241,49,67,213,107,246,171,150], DialogType = "SymbolIndex";
		attribute<string>       Name := Label;
		attribute<string>       resterendFactorName: ['kantoor', 'winkel', 'verzorging_verpleging', 'horeca', 'onderwijs', 'overig', 'overig', 'overig', 'overig', 'overig'];
		attribute<NieuwbouwUtil>   utiliteit_rel := rlookup(resterendFactorName, NieuwbouwUtil/Label);
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint8> GLTB: nrofrows = 13
	{
		attribute<string> Label: Expr = "csv_output", DialogType = "LabelText";
		attribute<string> Name := Label;
		attribute<string> Excel_Code: 
		[
				'onbekend',
				'Glastuinbouw, groente, verwarmd',
				'Glastuinbouw, groente, onverwarmd',
				'Glastuinbouw, groente, belicht',
				'Glastuinbouw, groente, onbelicht',
				'Glastuinbouw, bloemen, verwarmd',
				'Glastuinbouw, bloemen, onverwarmd',
				'Glastuinbouw, bloemen, belicht',
				'Glastuinbouw, bloemen, onbelicht',
				'Glastuinbouw, overig, verwarmd',
				'Glastuinbouw, overig, onverwarmd',
				'Glastuinbouw, overig, belicht',
				'Glastuinbouw, overig, onbelicht'
		];
		attribute<string> csv_output: // no comma's in output to csv as Excel will treat them as seperate columns
			expr = "replace(Excel_Code, ', ', '_')";
	}

	unit<uint8> energielabel: nrofrows = 9
	{
		attribute<string> Name:  ['eWP', 'EWV', 'Aplus', 'LabelB', 'LabelC', 'LabelD', 'LabelE', 'LabelF', 'LabelG'];
		attribute<string> Label: DialogType = "LabelText",  ['eWP', 'EWV', 'A+', 'B', 'C', 'D', 'E', 'F', 'G'];
		attribute<UInt32> Color: DialogType = "BrushColor",
			[	
				rgb(000,255,255)
			,	rgb(000,255,000)
			,	rgb(053,152,000)
			,	rgb(114,167,017)
			,	rgb(176,196,001)
			,	rgb(247,230,000)
			,	rgb(251,182,001)
			,	rgb(249,097,014)
			,	rgb(249,026,031)
			];
		attribute<UInt32> SymbColor: DialogType = "SymbolColor", Expr = "Color";
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint8> LabelSprong: nrofrows = 14
	{
		attribute<string> Label: DialogType = "LabelText",  Expr = "code + ': '+Descr";
		attribute<string> Descr:
		[
			'Van Huidig (E..G) Naar Tussenlabel(C..E)',
			'Van Huidig (C..G) Naar B',
			'Van Huidig( A..G) Naar A+',
			'Van Tussenlabel naar B',
			'Van Tussenlabel naar A+',
			'Van B naar A+',
			
			'Van Huidig(C..G) Naar A+ met eWP',
			'Van Tussenlabel naar A+ met eWP',
			'Van B naar A+ met eWP',
			'Van A+ naar A+ met eWP',
			
			'Van Huidig(C..G) Naar A+ met EWV',
			'Van Tussenlabel naar A+ met EWV',
			'Van B naar A+ met EWV',
			'Van A+ naar A+ met EWV'
		];
		
		attribute<string> code:  DialogType = "LabelText",  
		[
			'S_H_T', 'S_H_B',  'S_H_AP', 
			'S_T_B', 'S_T_AP', 'S_B_AP', 
			
			'S_H_eWP', 'S_T_eWP', 'S_B_eWP', 'S_AP_eWP',
			'S_H_EWV', 'S_T_EWV', 'S_B_EWV', 'S_AP_EWV'
		];
		attribute<string> code_base: // sprongen zoals gegeven met modelwoning
		[
			'S_H_T', 'S_H_B',  'S_H_AP', 
			'S_T_B', 'S_T_AP', 'S_B_AP', 
			
			'S_H_AP', 'S_T_AP', 'S_B_AP', null, // excl LTAS + eWP
			'S_H_AP', 'S_T_AP', 'S_B_AP', null  // excl EWV
		];
		attribute<string> code_xtra: // sprongen bovenop zoals gegeven met modelwoning
		[
			null, null, null, null, null, null, 
			
			'eWP', 'eWP', 'eWP', 'eWP',
			'EWV', 'EWV', 'EWV', 'EWV'
		];
		
		attribute<bool> NaWijziging: [
			false, false, false, true, true, true,
			false, true, true, true, 
			false, true, true, true
		];
	}
	unit<uint32> LabelChange: Expr = "Combine(energielabel, LabelSprong)"
	{
		attribute<string> Label: DialogType = "LabelText", Expr = "LabelSprong/code[nr_2]+': van ' + energieLabel/Label[nr_1] + ' naar ' + energieLabel/Label[Label_na]";
		
		attribute<energielabel> Label_na: [ 
		//      org   org   org   new   new   new   org    new   new   new    org    new   new   new
		//	EG_T  CG_B  BG_AP T_B   T_AP  B_AP  AG_eWP T_eWP B_eWP AP_eWP AG_EWV T_EWV B_EWV AP_EWV'
			null, null, null, null, null, null, null,  null, null, null,  null,  null, null, null, // sprongen vanaf eWP (0)
			null, null, null, null, null, null, null,  null, null, null,  null,  null, null, null, // sprongen vanaf EWV (1)
			null, null, null, null, null, null, 0,     null, null, 0,     1,     null, null, 1,    // sprongen vanaf A+  (2)
//NOT			null, null, null, null, null, 2   , null,  null, 0,    null,  null,  null, 1,    null, // sprongen vanaf B   (3)
			null, null, 2,    null, null, 2   , 0,     null, 0,    null,  1,     null, 1,    null, // sprongen vanaf B   (3) 
			null, 3,    2,    3,    2,    null, 0,     0,    null, null,  1,     1,    null, null, // sprongen vanaf C (4, evt als zijnde Tussenlabel)
			null, 3,    2,    3,    2,    null, 0,     0,    null, null,  1,     1,    null, null, // sprongen vanaf D (5, evt als zijnde Tussenlabel)
			4,    3,    2,    3,    2,    null, 0,     0,    null, null,  1,     1,    null, null, // sprongen vanaf E (6, evt als zijnde Tussenlabel)
			5,    3,    2,    null, null ,null, 0,     null, null, null,  1,     null, null, null, // sprongen vanaf F (7)
			6,    3,    2,    null, null ,null, 0,     null, null, null,  1,     null, null, null  // sprongen vanaf G (8)
		];
	}
	unit<uint32> LabelReclassTable: nrofrows = 33 // alleen voorzover CurrValue anders moet zijn dan ModelValue
	{
		attribute<EnergieLabel>  ModelValue: [ 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 2, 2 ];
		attribute<EnergieLabel>  CalcValue : [ 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 3, 2, 1, 0, 2, 1, 0, 1, 0 ];
		attribute<Uint8> code: Expr = "ModelValue *  UInt8(#EnergieLabel) + CalcValue";
		
		attribute<LabelSprong>   CurrSprong: [ 0, 0, 1, 1, 1, 2, 2, 0, 1, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2 ];
		attribute<EnergieLabel>  CurrLabel : [ 6, 6, 3, 3, 2, 2, 2, 5, 3, 3, 2, 2, 2, 4, 4, 3, 2, 2, 2, 3, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2 ];
	}
	
	unit<uint8> AanbodOptie: nrofrows = 5 // volgorde niet hier instellen maar in ScenarioSpecs/VestaRunOpties/VoorkEuren/BaseLine/WarmteOpties
	{
		attribute<string> Name:
		[
			'RestWarmte' 
		,	'GeoThermie'
		,	'WijkWKK'
		,	'BioWKK'
		,	'WKO'
		];
		attribute<string> code := string(id(.));
		attribute<bool> IsPlanRegioOptie: [ true, true, true, true, false]; //, false ];
		attribute<string> label: DialogType = "LabelText", Expr = "Name";
		attribute<UInt32> Color: DialogType = "BrushColor",
			[	rgb(150,  0,  0)
			,	rgb(  0,  0,150)
			,	rgb(128,128,  0)
			,	rgb(  0,255,128)
			,	rgb(  0,150,  0)
			];
		attribute<UInt32> SymbolColor: DialogType = "SymbolColor", Expr = "Color";
		
		container V := for_each_nedv(name, 'value('+string(ID(.))+', ..)', void, .);
	}
	unit<uint8> PlanRegioOptie_uint8 := subset(AanbodOptie/IsPlanRegioOptie) {
		attribute<string> code := AanbodOptie/code[nr_OrgEntity];
		attribute<string> name := AanbodOptie/name[nr_OrgEntity];
	}
	unit<uint8> CluseterOptie_uint8 := subset(!AanbodOptie/IsPlanRegioOptie) {
		attribute<string> code := AanbodOptie/code[nr_OrgEntity];
		attribute<string> name := AanbodOptie/name[nr_OrgEntity];
	}
	unit<uint32> PlanRegioOptie := range(uint32, 0, #PlanRegioOptie_uint8) {
		attribute<string> code := union_data(PlanRegioOptie, PlanRegioOptie_uint8/code);
		attribute<string> name := union_data(PlanRegioOptie, PlanRegioOptie_uint8/name);
	}
	unit<uint32> ClusterOptie := range(uint32, 0, #CluseterOptie_uint8) {
		attribute<string> code := union_data(ClusterOptie, CluseterOptie_uint8/code);
		attribute<string> name := union_data(ClusterOptie, CluseterOptie_uint8/name);
	}
	
	unit<uint8> zichtjaar: nrofrows = 5
	{
		attribute<units/yr_uint16> Jaar: [2010, 2020, 2030, 2040, 2050 ];
		attribute<bool>       HasMutations := Jaar > 2010[units/yr_uint16];
		attribute<string>     Label := string(Jaar);
		attribute<string>     Name  := 'J'+Label;
		attribute<string>     period_name := 'Y'+Label[ID(.)-1[.]] + '_Y'+Label;

		container V := for_each_nedv(name, 'value('+string(ID(.))+', ..)', void, .);
	}
	unit<uint32> ZichtjaarWonen := combine(Zichtjaar, WoningType) // wordt gebruikt om Nieuwbouw maps en ResterdFactorMaps te lezen.
	{
		attribute<bool>       HasMutations      := Zichtjaar/HasMutations[nr_1];
		attribute<string>     zichtjaar_Label   := Zichtjaar/Label[nr_1];
		attribute<string>     zichtjaar_name    := Zichtjaar/Name[nr_1];
		attribute<string>     prev_zichtjaar_name := Zichtjaar/Name[nr_1-1b];
		attribute<units/yr_uint16> zichtjaar_jaar    := Zichtjaar/Jaar[nr_1];
		attribute<string>     period_name       := Zichtjaar/period_name[nr_1];
		attribute<string>     Wonen_Name        := WoningType/Name[nr_2];
		attribute<string>     Wonen_wlo_FileName:= WoningType/wlo_FileName[nr_2];
		attribute<WoningType> WoningType_rel    := nr_2;
		attribute<string>     Name              := zichtjaar_Name + '/' + Wonen_Name;
		attribute<string>     prev_name         := prev_zichtjaar_Name + '/' + wonen_Name;
		attribute<string>     Label             := Name;

		container V := for_each_nedv(name, 'value('+string(ID(.))+', ...)', void, .);
	}
	unit<uint32> ZichtjaarUtiliteit := combine(Zichtjaar, NieuwbouwUtil)
	{
		attribute<bool>       HasMutations   := Zichtjaar/HasMutations[nr_1];
		attribute<string>     zichtjaar_Label:= Zichtjaar/Label[nr_1];
		attribute<string>     zichtjaar_name := Zichtjaar/Name[nr_1];
		attribute<string>     prev_zichtjaar_name := Zichtjaar/Name[nr_1-1b];
		attribute<units/yr_uint16> zichtjaar_jaar := Zichtjaar/Jaar[nr_1];
		attribute<string>     period_name    := Zichtjaar/period_name[nr_1];
		attribute<string>     utiliteit_Name := NieuwbouwUtil/Name[nr_2];
		attribute<string>     wlo_filename_Nieuwbouw:= NieuwbouwUtil/wlo_filename_Nieuwbouw[nr_2];
		attribute<string>     Name           := zichtjaar_Name + '/' + utiliteit_Name;
		attribute<string>     prev_name      := prev_zichtjaar_Name + '/' + utiliteit_Name;
		attribute<string>     Label          := Name;
	}
	unit<uint8> ggWonen: nrofrows = 3
	{
		attribute<string>         Label:     ['CentrumStedelijk','GroenStedelijk','Landelijk'];
		attribute<string>         Afkorting: ['csbc','gscd','lw'];
		attribute<string>         Name := Afkorting;
		attribute<woningtype2006> WoningType:[5,3,1];
	}

	// =========  Classificatie voor  Monetaire eenheid (Eur per m^2)

	unit<uint8> Eur_M2_15K: nrofrows = 15
	{
		attribute<Eur_M2> Classes: DialogType = "Classification",
			[	-500,-25, -15
			,	-5, -0.01, 0.01
			,	2, 3, 4
			,	5, 6, 8
			,	10, 15, 25
			];

		attribute<uint32> Palette: DialogType = "BrushColor",
			[rgb(9,9,145),rgb(34,89,194), rgb(92,163,230),rgb(182,237,240),rgb(196,196,196), 
			 rgb(255,245,0),rgb(255,216,0),rgb(255,180,0),
			 rgb(255, 163, 0), rgb(255,140,0), rgb(255,132,0),rgb(255,128,0),rgb(255,51,0),rgb(230,0,0), rgb(153,0,0)];

		attribute<string> Label: DialogType = "LabelText",
			[' < -25','-25 tot -15','-15 tot -5',' -5 tot 0','     0     ','  0 tot  2','  2 tot  3','  3 tot  4','  4 tot  5',
			'  5 tot  6','  6 tot  8','  8 tot 10',' 10 tot 15',' 15 tot 25',' > 25'];
	}
	unit<uint8> Eur_M2_0_1_15K: nrofrows = 15
	{
		attribute<Eur_M2> Classes: DialogType = "Classification",
		[	0.00, 0.07
		,	0.14, 0.21
		,	0.28, 0.35
		,	0.42, 0.49
		,	0.56, 0.63
		,	0.70, 0.77
		,	0.84, 0.91
		,	0.98
		];

		attribute<uint32> Palette: DialogType = "BrushColor",
			[rgb(0,0,255),rgb(128,128,255), rgb(204,225,236),rgb(192,192,192),rgb(128,128,128), // blauw -> grijs
			 rgb(0,128,0),rgb(0,192,0),rgb(0,255,0), // donger -> licht groen
			 rgb(232, 232,0), rgb(255,255,0), rgb(255,255,155),rgb(255,192,62),rgb(255,128,128),rgb(255,0,0), rgb(192,0,0)];

		attribute<string> Label:DialogType = "LabelText",
			['0.00 tot 0.07','0.07 tot 0.14','0.14 tot 0.21','0.21 tot 0.28','0...28 tot 0.35','0.35 tot 0.42','0.42 tot 0.49','0.49 tot 0.56','0.56 tot 0.63',
			 '0.63 tot 0.70','0.70 tot 0.77','0.77 tot 0.84','0.84 tot 0.91','0...91 tot 0.98','0.98 tot 1.00'];
	}
	
	// =========  Classificaties voor Percentages

	unit<uint8> Percentage13K: nrofrows = 13
	{
		attribute<Percent> Classes: DialogType = "Classification",
			[0,10,20,30,40,50,60,70,80,90,100,120,150];

		attribute<uint32> Palette: DialogType = "BrushColor",
			[
				rgb(255,255,255),rgb(255,229,204),rgb(255,204,153),
				rgb(255,178,102),rgb(255,153, 51),rgb(255,128,  0),
				rgb(223, 96, 32),rgb(191, 64, 64),rgb(180,  0,  0),
				rgb(120,  0,  0),rgb( 60,  0,  0),rgb(120,  0,128),rgb(255,  0,200)];

		attribute<string> Label: DialogType = "LabelText",
			[' 0 -  10','10 -  20','20 -  30','30 -  40','40 -  50','50 -  60','60 -  70','70 -  80','80 -  90','90 - 100','100- 120','120- 150','150- 200'];
	}
	unit<uint8> Ratio9K: nrofrows = 9
	{
		attribute<Ratio> Classes: DialogType = "Classification",
			[0,0.0001,0.15,0.30,0.45,0.60,0.75,0.90,1.05];

		attribute<uint32> Palette: DialogType = "BrushColor",
			[
				rgb(218,218,218), rgb(255,255,204),rgb(255,255,128),
				rgb(255,230,102), rgb(255,179, 51),rgb(255,128,  0),
				rgb(255, 51,  0), rgb(230,  0,  0),rgb(153,  0,  0)];

		attribute<uint32> SymbolColor: DialogType = "SymbolColor", Expr = "Palette";

		attribute<string> Label: DialogType = "LabelText",
			[' 0 ', '0    - 0.15', '0.15 - 0.30', '0.30 - 0.45', '0.45 - 0.60', '0.60 - 0.75', '0.75 - 0.90', '0.90 - 1.05', '> 1.05'];
	}

// =========  Classificatie voor Potentiaal (eenheidsloos)
	unit<uint8> Potentiaal10K: nrofrows = 10
	{
		attribute<Potentiaal> Classes:
			DialogType = "Classification",
			[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9];

		attribute<uint32> Palette: DialogType = "BrushColor",
			[rgb(192,192,192),rgb(0,0,255),rgb(0,64,192),rgb(0,128,128),rgb(0,192,64),rgb(0,255,0),rgb(64,192,0),rgb(128,128,0),rgb(192,64,0),rgb(255,0,0)];

		attribute<string> Label: DialogType = "LabelText",
			['0.00 - 0.10','0.10 - 0.20','0.20 - 0.30','0.30 - 0.40','0.40 - 0.50','0.50 - 0.60','0.60 - 0.70','0.70 - 0.80','0.80 - 0.90','0.90 - 1.00'];
	}

// =========  Classificatie voor afstanden in km
	unit<uint8> km_7k: nrofrows = 8
	{
		attribute<km> Classes: DialogType = "Classification",
			[0,5,10,15,30,50,75,100];

		attribute<uint32> Palette: DialogType = "BrushColor",
			[rgb(0,0,255),rgb(85,85,170),rgb(170,170,85),rgb(255,255,0),rgb(255,204,0),rgb(255,153,0),rgb(255,102,0),rgb(192,192,192)];

		attribute<string> Label: DialogType = "LabelText",
			['0 to 5','5 to 10','10 to 15','15 to 30','30 to 50','50 to 75','75 to 100','Geen'];
	}

// =========  Classificatie voor Nrarbeidspl
	unit<uint8> Nrarbeidspl12K: nrofrows = 12
	{
		attribute<Nrarbeidspl> Classes: DialogType = "Classification",
			[0,85000,170000,255000,340000,425000,510000,595000,680000,1258000,1343000,1428000];

		attribute<uint32> Palette: DialogType = "BrushColor",
			[rgb(192,192,192),rgb(255,255,128),rgb(255,226,113),rgb(255,198,99),rgb(255,169,85),rgb(255,141,71),rgb(255,113,56),rgb(255,84,42),rgb(255,56,28),rgb(255,28,14),rgb(202,53,191),rgb(128,0,255)];

		attribute<string> Label: DialogType = "LabelText",
			['0-85.000','85.000-170.000','170.000-255.000','255.000-340.000','340.000-425.000','425.000-510.000','510.000-595.000','595.000-680.000','680.000-1.258.000','1.258.000-1.343.000','1.343.000- 1.428.000','meer dan 1.428.000'];
	}
	
// =========  Classificatie voor de vervangingsstatus van Gasleidingen beheerd door Stedin""
	unit<uint8> StatusKl: nrofrows = 3
	{
		attribute<string> label: DialogType = "LabelText",
		[
				'Te vervangen'
			,	'<= 30 jaar'
			,	'> 30 jaar'
		];
		attribute<uint32> SymbolColor: DialogType = "PenColor",
		[
				rgb(  0,  0,  0)
			,	rgb(100,100,100)
			,	rgb(200,200,200)

		];
	}
}