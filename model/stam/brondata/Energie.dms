//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door stam.dms                                  //
//       In deze configuratiefile wordt de energie gerelateerde brondata geconfigureerd //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Energie: Descr = "Blok 2", FreeData = "False"
{
	container vraag
	{
		container ModelBagWoning :=
			CalculationSchemes/EnergieKengetallen/import(
				'20160707_Woningen_BAG.csv', 
				'WoningType_str', 
				Classifications/WoningtypeGeoHoogte, Classifications/BouwJaarBag, Units/nrWoningen, Units/nrWoningen
			)
		{
			container results
			{
				container Verbeteringen
				{
					container S_H_T := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'A');
					container S_H_B := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'B');
					container S_H_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
					container S_T_B := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_T/verbruik, S_H_T/Comfort_verbetering_tov_h, 'D');
					container S_T_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_T/verbruik, S_H_T/Comfort_verbetering_tov_h, 'E');
					container S_B_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_B/verbruik, S_H_B/Comfort_verbetering_tov_h, 'F');
				}
			}
		}
		container ModelWoningNieuwbouw :=
			CalculationSchemes/EnergieKengetallen/import(
				'20160525_Woningen_Nieuwbouw_BAG.csv',
				'WoningType_str',
				Classifications/woningtype, Classifications/BouwJaar, Units/nrWoningen, Units/nrWoningen
			)
		{
			container results {
				container Verbeteringen
				{
					container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

					container S_H_T := S_X_X;
					container S_H_B := S_X_X;
					container S_H_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid,  Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
					container S_T_B := S_X_X;
					container S_T_AP:= S_X_X;
					container S_B_AP:= S_H_AP;
				}
			}
		}
		container ModelBagUtil :=
			CalculationSchemes/EnergieKengetallen/import(
				'20160706_Utiliteiten_BAG.csv',
				'UtiliteitType_str', 
				Classifications/UtiliteitBAG,Classifications/BouwjaarUtilBag,  Units/m2, Units/m2
			)
		{
			container results {
				container Verbeteringen
				{
					container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

					container S_H_T := S_X_X;
					container S_H_B := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'B');
					container S_H_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'C');
					container S_T_B := S_X_X;
					container S_T_AP:= S_X_X;
					container S_B_AP:= GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, S_H_B/verbruik, S_H_B/Comfort_verbetering_tov_h, 'F');
				}
			}
		}
		container ModelUtilNieuwbouw :=
			CalculationSchemes/EnergieKengetallen/import(
				'20160525_Utiliteiten_Nieuwbouw_BAG.csv',
				'UtiliteitType_str', 
				Classifications/NieuwbouwUtil, Classifications/BouwJaar,  Units/m2, Units/m2
			)
		{
			container results {
				container Verbeteringen
				{
					container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

					container S_H_T := S_X_X;
					container S_H_B := S_X_X;
					container S_H_AP:= S_X_X;
					container S_T_B := S_X_X;
					container S_T_AP:= S_X_X;
					container S_B_AP:= S_X_X;
				}
			}
		}
		container ModelGlTb2010 :=
			CalculationSchemes/EnergieKengetallen/import(
				'20160706_Glastuinbouw_BAG.csv', 
				'UtiliteitType_str',
				Classifications/GlTb, Classifications/bouwjaar, Units/m2, Units/m2
			)
		{
			container results {
				container Verbeteringen
				{
					container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

					container S_H_T := S_X_X;
					container S_H_B := S_X_X;
					container S_H_AP:= S_X_X;
					container S_T_B := S_X_X;
					container S_T_AP:= S_X_X;
					container S_B_AP:= S_X_X;
				}
			}
		}
		container ModelGlTbNieuwbouw :=
			CalculationSchemes/EnergieKengetallen/import(
				'20160525_Glastuinbouw_Nieuwbouw_BAG.csv',
				'UtiliteitType_str',
				Classifications/GlTb, classifications/bouwjaar, Units/m2, Units/m2
			)
		{
			container results {
				container Verbeteringen
				{
					container S_X_X := GebouwTempl(ModelObject, GJ_yr_per_Eenheid, Eur_per_eenheid, Functioneel/Ruimteverwarming, const(0.0[GJ_yr_Per_Eenheid], ModelObject), 'X');

					container S_H_T := S_X_X;
					container S_H_B := S_X_X;
					container S_H_AP:= S_X_X;
					container S_T_B := S_X_X;
					container S_T_AP:= S_X_X;
					container S_B_AP:= S_X_X;
				}
			}
		}
		Template GebouwTempl
		{
			unit<uint32>                 ModelObject;
			unit<float64>                GJ_yr_per_Eenheid;
			unit<float64>                Eur_per_eenheid;
			attribute<GJ_yr_per_Eenheid> verbruik_prev(ModelObject); // alleen ruimteverwarming
			attribute<GJ_yr_per_Eenheid> comfort_prev (ModelObject);
			parameter<string>            VerbeterCode;

			// =================== ReboundFactor
			// verbetering van 100 kuub-> 85 kuub met een ReboundFactor van x 
			// geeft een besparing van 15 kuub en 
			// een comfortverbetering ter waarde van 15 kuub * ( 1/ (1-x) - 1); 
			// totaal voordeel is dus 15 kuub  / (1-x).
			// waarvan fractie x de comfortverbetering die gelijk gesteld is aan de Rebound en 
			// fractie (1-x) de feitelijke besparing is.
			attribute<Ratio> ReboundFactor_stap(ModelObject) :=
				=(VerbeterCode!='X') 
				? 'MakeDefined(table/RB_FAC_'+VerbeterCode+'[Ratio], 0.0[Ratio])' 
				: 'const(0 / 0, ModelObject, Ratio)';

			// de volgende kenmerken betreffen ook aleen RuimteVerwarming
			attribute<GJ_yr_per_Eenheid> verbruik(ModelObject) := 
				=(VerbeterCode!='X') 
				? 'MakeDefined(table/MV'+VerbeterCode+'_EG[GJ_yr_per_Eenheid], Functioneel/Ruimteverwarming)' 
				: 'const(0 / 0, ModelObject, GJ_yr_per_Eenheid)';

			attribute<GJ_yr_per_Eenheid> energie_verbetering_stap  (ModelObject) := verbruik - verbruik_prev;
			attribute<GJ_yr_per_Eenheid> totale_verbetering_stap   (ModelObject) := energie_verbetering_stap / (1.0 - ReboundFactor_stap);
			attribute<GJ_yr_per_Eenheid> comfort_verbetering_stap  (ModelObject) := totale_verbetering_stap - energie_verbetering_stap;

			attribute<Ratio>             efficiency                (ModelObject) := Functioneel/Ruimteverwarming / verbruik;
			attribute<Ratio>             ComfortFactor_stap        (ModelObject) := 1.0 / (1.0 - ReboundFactor_stap) - 1.0;

			attribute<GJ_yr_per_Eenheid> energie_verbetering_tov_h (ModelObject) :=  Functioneel/Ruimteverwarming - verbruik;
			attribute<GJ_yr_per_Eenheid> comfort_verbetering_tov_h (ModelObject) :=  comfort_prev + comfort_verbetering_stap;
			attribute<GJ_yr_per_Eenheid> totale_verbetering_tov_h  (ModelObject) :=  energie_verbetering_tov_h + comfort_verbetering_tov_h;

			attribute<Eur_per_eenheid> kosten_min (ModelObject) :=
				=(VerbeterCode!='X')
				? 'MakeDefined(table/MV'+VerbeterCode+'_EG_Eur_MIN[Eur_per_eenheid], 0.0[Eur_per_eenheid])'
				: 'const(0 / 0, ModelObject, Eur_per_eenheid)';
			attribute<Eur_per_eenheid> kosten_max (ModelObject) :=
				=(VerbeterCode!='X')
				? 'MakeDefined(table/MV'+VerbeterCode+'_EG_Eur_MAX[Eur_per_eenheid], 0.0[Eur_per_eenheid])'
				: 'const(0 / 0, ModelObject, Eur_per_eenheid)';
		}
	}

	// Kosten (investeringen etc.) voor warmtelevering:
	// a	Woningen (per woningtype, per leeftijdcategorie).
	// b	Utiliteit (per m2, per aard utiliteit).
	// c	Glastuinbouw (per hectare, per type )
	// d	Onderdelen distributie warmte.
	// e	Transport warmte (prijs per km rechte afstand; gedifferentieerd naar capaciteit; + 'omwegfactor')

	container prijzen := CalculationSchemes/EnergiePrijzen/All(Parameters/prijzenBron, log(1.00)[_yr]), Descr = "zie FO $3.5";
	
	container label
	{
		unit<uint32> src
		:	StorageName     = "%SourceDataProjDir%/vraag/wonen/inputlabels_rvo_20180501.csv"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			parameter<string> SQoute := '\''', IsHidden = "True";

			attribute<string> HLT_unquoted := trim(replace(HLT,SQoute,''));
			attribute<string> adres_key    :=
				replace(Postcode,SQoute,'') + '_' + replace(HNR,SQoute,'') + 
				(strlen(HLT_unquoted) > 0 
					? '_' + HLT_unquoted
					: ''
				);
			//order of replace matters!
			attribute<Classifications/energielabel> energielabel_rel := rlookup(replace(replace(replace(replace(replace(label,SQoute,''),'A++++','eWP'),'A+++','eWP'),'A++','eWP'),'A','A+'), Classifications/energielabel/Label);
			attribute<uint32>                       datum_numeriek   := uint32(replace(DATUM,SQoute,''));
			attribute<voorkomend>                   voorkomend_rel   := rlookup(label, voorkomend/Values);
		}

		unit<uint32> voorkomend := unique(src/label)
		{
			attribute<uint32> aantal := pcount(src/voorkomend_rel);
		}

		unit<uint32> data := unique(src/adres_key)
		{
			attribute<string>                       nummeraanduiding_id := BAG/import/nummeraanduiding/identificatie[rlookup(values, BAG/import/nummeraanduiding/adres_key)];
			attribute<string>                       vbo_id              := rjoin(nummeraanduiding_id, BAG/import/vbo/nummeraanduiding_id, BAG/import/vbo/identificatie), FreeData = "False";

			attribute<uint32>                       datum_laatste       := max(src/datum_numeriek, rlookup(src/adres_key, values));
			attribute<Classifications/energielabel> energielabel_rel    := rjoin(values + '_' + string(datum_laatste), src/adres_key + '_' + string(src/datum_numeriek), src/energielabel_rel), FreeData = "False";
		}
	}
}