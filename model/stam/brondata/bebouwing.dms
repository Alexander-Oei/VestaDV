//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                                  (C) VESTA 2018                                      //
//        Het doel van het model is om beleidsinformatie te genereren met betrekking    //
//        tot de energievoorziening van de gebouwde omgeving.                           //
//                                                                                      //
//                         Planbureau voor de Leefomgeving                              //
//                                    JUNI 2018                                         //
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     * In het geval van externe publicatie van onderzoeksresultaten waarbij gebruik   //
//       is gemaakt van de verstrekte gegevens dient de gebruiker deze resultaten aan   //
//       het PBL mede te delen middels de toezending van 2 exemplaren van de betref-    //
//       fende publicatie aan het hoofd van het team ROL van het PBL.                   //
//                                                                                      //
//     * In elke publicatie waarin de gegevens van het PBL in enige vorm zijn opgenomen,//
//       zal de gebruiker de vermelding opnemen: "Bron: Planbureau voor de Leefomgeving"//
//       Indien het een bewerking van de gegevens betreft, dient te worden opgenomen:   //
//       "Gebaseerd op Planbureau voor de Leefomgeving gegevens".                       //
//                                                                                      //
//     * Het PBL is onder geen enkele voorwaarde aansprakelijk tegenover gebruiker voor //
//       enige schade, mede begrepen winstderving, verlies van gegevens, schade         //
//       tengevolge van fouten of onjuistheden in gegevens, schade tengevolge van fouten//
//       of onvolkomenheden in de documentatie of andere incidentele of gevolgschade    //
//       welke voortvloeit uit of in verband staat met gebruik of het niet kunnen ge-   //
//       bruiken van gegevens.                                                          //
//                                                                                      //
//     * Het PBL staat niet in voor de juistheid van de resultaten die worden verkregen //
//       door combinatie van diverse, op zichzelf staande PBL-gegevens onderling,       //
//       of met die uit andere bronnen.                                                 //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       Deze DMS-file wordt aangeroepen door brondata.dms                              //
//       In deze configuratiefile wordt de utiliteit brondata geconfigureerd.           //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container bebouwing
: Descr = "zie FO $2, Blok 1"
{
	unit<uint32> Woning := BAG/vbo_woonfunctie,	DialogData = "point", DialogType = "Map"
	{
		unit<uint32> BebouwingsObject:= .;
		unit<uint8>  KengetalTypeDomein:= Classifications/WoningtypeGeoHoogte;
		unit<uint8>  BouwjaarDomein:= Classifications/BouwJaarBAG;
		unit<uint8>  SubtypeDomein:= Classifications/WoningtypeBouwJaarBAG;

		attribute<string>                             code               := BAG/vbo_woonfunctie/identificatie;
		attribute<String>                             PC6code            := postcode;
		attribute<RegioIndelingen/PC4>                PC4_rel            := MakeDefined(Impl/PC4_coderel,Impl/PC4_georel);
		attribute<RegioIndelingen/blok500m>           blok500m_rel       := RegioIndelingen/blok500m/BaseGrid[point[rdc_grids/m500]];
		attribute<RegioIndelingen/blok1km>            blok1km_rel        := RegioIndelingen/blok1km/BaseGrid[point[rdc_1km]];
		attribute<RegioIndelingen/blok2km>            blok2km_rel        := RegioIndelingen/blok2km/BaseGrid[point[rdc_2km]];
		attribute<RegioIndelingen/buurt>              buurt_rel          := point_in_polygon(point, RegioIndelingen/buurt/geometry);

		attribute<nrAansl>                            nrAansluitingen    := Impl/nrWon * 1[ nrAansl / nrWoningen];
		attribute<nrWoningen>                         nrJoinedUnits      := Impl/nrWon;
		attribute<nrWoningen>                         nrWoonUnits        := Impl/nrWon;

		attribute<Float64>                            AandeelWarmteVraag := MakeDefined(ScenarioSpecs/VestaRunOpties/VraagKentallen/BaseLine/Woning/Deelname[KengetalType], 0.0), FreeData = "True";
		attribute<Classifications/GeenOnderverdeling> GeenOnderverdeling := const(0,.,Classifications/GeenOnderverdeling);
		attribute<KengetalTypeDomein>                 KengetalType       := Impl/WoningType;
		attribute<UInt8>                              SubType            := value(KengetalType *  UInt8(#(Classifications/BouwJaarBAG)) + Impl/BouwjaarBag_rel, classifications/WoningTypeBouwjaarBAG);
		attribute<BouwjaarDomein>                     BouwJaar:           = Classify(BAG/vbo_woonfunctie/bouwjaar, Classifications/BouwJaarBAG/ClassBreak);

		attribute<rdc_meter> point := BAG/vbo_woonfunctie/geometry
		{
			parameter<float64> SymbolSize     := 14.0,  DialogType = "SymbolSize";
			parameter<m>       SymbolWorldSize:= 30[m], DialogType = "SymbolWorldSize";
		}
		container Gebied
		{
			attribute<Float64> n      (..) := const(1.0,..);
			attribute<Float64> MEAN_x (..) := Float64(PointCol(point));
			attribute<Float64> MEAN_y (..) := Float64(PointRow(point));
			attribute<Float64> SSD_xx (..) := const(0.0, ..);
			attribute<Float64> SSD_xy (..) := const(0.0, ..);
			attribute<Float64> SSD_yy (..) := const(0.0, ..);
		}
		attribute<Classifications/energielabel> EnergieLabelData_rel := rjoin(code, EnergieLabelData/VBO_ID, EnergieLabelData/energielabel_rel)
		{
			attribute<uint32>                       totaal    (..):= uint32(isDefined(EnergieLabelData_rel));
			attribute<uint32>                       TotWeight (..):= MakeDefined(UInt32(AvgLabel), 0);
			attribute<Classifications/energielabel> AvgLabel  (..):= EnergieLabelData_rel;
		}

		container Criteria
		{
		}
//		attribute<Classifications/eigendom_woning  > Eigendom := rjoin(PC6code, GmpWoning/PC6code, GmpWoning/Eigendom); // wordt gebruikt bij BestaandeWoningRapGroep [ 4 ]
//		attribute<Classifications/InkomensKlasse>    Inkomen  := rjoin(PC6code, GmpWoning/PC6code, GmpWoning/Inkomen ); // wordt gebruikt bij BestaandeWoningRapGroep [ 8 ]

		
		container Impl
		{
			attribute<String>                              PC4code         (..):= substr(PC6code,0,4);
			attribute<uint16>                              PC4_nr          (..):= uint16(PC4code);
			attribute<RegioIndelingen/PC4>                 PC4_coderel     (..):= rlookup(PC4_nr, RegioIndelingen/PC4/code);             // contains 111 null values(2006),  1 null values(2009)
			attribute<RegioIndelingen/PC4>                 PC4_georel      (..):= point_in_polygon(point, RegioIndelingen/PC4/Geometry); // contains 158 null values(2006), 48 null values(2009)

			attribute<nrWoningen>                          nrWon           (..):= const(1,..,nrWoningen);

			attribute<Classifications/BouwJaarBag>         BouwJaarBag_rel (..):= BAG/vbo_woonfunctie/BouwjaarBag_rel;
			attribute<string>                              BouwJaarExcel   (..):= Classifications/BouwjaarBag/excel_code[BouwJaarBag_rel];

			attribute<classifications/WoningtypeGeoHoogte> WoningType      (..):= BAG/vbo_woonfunctie/WoningtypeGeoHoogte_rel;
			attribute<KengetalTypeDomein>                  KengetalType    (..):= WoningType;
			// quantity of model unit
		}
	}

	unit<uint32> Utiliteit:= BAG/vbo_utiliteit
	{
		unit<uint32>  BebouwingsObject:= .;
		unit<uint8>   KengetalTypeDomein:= Classifications/utiliteitBAG;

		// external key
		attribute<string>                     code          := BAG/vbo_utiliteit/identificatie;
		attribute<String>                     postcode      := BAG/vbo_utiliteit/postcode;
		attribute<String>                     PC6code       := postcode;

		attribute<String>                     PC4code       := substr(PC6code,0,4);
		attribute<uint16>                     PC4_nr        := uint16(PC4code);

		attribute<RegioIndelingen/PC4>        PC4_coderel   := rlookup(PC4_nr, RegioIndelingen/PC4/code);              // contains  1 null values(2009)
		attribute<RegioIndelingen/PC4>        PC4_georel    := point_in_polygon(point, RegioIndelingen/PC4/Geometry);  // contains 70 null values(2009)
		attribute<RegioIndelingen/PC4>        PC4_rel       := MakeDefined(PC4_coderel,PC4_georel);                    // contains  0 null values(2009)

		attribute<RegioIndelingen/buurt>      Buurt_rel     := point_in_polygon(point, RegioIndelingen/buurt/geometry);
		
		attribute<rdc_meter>                  point         := BAG/vbo_utiliteit/locatie;
		attribute<RegioIndelingen/blok500m>   blok500m_rel  := RegioIndelingen/blok500m/BaseGrid[point[rdc_grids/m500]];
		attribute<RegioIndelingen/blok1km>    blok1km_rel   := RegioIndelingen/blok1km/BaseGrid[point[rdc_1km]];
		attribute<RegioIndelingen/blok2km>    blok2km_rel   := RegioIndelingen/blok2km/BaseGrid[point[rdc_2km]];

		attribute<Classifications/BouwJaar>   BouwJaar      := Classify(BAG/vbo_utiliteit/bouwjaar, Classifications/BouwJaar/ClassBreak);

		attribute<nrAansl>                    nrAansluitingen := const(1[nrAansl], .);
		attribute<m2>                         nrJoinedUnits   := BAG/vbo_utiliteit/oppervlakte[m2];
		attribute<nrWoningen>                 nrWoonUnits     := nrJoinedUnits / 100[m2/ nrWoningen];

		container Gebied
		{
			attribute<Float64> n     (..) := const(1.0, ..);
			attribute<Float64> MEAN_x(..) := PointCol(point);
			attribute<Float64> MEAN_y(..) := PointRow(point);
			attribute<Float64> SSD_xx(..) := const(0.0, ..);
			attribute<Float64> SSD_xy(..) := const(0.0, ..);
			attribute<Float64> SSD_yy(..) := const(0.0, ..);
		}

		// foreign key to model data
		//attribute<Classifications/UtilRapGroep> RapGroep;

		attribute<Classifications/BouwjaarUtilBag> BouwjaarUtilBag_rel := BAG/vbo_utiliteit/BouwjaarUtilBag_rel;
		attribute<KengetalTypeDomein>              KengetalType        := BAG/vbo_utiliteit/gebruiksdoel;
		attribute<UInt8>                           SubType             := KengetalType *  UInt8(NrOfRows(Classifications/BouwjaarUtilBag)) + BouwjaarUtilBag_rel;

		attribute<int16>                           SymbolIndex         := KengetalTypeDomein/SymbolIndex[KenGetalType], DialogType = "SymbolIndex";

		unit<uint32> subtypes:= unique(SubType)
		{
			attribute<Classifications/BouwjaarUtilBag> Bouwjaar := rjoin(values, SubType, BouwjaarUtilBag_rel);
			attribute<KengetalTypeDomein>              Kengetal := rjoin(values, SubType, KengetalType);
		}

		//AandeelWarmteVraag voor elk bebouwingsobject aanzetten: activeer dan de onderste regel en deactiveer de bovenste regel		
		attribute<Float64>  AandeelWarmteVraag := MakeDefined(ScenarioSpecs/VestaRunOpties/VraagKentallen/BaseLine/Utiliteit/Deelname[KengetalType], 0.0), FreeData = "True";
		container Criteria 
		{
		}
	}

	
	container NieuwbouwWoning :=
		for_each_nedv(  BronData/Nieuwbouw/SZW/HasMutations ? BronData/Nieuwbouw/SZW/Name : ''
			, 'BronData/Nieuwbouw/Woning/'+BronData/Nieuwbouw/SZW/Name+'[nrWoningen]'
			, Geography/rdc_grids/m100, nrWoningen
		);
	
	container Util_Nieuwbouw_Inbreiding :=
		for_each_nedv(
			BronData/Nieuwbouw/SZU/HasMutations ? BronData/Nieuwbouw/SZU/Name : ''
			,	BronData/Nieuwbouw/SZU/Zichtjaar_jaar > 2010w && strlen(BronData/Nieuwbouw/SZU/wlo_filename_Nieuwbouw) > 0 
			?	'int32(sum( '
					'bebouwing/utiliteit/NrJoinedUnits * ' +
					'Float64(bebouwing/utiliteit/KengetalTypeDomein/utiliteit_rel[bebouwing/utiliteit/KengetalType] == '+string(BronData/Nieuwbouw/SZU/nr_2)+'[uint8])'
			 	+	', bebouwing/utiliteit/point[rdc_grids/m100]'
				')'
				'*max_elem(Float64(Nieuwbouw/InbreidingUtilFactor/'+BronData/Nieuwbouw/SZU/Name+') - 1.0 , 0.0)'
				')'
			:	'const(0i, Geography/rdc_grids/m100)'
			,	Geography/rdc_grids/m100, int32
		);
					


		
	container Util_Nieuwbouw_Nieuwbouw :=
		for_each_nedv(
			BronData/Nieuwbouw/SZU/HasMutations ? BronData/Nieuwbouw/SZU/Name : ''
			,	BronData/Nieuwbouw/SZU/Zichtjaar_jaar > 2010w && strlen(BronData/Nieuwbouw/SZU/wlo_filename_Nieuwbouw) > 0 
				?	'int32(Nieuwbouw/UtilOppervlak/'+BronData/Nieuwbouw/SZU/Name +')'
					''
				:	'const(0i, Geography/rdc_grids/m100)'
			,	Geography/rdc_grids/m100, int32
		);
	container NieuwbouwUtil :=
		for_each_nedv(
			BronData/Nieuwbouw/SZU/HasMutations ? BronData/Nieuwbouw/SZU/Name : ''
			,	'Util_Nieuwbouw_Nieuwbouw/'+BronData/Nieuwbouw/SZU/Name + ' + Util_Nieuwbouw_Inbreiding/'+BronData/Nieuwbouw/SZU/Name
			,	Geography/rdc_grids/m100, int32
		);

	unit<uint32> glastuinbouw:
		StorageName     = "%sourceDataProjDir%/vraag/glastuinbouw/gltb_pc04_010316.dbf",
		DialogData      = "point",
		DialogType      = "Map",
		StorageReadOnly = "True",
		SyncMode        = "All",
		url             = "%sourceDataProjDir%/vraag/glastuinbouw/metadata/Hoofdformulier_GDI09.pdf",
		FreeData        = "False"
	{
		unit<uint32>  BebouwingsObject := ., FreeData = "True";
		unit<uint8>   KengetalTypeDomein := Classifications/GLTB;
		
		// external key
		attribute<string>                     code  := string(ID(.));
		attribute<UInt32>                     postcode4;
		attribute<String>                     Label := String(postcode4), DialogType = "LabelText", FreeData = "True";
		attribute<Classifications/GLTB>       GLTB_Code;

		attribute<UInt32>                     PC4code:= postcode4, FreeData = "True";
		attribute<UInt16>                     PC4_nr := value(PC4code, UInt16), FreeData = "True";
		attribute<RegioIndelingen/PC4>        PC4_rel:= rlookup(PC4_nr, RegioIndelingen/PC4/code);
			
		attribute<String>                     BuurtcodeStr       := BU_CODE;
		attribute<String>                     buurtcode          := substr(BuurtcodeStr,2,10);
		attribute<UInt32>                     Buurt_nr           := value(buurtcode,  UInt32), FreeData = "True";
		attribute<RegioIndelingen/buurt>      Buurt_rel          := rlookup(Buurt_nr, RegioIndelingen/buurt/code);

		attribute<RegioIndelingen/blok500m>   blok500m_rel: Expr = "RegioIndelingen/blok500m/BaseGrid[point[rdc_grids/m500]]", FreeData = "True";
		attribute<RegioIndelingen/blok1km>    blok1km_rel:  Expr = "RegioIndelingen/blok1km/BaseGrid[point[rdc_1km]]", FreeData = "True";
		attribute<RegioIndelingen/blok2km>    blok2km_rel:  Expr = "RegioIndelingen/blok2km/BaseGrid[point[rdc_2km]]", FreeData = "True";
		
		attribute<m2>      Opp_M2;
		attribute<nrAansl>    nrAansluitingen:= const(1[nrAansl   ], .), FreeData = "True";
		attribute<nrWoningen> nrWoonUnits    := const(0[nrWoningen], .), FreeData = "True";
		attribute<m2>      NrJoinedUnits := Opp_M2;

		// location
		attribute<rdc_meter> point:
			StorageName     = "%sourceDataProjDir%/vraag/glastuinbouw/gltb_pc04_010316.shp",
			StorageReadOnly = "True"
		{
			parameter<Float64> SymbolSize:      DialogType = "SymbolSize",      expr = "Float64(16)";
			parameter<m>       SymbolWorldSize: DialogType = "SymbolWorldSize", expr = "value(100, m)";
			parameter<int16>   SymbolIndex:     DialogType = "SymbolIndex",     expr = "int16(81)";
		}
		// foreign key to model data
		attribute<Classifications/BouwJaar>   BouwJaar: Expr = "const(Classifications/Bouwjaar/Onbekend, .)", FreeData = "True";
		
		attribute<KengetalTypeDomein> KengetalType: Expr = "GLTB_Code", FreeData = "True";
		attribute<UInt8> SubType:    Expr = "GLTB_Code *  UInt8(NrOfRows(Classifications/BouwJaar)) + BouwJaar";
		
		attribute<Float64>  AandeelWarmteVraag := MakeDefined(ScenarioSpecs/VestaRunOpties/VraagKentallen/BaseLine/Glastuinbouw/Deelname[KengetalType], 0.0), FreeData = "True";
		container Criteria
		{
		//		attribute<Bool>     KanBesparen: Expr = "const(false, BebouwingsObject)"; // Vul  hier iets anders in als je in RuimtelijkeVraagMetBesparing wel besparingen voor glastuinbouw wilt
		}
	}
}
